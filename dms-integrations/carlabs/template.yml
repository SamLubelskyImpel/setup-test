AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Carlabs DMS ETL

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: '^[a-zA-z0-9-]+$'
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens

Conditions:
  IsProd:
    Fn::Equals:
    - Ref: AWS::AccountId
    - 196800776222

Mappings:
  SslCertificates:
    us-east-1:
      '143813444726': 'arn:aws:acm:us-east-1:143813444726:certificate/9f026b43-c690-4434-93e1-9be4ef91f67d'
      '196800776222': 'arn:aws:acm:us-east-1:196800776222:certificate/4bad36e0-d971-41e6-a2d8-a897013012be'
  Subnets:
    us-east-1:
      '196800776222':
        - subnet-0d29a385efe83bf1c
        - subnet-0e88ecdd743701e96
        - subnet-00291e028e21cb78f
        - subnet-0b1555d5fa3c8ba8e
      '143813444726':
        - subnet-030d57e39ec0df603
        - subnet-01044d580678ea63c
        - subnet-0b29db0aeb6cdabec
        - subnet-0e28d592f2ca28fb7
  VpcId:
    us-east-1:
      '196800776222': vpc-03417e688cee5bc07
      '143813444726': vpc-0b28df8980a1905d5

Globals:
  Function:
    Runtime: python3.9
    EventInvokeConfig:
      MaximumRetryAttempts: 0
    Environment:
      Variables:
        LOGLEVEL: INFO
        ENVIRONMENT: !Ref Environment
        IS_PROD: !If [ IsProd, true, false ]
        BUCKET: !Ref CarlabsETLBucket
        FAILURES_QUEUE: !Ref ETLFailuresQueue
    VpcConfig:
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetIds: !FindInMap [ Subnets, !Ref 'AWS::Region', !Ref 'AWS::AccountId' ]

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Permit traffic from the Carlabs ETL
      VpcId: !FindInMap [ VpcId, !Ref 'AWS::Region', !Ref 'AWS::AccountId']
      SecurityGroupEgress:
        - Description: AllowAll
          CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: carlabs-etl

  RDSInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "carlabs etl rds access"
      GroupId: !If [ IsProd,
                      'sg-00e12bc4c116eb820',
                      'sg-00b911ee260ce5153'
                    ]
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId

  SalesHistoryETLFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Pull sales history from Carlabs
      CodeUri: app
      Handler: data_pull.sales_history
      Timeout: 900
      MemorySize: 4096
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: SQS
              Effect: Allow
              Action: sqs:SendMessage
              Resource: !GetAtt ETLFailuresQueue.Arn
            - Sid: S3
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
              Resource: !Sub 'arn:aws:s3:::${CarlabsETLBucket}/*'
            - Sid: Secrets
              Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource:
                - !If [IsProd, !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/DMSDB*', !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/DMSDB*']
                # - !Ref CarlabsDataIntegrationsSecrets
                # - !Ref CarlabsAnalyticsSecrets
                - !If [IsProd, !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:carlabs/data_integrations_prod*', !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:carlabs/data_integrations_test*']
                - !If [IsProd, !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:carlabs/analytics_prod*', !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:carlabs/analytics_test*']

  RepairOrderETLFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Pull repair order data from Carlabs
      CodeUri: app
      Handler: data_pull.repair_order
      Timeout: 900
      MemorySize: 2048
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: SQS
              Effect: Allow
              Action: sqs:SendMessage
              Resource: !GetAtt ETLFailuresQueue.Arn
            - Sid: S3
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
              Resource: !Sub 'arn:aws:s3:::${CarlabsETLBucket}/*'
            - Sid: Secrets
              Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource:
                - !If [IsProd, !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/DMSDB*', !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/DMSDB*']
                # - !Ref CarlabsDataIntegrationsSecrets
                # - !Ref CarlabsAnalyticsSecrets
                - !If [IsProd, !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:carlabs/data_integrations_prod*', !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:carlabs/data_integrations_test*']
                - !If [IsProd, !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:carlabs/analytics_prod*', !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:carlabs/analytics_test*']

  CarlabsETLBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub carlabs-etl-${Environment}
      AccessControl: Private

  ETLFailuresQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'carlabs-etl-failures-queue-${Environment}'
      MessageRetentionPeriod: 1209600

  StepFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !Sub '${SalesHistoryETLFunction.Arn}'
                  - !Sub '${RepairOrderETLFunction.Arn}'
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:CreateLogStream
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutLogEvents
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: '*'
        - PolicyName: Xray
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource: '*'
        - PolicyName: CloudWatchAlarmsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricAlarm
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource: '*'

  SalesHistoryETLStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Role: !GetAtt StepFunctionRole.Arn
      DefinitionUri: state_machines/sales_history.json
      DefinitionSubstitutions:
        SalesHistoryETLFunction: !GetAtt SalesHistoryETLFunction.Arn

  RepairOrderETLStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Role: !GetAtt StepFunctionRole.Arn
      DefinitionUri: state_machines/repair_order.json
      DefinitionSubstitutions:
        RepairOrderETLFunction: !GetAtt RepairOrderETLFunction.Arn

  SalesHistoryETLStateMachineFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm for SalesHistoryETLStateMachine failures"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      DatapointsToAlarm: 1
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Period: 43200 # 12 hours
      Statistic: Sum
      Threshold: 1
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref SalesHistoryETLStateMachine
      ActionsEnabled: !If [IsProd, true, false]
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering

  RepairOrderETLStateMachineFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm for RepairOrderETLStateMachine failures"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      DatapointsToAlarm: 1
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Period: 43200 # 24 hours
      Statistic: Sum
      Threshold: 1
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref RepairOrderETLStateMachine
      ActionsEnabled: !If [IsProd, true, false]
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering

  StateMachineTriggerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StartEventBridge
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource:
                  - !GetAtt SalesHistoryETLStateMachine.Arn
                  - !GetAtt RepairOrderETLStateMachine.Arn

  SalesHistoryETLStateMachineTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: Nightly trigger for SalesHistoryETLStateMachine
      ScheduleExpression: cron(0 22 * * ? *)  # Schedule for 10pm UTC every day
      State: !If [IsProd, ENABLED, DISABLED]
      Targets:
        - Arn: !GetAtt SalesHistoryETLStateMachine.Arn
          Id: SalesHistoryETLStateMachine
          RoleArn: !GetAtt StateMachineTriggerRole.Arn

  RepairOrderETLStateMachineTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: Nightly trigger for RepairOrderETLStateMachine
      ScheduleExpression: cron(0 22 * * ? *)  # Schedule for 10pm UTC every day
      State: !If [IsProd, ENABLED, DISABLED]
      Targets:
        - Arn: !GetAtt RepairOrderETLStateMachine.Arn
          Id: RepairOrderETLStateMachine
          RoleArn: !GetAtt StateMachineTriggerRole.Arn

  CarlabsDataIntegrationsSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'carlabs/data_integrations_${Environment}'
      Description: 'Credentials to Carlabs data_integrations database.'

  CarlabsAnalyticsSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'carlabs/analytics_${Environment}'
      Description: 'Credentials to Carlabs platform_analytics_db database.'

  ETLFailuresQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub "carlabs-etl-failures-queue-alarm-${Environment}"
      AlarmDescription: "Alarm when there are messages in the ETLFailuresQueue."
      ActionsEnabled: true
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
      Dimensions:
        - Name: QueueName
          Value: !GetAtt ETLFailuresQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching
