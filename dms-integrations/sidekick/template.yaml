AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sidekick DMS integration

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: '^[a-zA-z0-9-]+$'
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens

Conditions:
  IsProd:
    Fn::Equals:
    - Ref: AWS::AccountId
    - 196800776222
  IsUsEast1: !Equals [ !Ref 'AWS::Region', 'us-east-1' ]

Mappings:
  Subnets:
    us-east-1:
      '196800776222':
        - subnet-0d29a385efe83bf1c
        - subnet-0e88ecdd743701e96
        - subnet-00291e028e21cb78f
        - subnet-0b1555d5fa3c8ba8e
      '143813444726':
        - subnet-030d57e39ec0df603
        - subnet-01044d580678ea63c
        - subnet-0b29db0aeb6cdabec
        - subnet-0e28d592f2ca28fb7

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Sub '${AWS::AccountId}'
        ENVIRONMENT: !Ref Environment
        IS_PROD: !If [ IsProd, 1, 0 ]
        LOGLEVEL: INFO
        CE_TOPIC: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
    VpcConfig:
      SecurityGroupIds:
        - !Ref SidekickSecurityGroup
      SubnetIds: !FindInMap [ Subnets, !Ref 'AWS::Region', !Ref 'AWS::AccountId' ]

Resources:
  SidekickSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Permit traffic from the Tekion lambdas
      VpcId: !FindInMap [ VpcId, !Ref 'AWS::Region', !Ref 'AWS::AccountId']
      SecurityGroupEgress:
        - Description: AllowAll
          CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      Tags:
        - Key: Environment
          Value: !Ref Environment

  RDSInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "sidekick integration rds access"
      GroupId: !If [ IsProd,
                      'sg-00e12bc4c116eb820',
                      'sg-00b911ee260ce5153'
                    ]
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt SidekickSecurityGroup.GroupId

  RepairOrderQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 3600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt RepairOrderDLQ.Arn
        maxReceiveCount: 5

  RepairOrderDLQ:
    Type: AWS::SQS::Queue

  InvokeSidekickFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Invoke data pull for every Sidekick dealer
      CodeUri: app/
      Handler: invoke_sidekick.lambda_handler
      Timeout: 180
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowSQS
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt RepairOrderQueue.Arn
                - !GetAtt DealsQueue.Arn
            - Sid: AllowSecrets
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/DmsDataService*",
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/DmsDataService*",
                  ]
      Environment:
        Variables:
          Environment: !Ref Environment
          REPAIR_ORDER_QUEUE: !Ref RepairOrderQueue
          DEALS_QUEUE: !Ref DealsQueue
      Events:
        DailyInvoke:
          Type: Schedule
          Properties:
            Description: Start the daily data pull for each sidekick dealer.
            Enabled: !If [ IsProd, true, false ]
            Schedule: cron(0 3 * * ? *)
            Input: '{"frequency": "daily"}'

  RepairOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Sidekick Repair Order Data Pull
      CodeUri: app/
      Handler: repair_orders.lambda_handler
      Timeout: 900
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowSecrets
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/sidekick*",
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:stage/sidekick*",
                  ]
            - Sid: AllowS3
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
                - s3:*Object
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                  ]
            - Sid: AllowSNSPolicy
              Effect: Allow
              Action:
                - sns:Publish
              Resource:
                - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
      Environment:
        Variables:
          Environment: !Ref Environment
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Enabled: True
            Queue: !GetAtt RepairOrderQueue.Arn
