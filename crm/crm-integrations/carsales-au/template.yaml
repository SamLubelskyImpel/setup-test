AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: carsales au crm integration

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: "^[a-zA-z0-9-]+$"
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens
  DomainSuffix:
    Description: The domain suffix of the API Gateway
    Type: String
    AllowedPattern: "^[a-zA-z0-9-]+$|"
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens
    Default: ""

Conditions:
  IsProd:
    Fn::Equals:
      - Ref: AWS::AccountId
      - 196800776222
  IsUsEast1: !Equals [!Ref "AWS::Region", "us-east-1"]

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Sub "${AWS::AccountId}"
        ENVIRONMENT: !Ref Environment
        LOGLEVEL: INFO
        INTEGRATIONS_BUCKET: !If [ IsProd, "crm-integrations-prod", "crm-integrations-test" ]
        UPLOAD_SECRET_KEY: "impel"
        CRM_API_DOMAIN: !If [IsProd, "crm-api.impel.io", "cjn2bvvdzb.execute-api.us-east-1.amazonaws.com/Stage"]
        SNS_TOPIC_ARN: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
        REPORTING_TOPIC_ARN: !If [
            IsProd,
            !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:crm-reporting-topic-prod",
            !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:crm-reporting-topic-test"
          ]

Resources:
  CarsalesAuWebhookGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "carsales-au-webhook-${Environment}"
      StageName: !Ref Environment
      Auth:
        DefaultAuthorizer: DefaultAuth
        Authorizers:
          DefaultAuth:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt Authorizer.Arn
            Identity:
              Headers:
                - client_id
                - api_key
              Context:
                - resourcePath
              ReauthorizeEvery: 0
      AccessLogSetting:
        DestinationArn: !GetAtt APILogGroup.Arn
        Format: >-
          {"request_id" : "$context.requestId","api_id" : "$context.apiId","resource_path" : "$context.resourcePath","resource_id" : "$context.resourceId","http_method" : "$context.httpMethod","source_ip" : "$context.identity.sourceIp","user-agent" : "$context.identity.userAgent","account_id" : "$context.identity.accountId","api_key" : "$context.identity.apiKey","caller" : "$context.identity.caller","user" : "$context.identity.user","user_arn" : "$context.identity.userArn"}
      # DefinitionBody:
      #   Fn::Transform:
      #     Name: AWS::Include
      #     Parameters:
      #       Location: "./swagger/carsales-au-webhook-oas-interpolated.yaml"
      GatewayResponses:
        BAD_REQUEST_PARAMETERS:
          ResponseTemplates:
            application/json: '{"message": "$context.error.validationErrorString"}'
        BAD_REQUEST_BODY:
          ResponseTemplates:
            application/json: '{"message": "$context.error.validationErrorString"}'
        UNAUTHORIZED:
          ResponseTemplates:
            application/json: '{"message": "This request is unauthorized."}'
          StatusCode: "401"
        ACCESS_DENIED:
          ResponseTemplates:
            application/json: '{"message": "$context.authorizer.key"}'
          StatusCode: "403"
        DEFAULT_5xx:
          ResponseTemplates:
            application/json: '{"message": "Internal Server Error. Please contact Impel support."}'

  APILogGroup:
    Type: AWS::Logs::LogGroup

  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "carsales-au-webhook-${Environment}-Authorizer"
      CodeUri: app/webhook/
      Handler: authorizer.lambda_handler
      Timeout: 30
      MemorySize: 128
      Policies:
        - Id: AuthorizerPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowGetAPIKeys
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                !If [
                  IsProd,
                  !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/carsales-au-webhook*",
                  !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/carsales-au-webhook*",
                ]

  NewLeadHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "carsales-au-webhook-${Environment}-NewLeadHandler"
      CodeUri: app/webhook/
      Handler: new_lead.lambda_handler
      Timeout: 30
      Events:
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref CarsalesAuWebhookGateway
            Path: /leads
            Method: POST
      Policies:
        - Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !If [ IsProd,
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/crm-api*",
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/crm-api*"
                      ]
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              - !If [ IsProd, "arn:aws:s3:::crm-integrations-prod*", "arn:aws:s3:::crm-integrations-test*"]
          - Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - !If [
                IsProd,
                !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:crm-reporting-topic-prod",
                !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:crm-reporting-topic-test"
              ]

  NewLeadHandlerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/carsales-au-webhook-${Environment}-NewLeadHandler"

  NewLeadHandlerErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "carsales-au-${Environment}-NewLeadHandlerErrorAlarm"
      AlarmDescription: "Alarm if NewLeadHandler function execution fails."
      ActionsEnabled: !If [IsProd, true, false]
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 10
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
      Dimensions:
        - Name: FunctionName
          Value: !Ref NewLeadHandler
