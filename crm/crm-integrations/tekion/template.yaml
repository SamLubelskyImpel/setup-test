AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: tekion crm integration

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: "^[a-zA-z0-9-]+$"
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens

Conditions:
  IsProd:
    Fn::Equals:
      - Ref: AWS::AccountId
      - 196800776222

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        # Common vars
        ENVIRONMENT: !Ref Environment
        AWS_ACCOUNT_ID: !Sub "${AWS::AccountId}"
        REGION: !Sub "${AWS::Region}"
        LOG_LEVEL: "INFO"
        POWERTOOLS_SERVICE_NAME: token-rotation
        INTEGRATIONS_BUCKET: !If [
          IsProd,
          "crm-integrations-prod",
          "crm-integrations-test"
        ]
        PARTNER_KEY: "TEKION"
        SECRET_KEY: "TEKION_V3"
        # Token rotation
        TOKEN_FILE: "tekion_crm/token.json"
        CRM_INTEGRATION_SECRETS_ID: !If [
          IsProd,
          "prod/crm-integrations-partner",
          "test/crm-integrations-partner"
        ]
        CRM_TEKION_AUTH_ENDPOINT: "/openapi/public/tokens"
        # Update leads
        UPLOAD_SECRET_KEY: "impel"
        DA_SECRET_KEY: "DA_EVENT_LISTENER"
        CRM_API_DOMAIN: !If [IsProd, "crm-api.impel.io", "crm-api-test.testenv.impel.io"]
        SNS_TOPIC_ARN: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
        REPORTING_TOPIC_ARN: !If [
          IsProd,
          !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:crm-reporting-topic-prod',
          !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:crm-reporting-topic-test'
        ]

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AccessSecretsManager
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !If [
                      IsProd,
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/crm-integrations-partner*",
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/crm-integrations-partner*",
                    ]
                  - !If [
                      IsProd,
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/crm-api*",
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/crm-api*",
                    ]
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: S3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:aws:s3:::crm-integrations-${Environment}/raw*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !If [
                      IsProd,
                      !Sub "arn:aws:s3:::crm-integrations-prod*",
                      !Sub "arn:aws:s3:::crm-integrations-test*"
                    ]
        - PolicyName: SQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: "*"
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: "arn:aws:sqs:*:*:*"
        - PolicyName: SNSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
                  - !If [
                      IsProd,
                      !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:crm-reporting-topic-prod',
                      !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:crm-reporting-topic-test'
                    ]
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"

  # Tekion CRM Token Rotation
  TekionCRMTokenRotationQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-crm-${Environment}-TokenRotationQueueDLQ"

  TekionCRMTokenRotationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'tekion-crm-${Environment}-TokenRotationQueue'
      VisibilityTimeout: 3600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt TekionCRMTokenRotationQueueDLQ.Arn
        maxReceiveCount: 1

  TekionCRMTokenRotationQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref TekionCRMTokenRotationQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'events.amazonaws.com'
            Action: 'sqs:SendMessage'
            Resource: !GetAtt TekionCRMTokenRotationQueue.Arn

  TekionCRMTokenRotationFunctionRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Nightly trigger for InvokeTekionCRMTokenRotationFunction
      ScheduleExpression: cron(0 8,12,16 * * ? *)  # 3x/day at 8am, 12pm, 4pm UTC
      State: !If [ IsProd, "ENABLED", "DISABLED" ]
      Targets:
        - Id: "TekionCRMTokenRotationQueue"
          Arn: !GetAtt TekionCRMTokenRotationQueue.Arn

  TekionCRMTokenRotationEventMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt TekionCRMTokenRotationQueue.Arn
      MaximumBatchingWindowInSeconds: 1
      FunctionName: !GetAtt InvokeTekionCRMTokenRotationFunction.Arn

  InvokeTekionCRMTokenRotationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub tekion-crm-${Environment}-InvokeTokenRotation
      Description: Invoke Tekion's token rotation
      Role: !GetAtt LambdaRole.Arn
      CodeUri: app/
      Runtime: python3.9
      Handler: access_token.lambda_handler
      Timeout: 180

  InvokeTekionCRMTokenRotationErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub tekion-crm-${Environment}-InvokeTokenRotation
      AlarmDescription: There are messages in the token rotation error
      ActionsEnabled: true
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
      Dimensions:
        - Name: FunctionName
          Value: !Ref InvokeTekionCRMTokenRotationFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 900
      Statistic: Sum
      Threshold: 3
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  TekionCRMTokenRotationQueueDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub tekion-crm-${Environment}-TokenRotationQueueDLQ
      AlarmDescription: There are messages in the Tekion token rotation order DLQ
      ActionsEnabled: true
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
      Dimensions:
        - Name: QueueName
          Value: !GetAtt TekionCRMTokenRotationQueueDLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  # Tekion Data pull
  InvokeDataPull:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub tekion-crm-${Environment}-Invoke
      CodeUri: app/
      Handler: invoke_data_pull.lambda_handler
      Timeout: 120
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn

  InvokeDataPullLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/tekion-crm-${Environment}-Invoke"

  InvokeDataPullErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub tekion-crm-${Environment}-Invoke
      AlarmDescription: Tekion CRM Invoke failed 3 times within 15 minutes
      ActionsEnabled: true
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref InvokeDataPull
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 900
      Statistic: Sum
      Threshold: 3
      TreatMissingData: notBreaching

  InvokeDataPullEventMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt InvokeDataPullQueue.Arn
      MaximumBatchingWindowInSeconds: 0
      FunctionName: !GetAtt InvokeDataPull.Arn

  InvokeDataPullQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-crm-${Environment}-InvokeQueue"
      VisibilityTimeout: 120
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt InvokeDataPullDeadLetterQueue.Arn
        maxReceiveCount: 3

  InvokeDataPullDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-crm-${Environment}-InvokeDLQ"
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 10

  InvokeDataPullDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "tekion-crm-${Environment}-InvokeDLQ"
      AlarmDescription: There are over 1 unprocessed messages in the Tekion CRM Invoke DLQ
      ActionsEnabled: true
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
      Dimensions:
        - Name: QueueName
          Value: !GetAtt InvokeDataPullDeadLetterQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 1
      TreatMissingData: notBreaching

  TransformNewLeadsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub tekion-crm-${Environment}-TransformNewLeads
      CodeUri: app/
      Handler: transform_new_leads.lambda_handler
      Timeout: 60
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn

  TransformNewLeadsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/tekion-crm-${Environment}-TransformNewLeads"

  TransformNewLeadsEventMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt TransformNewLeadsQueue.Arn
      MaximumBatchingWindowInSeconds: 0
      FunctionName: !GetAtt TransformNewLeadsFunction.Arn

  TransformNewLeadsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-crm-${Environment}-TransformNewLeadsQueue"
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt TransformNewLeadsDLQ.Arn
        maxReceiveCount: 3

  TransformNewLeadsDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-crm-${Environment}-TransformNewLeadsDLQ"
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 10

  TransformNewLeadsDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "tekion-crm-${Environment}-TransformNewLeadsDLQ"
      AlarmDescription: There are over 1 unprocessed messages in the Tekion CRM Transform New Leads DLQ
      ActionsEnabled: true
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: QueueName
          Value: !GetAtt TransformNewLeadsDLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 1
      TreatMissingData: notBreaching

  TransformNewLeadsQueuePolicy:
    Type: "AWS::SQS::QueuePolicy"
    Properties:
      Queues:
        - !Ref TransformNewLeadsQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt TransformNewLeadsQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt EventBridgeRule.Arn

  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "Object Created"
        detail:
          bucket:
            name:
              - !Sub "crm-integrations-${Environment}"
          object:
            key:
              - { "prefix": "raw/tekion/" }
      Targets:
        - Id: "TransformNewLeadsTarget"
          Arn: !GetAtt TransformNewLeadsQueue.Arn

  GetLeadUpdatesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub tekion-crm-${Environment}-GetLeadUpdates
      CodeUri: app/
      Handler: get_lead_updates.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 30
      MemorySize: 256

  GetLeadUpdatesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/tekion-crm-${Environment}-GetLeadUpdates

  GetLeadUpdatesErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub tekion-crm-${Environment}-GetLeadUpdates
      AlarmDescription: Tekion Lead Updates failed 3 times within 15 minutes
      ActionsEnabled: !If [IsProd, true, false]
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref GetLeadUpdatesFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 900
      Statistic: Sum
      Threshold: 3
      TreatMissingData: notBreaching

  GetDealerSalespersonsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub tekion-crm-${Environment}-GetDealerSalespersons
      CodeUri: app/
      Handler: get_dealer_salespersons.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 30
      MemorySize: 256

  GetDealerSalespersonsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/tekion-crm-${Environment}-GetDealerSalespersons

  GetDealerSalespersonsErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub tekion-crm-${Environment}-GetDealerSalespersons
      AlarmDescription: Tekion Get dealer salespersons failed 3 times within 15 minutes
      ActionsEnabled: !If [IsProd, true, false]
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref GetDealerSalespersonsFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 900
      Statistic: Sum
      Threshold: 3
      TreatMissingData: notBreaching

  SendActivityQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-crm-${Environment}-SendActivityQueue"
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SendActivityDeadLetterQueue.Arn
        maxReceiveCount: 3

  SendActivityDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-crm-${Environment}-SendActivityDLQ"
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 10

  SendActivityEventMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt SendActivityQueue.Arn
      MaximumBatchingWindowInSeconds: 0
      FunctionName: !GetAtt SendActivity.Arn

  SendActivity:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub tekion-crm-${Environment}-SendActivity
      CodeUri: app/
      Handler: send_activity.lambda_handler
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn

  SendActivityDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub tekion-crm-${Environment}-SendActivityDLQ
      AlarmDescription: There are over 1 unprocessed messages in the Tekion SendActivity DLQ
      ActionsEnabled: true
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
      Dimensions:
        - Name: QueueName
          Value: !GetAtt SendActivityDeadLetterQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 1
      TreatMissingData: notBreaching

  SendActivityLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/tekion-crm-${Environment}-SendActivity"

  MonitoringTekionCRM:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub tekion-crm-${Environment}-Monitoring
      CodeUri: app/
      Handler: monitoring.lambda_handler
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn

  MonitoringTekionCRMLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/tekion-crm-${Environment}-Monitoring"

  LogGroupInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MonitoringTekionCRM.Arn
      Action: lambda:InvokeFunction
      Principal: logs.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'

  MonitoringInvokeDataPullSubscription:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - LogGroupInvokeLambdaPermission
      - MonitoringTekionCRM
      - InvokeDataPullLogGroup
    Properties:
      LogGroupName: !Ref InvokeDataPullLogGroup
      DestinationArn: !GetAtt MonitoringTekionCRM.Arn
      FilterPattern: "SUPPORT ALERT"

  MonitoringGetLeadUpdatesSubscription:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - LogGroupInvokeLambdaPermission
      - MonitoringTekionCRM
      - GetLeadUpdatesLogGroup
    Properties:
      LogGroupName: !Ref GetLeadUpdatesLogGroup
      DestinationArn: !GetAtt MonitoringTekionCRM.Arn
      FilterPattern: "SUPPORT ALERT"

  MonitoringSendActivitySubscription:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - LogGroupInvokeLambdaPermission
      - MonitoringTekionCRM
      - SendActivityLogGroup
    Properties:
      LogGroupName: !Ref SendActivityLogGroup
      DestinationArn: !GetAtt MonitoringTekionCRM.Arn
      FilterPattern: "SUPPORT ALERT"

  MonitoringTransfromLeadSubscription:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - LogGroupInvokeLambdaPermission
      - MonitoringTekionCRM
      - TransformNewLeadsLogGroup
    Properties:
      LogGroupName: !Ref TransformNewLeadsLogGroup
      DestinationArn: !GetAtt MonitoringTekionCRM.Arn
      FilterPattern: "SUPPORT ALERT"
