AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: crm partner api

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: "^[a-zA-z0-9-]+$"
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens

  DomainSuffix:
    Description: The domain suffix of the API Gateway
    Type: String
    AllowedPattern: "^[a-zA-z0-9-]+$|"
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens
    Default: ""

Conditions:
  IsProd:
    Fn::Equals:
      - Ref: AWS::AccountId
      - 196800776222
  IsUsEast1: !Equals [!Ref "AWS::Region", "us-east-1"]

Mappings:
  SslCertificates:
    us-east-1:
      "143813444726": "arn:aws:acm:us-east-1:143813444726:certificate/9f026b43-c690-4434-93e1-9be4ef91f67d"
      "196800776222": "arn:aws:acm:us-east-1:196800776222:certificate/4bad36e0-d971-41e6-a2d8-a897013012be"

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Sub "${AWS::AccountId}"
        ENVIRONMENT: !Ref Environment
        LOGLEVEL: INFO
        SNS_TOPIC_ARN: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
        INTEGRATIONS_BUCKET: !Sub "crm-integrations-${Environment}"
        CRM_API_DOMAIN: !If [IsProd, "crm-api.impel.io", "crm-api-test.testenv.impel.io"]
        ACTIVIX_PARTNER_ID: "internal_activix"
        MOMENTUM_PARTNER_ID: "internal_momentum"
        REYREY_PARTNER_ID: "internal_reyrey"
        DA_SECRET_KEY: "DA_EVENT_LISTENER"

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: AccessSecretsManager
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !If [
                      IsProd,
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/crm-api*",
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/crm-api*",
                    ]
                  - !If [
                      IsProd,
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/activix*",
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/activix*",
                  ]
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
        - PolicyName: S3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                  - "s3:GetObject"
                Resource:
                - !Sub "arn:aws:s3:::crm-integrations-${Environment}*"
        - PolicyName: SNSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource:
                - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'

  CrmPartnerApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "crm-partner-api-${Environment}"
      StageName: !Ref Environment
      Domain:
        DomainName: !If [ IsProd, 'crm.impel.io', !Sub 'crm${DomainSuffix}.testenv.impel.io' ]
        CertificateArn: !FindInMap [ SslCertificates, !Ref 'AWS::Region', !Ref 'AWS::AccountId']
        SecurityPolicy: TLS_1_2
        # There is no HostedZone on unified AWS account ask platform team to create records from autogenerated url
        # Creating new resource must also manually update record
        # Route53:
        #   HostedZoneName: !If [ IsProd, impel.io., testenv.impel.io. ]
        #   IpV6: true
      Auth:
        DefaultAuthorizer: DefaultAuth
        Authorizers:
          DefaultAuth:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt Authorizer.Arn
            Identity:
              Headers: []
              ReauthorizeEvery: 0
        AddDefaultAuthorizerToCorsPreflight: False
      Cors:
        AllowMethods: "'GET,POST,PUT,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,x-api-key,X-Amz-Security-Token,X-Activix-Signature'"
        AllowOrigin: "'*'"
      AccessLogSetting:
        DestinationArn: !GetAtt APILogGroup.Arn
        Format: >-
          {"request_id" : "$context.requestId","api_id" : "$context.apiId","resource_path" : "$context.resourcePath","resource_id" : "$context.resourceId","http_method" : "$context.httpMethod","source_ip" : "$context.identity.sourceIp","user-agent" : "$context.identity.userAgent","account_id" : "$context.identity.accountId","api_key" : "$context.identity.apiKey","caller" : "$context.identity.caller","user" : "$context.identity.user","user_arn" : "$context.identity.userArn"}
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: "./swagger/crm-partner-api-oas-interpolated.yaml"
      GatewayResponses:
        BAD_REQUEST_PARAMETERS:
          ResponseTemplates:
            application/json: '{"message": "$context.error.validationErrorString"}'
        BAD_REQUEST_BODY:
          ResponseTemplates:
            application/json: '{"message": "$context.error.validationErrorString"}'
        UNAUTHORIZED:
          ResponseTemplates:
            application/json: '{"message": "This request is unauthorized."}'
          StatusCode: "401"
        ACCESS_DENIED:
          ResponseTemplates:
            application/json: '{"message": "$context.authorizer.integration.request.header.Authorization"}'
          StatusCode: "403"
        DEFAULT_5xx:
          ResponseTemplates:
            application/json: '{"message": "Internal Server Error. Please contact Impel support."}'

  APILogGroup:
    Type: AWS::Logs::LogGroup

  APICloudWatchRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  APIGatewayAccount:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt APICloudWatchRole.Arn

  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "crm-partner-api-${Environment}-Authorizer"
      CodeUri: app/
      Handler: authorizer.lambda_handler
      Timeout: 120
      Policies:
        - Id: AuthorizerPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowGetAPIKeys
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                !If [
                  IsProd,
                  !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/crm-partner-api*",
                  !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/crm-partner-api*",
                ]

  ReyReyCreateLead:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "crm-partner-api-${Environment}-ReyReyCreateLead"
      CodeUri: app/reyrey/
      Handler: create_lead.lambda_handler
      Timeout: 30
      Role: !GetAtt LambdaRole.Arn
      Events:
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref CrmPartnerApiGateway
            Path: /reyrey/crm-upload/v1/leads
            Method: POST
  
  ReyReyCreateLeadErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub crm-partner-api-${Environment}-ReyReyCreateLead
      AlarmDescription: ReyRey Create Lead failed to process incoming data
      ActionsEnabled: true
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ReyReyCreateLead
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 900
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  ReyReyUpdateLead:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "crm-partner-api-${Environment}-ReyReyUpdateLead"
      CodeUri: app/reyrey/
      Handler: update_lead.lambda_handler
      Timeout: 30
      Role: !GetAtt LambdaRole.Arn
      Events:
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref CrmPartnerApiGateway
            Path: /reyrey/crm-upload/v1/lead-updates
            Method: POST

  ReyReyUpdateLeadErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub crm-partner-api-${Environment}-ReyReyUpdateLead
      AlarmDescription: ReyRey Update Lead failed to process incoming data
      ActionsEnabled: true
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ReyReyUpdateLead
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 900
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  MomentumCreateLead:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "crm-partner-api-${Environment}-MomentumCreateLead"
      CodeUri: app/momentum/
      Handler: create_lead.lambda_handler
      Timeout: 30
      Role: !GetAtt LambdaRole.Arn
      Events:
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref CrmPartnerApiGateway
            Path: /momentum/crm-upload/v1/leads
            Method: POST

  MomentumUpdateLead:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "crm-partner-api-${Environment}-MomentumUpdateLead"
      CodeUri: app/momentum/
      Handler: update_lead.lambda_handler
      Timeout: 30
      Role: !GetAtt LambdaRole.Arn
      Events:
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref CrmPartnerApiGateway
            Path: /momentum/crm-upload/v1/lead-updates
            Method: POST

  ActivixCreateLead:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "crm-partner-api-${Environment}-ActivixCreateLead"
      CodeUri: app/activix/
      Handler: create_lead.lambda_handler
      Timeout: 30
      Role: !GetAtt LambdaRole.Arn
      Events:
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref CrmPartnerApiGateway
            Path: /activix/crm-upload/v1/leads
            Method: POST
  
  ActivixCreateLeadErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub crm-partner-api-${Environment}-ActivixCreateLead
      AlarmDescription: Activix Create Lead failed to process incoming data
      ActionsEnabled: true
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ActivixCreateLead
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 900
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  ActivixUpdateLead:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "crm-partner-api-${Environment}-ActivixUpdateLead"
      CodeUri: app/activix/
      Handler: update_lead.lambda_handler
      Timeout: 30
      Role: !GetAtt LambdaRole.Arn
      Events:
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref CrmPartnerApiGateway
            Path: /activix/crm-upload/v1/lead-updates
            Method: POST

  ActivixUpdateLeadErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub crm-partner-api-${Environment}-ActivixUpdateLead
      AlarmDescription: Activix Update Lead failed to process incoming data
      ActionsEnabled: true
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ActivixUpdateLead
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 900
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching