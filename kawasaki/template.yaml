AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Kawasaki dealer data pulls

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: '^[a-zA-z0-9-]+$'
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens

Conditions:
  IsProd:
    Fn::Equals:
    - Ref: AWS::AccountId
    - 196800776222
  IsUsEast1: !Equals [ !Ref 'AWS::Region', 'us-east-1' ]

Mappings:
  Subnets:
    us-east-1:
      '196800776222':
        - subnet-0d29a385efe83bf1c
        - subnet-0e88ecdd743701e96
        - subnet-00291e028e21cb78f
        - subnet-0b1555d5fa3c8ba8e
      '143813444726':
        - subnet-030d57e39ec0df603
        - subnet-01044d580678ea63c
        - subnet-0b29db0aeb6cdabec
        - subnet-0e28d592f2ca28fb7
  VpcId:
    us-east-1:
      '196800776222': vpc-03417e688cee5bc07
      '143813444726': vpc-0b28df8980a1905d5
  SslCertificates:
    us-east-1:
      '143813444726': 'arn:aws:acm:us-east-1:143813444726:certificate/9f026b43-c690-4434-93e1-9be4ef91f67d'
      '196800776222': 'arn:aws:acm:us-east-1:196800776222:certificate/4bad36e0-d971-41e6-a2d8-a897013012be'

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Sub '${AWS::AccountId}'
        ENVIRONMENT: !Ref Environment
        IS_PROD: !If [ IsProd, 1, 0 ]
        LOGLEVEL: INFO

Resources:
  KawasakiDataBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub 'kawasaki-${AWS::Region}-${Environment}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: !If [ IsProd, Enabled, Suspended ]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        TopicConfigurations:
          - Event: s3:ObjectCreated:*
            Topic: !Ref KawasakiS3ToSNSTopic
    DependsOn: KawasakiS3ToSNSPolicy

  KawasakiS3ToSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub 'kawasaki-sns-s3-topic-${AWS::Region}-${Environment}'
      TopicName: !Sub 'kawasaki-sns-s3-topic-${AWS::Region}-${Environment}'

  KawasakiS3ToSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties: 
      PolicyDocument:
        Version: '2012-10-17'
        Id: !Sub 'kawasaki-sns-s3-policy-${AWS::Region}-${Environment}'
        Statement:
        - Sid: S3ToSNS
          Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action:
            - SNS:Publish
          Resource: !Ref KawasakiS3ToSNSTopic
          Condition:
            ArnLike:
              aws:SourceArn: !Sub 'arn:aws:s3:::kawasaki-${AWS::Region}-${Environment}'
      Topics: 
        - Ref: KawasakiS3ToSNSTopic

  InvokeKawasakiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Invoke data pull for every Kawasaki dealer
      CodeUri: app/
      Handler: invoke_kawasaki.lambda_handler
      Timeout: 180
      MemorySize: 1024
      Policies:
        - Id: InvokeKawasakiFunctionPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: S3Permissions
              Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - !Sub 'arn:aws:s3:::${KawasakiDataBucket}/*'
            - Sid: SqsPermissions
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt KawasakiDownloadQueue.Arn
            - Sid: SnsPermissions
              Effect: Allow
              Action:
                - sns:Publish
              Resource:
                - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          KAWASAKI_DL_QUEUE_URL: !Ref KawasakiDownloadQueue
          KAWASAKI_DATA_BUCKET: !Sub 'kawasaki-${AWS::Region}-${Environment}'
          ALERT_TOPIC_ARN: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
      Events:
        DailyInvoke:
          Type: Schedule
          Properties:
            Description: Start the daily data pull for each kawasaki dealer.
            Enabled: !If [ IsProd, true, false ]
            Schedule: cron(0 0 * * ? *)

  KawasakiDownloadDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: KawasakiDownloadDLQ

  KawasakiDownloadDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: KawasakiDownloadDLQAlarm
      AlarmDescription: There are messages in the KawasakiDownloadDLQ
      ActionsEnabled: true
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
      Dimensions:
        - Name: QueueName
          Value: !GetAtt KawasakiDownloadDLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching
  
  KawasakiDownloadQueue:
    Type: AWS::SQS::Queue
    DependsOn: KawasakiDownloadDLQ
    Properties:
      QueueName: KawasakiDownloadQueue
      VisibilityTimeout: 3600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt KawasakiDownloadDLQ.Arn
        maxReceiveCount: 5

  KawasakiDownloadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Download Kawasaki XML file for a dealer.
      CodeUri: app/
      Handler: download_kawasaki.lambda_handler
      Timeout: 300
      MemorySize: 1024
      Policies:
        - Id: KawasakiDownloadFunctionPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: S3Permissions
              Effect: Allow
              Action:
                - s3:PutObject
              Resource:
                - !Sub 'arn:aws:s3:::${KawasakiDataBucket}/*'
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          KAWASAKI_DATA_BUCKET: !Sub 'kawasaki-${AWS::Region}-${Environment}'
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt KawasakiDownloadQueue.Arn

  FormatKawasakiDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: FormatKawasakiDLQ

  FormatKawasakiDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: FormatKawasakiDLQAlarm
      AlarmDescription: There are messages in the FormatKawasakiDLQ
      ActionsEnabled: true
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
      Dimensions:
        - Name: QueueName
          Value: !GetAtt FormatKawasakiDLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching
  
  FormatKawasakiQueue:
    Type: AWS::SQS::Queue
    DependsOn: FormatKawasakiDLQ
    Properties:
      QueueName: FormatKawasakiQueue
      VisibilityTimeout: 3600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt FormatKawasakiDLQ.Arn
        maxReceiveCount: 5

  FormatKawasakiQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref KawasakiS3ToSNSTopic
      Protocol: sqs
      RawMessageDelivery: true 
      Endpoint: !GetAtt FormatKawasakiQueue.Arn
      FilterPolicyScope: MessageBody
      FilterPolicy:
        '{"Records":{"s3":{"object":{"key":[{"prefix":"raw/"}]}},"eventName":[{"prefix":"ObjectCreated:"}]}}'

  FormatKawasakiQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref FormatKawasakiQueue
      PolicyDocument:
          Version: '2012-10-17'
          Id: FormatKawasakiQueuePolicy
          Statement:
          -   Sid: Allow-SNS-SendMessage
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt FormatKawasakiQueue.Arn
              Principal:
                  Service: sns.amazonaws.com
              Condition:
                  ArnEquals:
                      aws:SourceArn: !Ref KawasakiS3ToSNSTopic

  FormatKawasakiTransformFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Transform and upload raw kawasaki file to ICC FTP.
      CodeUri: app/
      Handler: format_kawasaki.lambda_handler
      Timeout: 300
      MemorySize: 1024
      Policies:
        - Id: KawasakiDownloadFunctionPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: S3Permissions
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
              Resource:
                - !Sub 'arn:aws:s3:::${KawasakiDataBucket}/*'
            - Sid: SecretsPermissions
              Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource:
                - !If [IsProd, !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/KawasakiFTP*', !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/KawasakiFTP*']
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          KAWASAKI_DATA_BUCKET: !Sub 'kawasaki-${AWS::Region}-${Environment}'
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt FormatKawasakiQueue.Arn

  # TODO: Remove resource from template after deployment
  KawasakiFTPSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !If [IsProd, 'prod/KawasakiFTP', 'test/KawasakiFTP']
      Description: Kawasaki FTP server secret
      SecretString: !If [IsProd, '{"host": "ftp.inventorycc.com", "username": "SpinCar", "password": "!!4Sp2in4C!r#3"}', '{"host": "swipetospin.exavault.com", "username": "test_ftp_conn", "password": "mXJlm8JWz63ZrNp7"}']
