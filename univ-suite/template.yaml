AWSTemplateFormatVersion: '2010-09-09'
Description: Universal Integrations App

Parameters:
  AmiId:
    Description: The AMI id
    Type: AWS::EC2::Image::Id
  AppName:
    Description: The canonical name of the app
    Type: String
    Default: universal_integrations
  CfnInitArtifactKey:
    Description: The S3 object key of the cfn-init bootstrap package
    Type: String
  CodeArtifactKey:
    Description: The S3 object key of the application code package that will be deployed by CodeDeploy
    Type: String
  CommitHash:
    Description: The Git commit hash
    Type: String
  DeploymentBucket:
    Description: The S3 bucket where deployment artifacts are found
    Type: String
  Environment:
    Description: The name of the environment that this stack is being deployed to
    Type: String


Mappings:
  Subnets:
    us-east-1:
      '196800776222':
        - subnet-032812c8fd904707e
        - subnet-02cdd7620a24a7313
        - subnet-032cc0fc0e08b873d
      '143813444726':
        - subnet-08f6d68186e6ca80f
        - subnet-0d3ea83482d467338
        - subnet-0aa1b4441a1e41ba7
  KeyPair:
    us-east-1:
      '196800776222': sts-keypair-prod
      '143813444726': sts-keypair-testenv
  SslCert:
    us-east-1:
      '196800776222': 'arn:aws:acm:us-east-1:196800776222:certificate/4bad36e0-d971-41e6-a2d8-a897013012be'
      '143813444726': 'arn:aws:acm:us-east-1:143813444726:certificate/9f026b43-c690-4434-93e1-9be4ef91f67d'
  Vpcs:
    us-east-1:
      '196800776222': vpc-03417e688cee5bc07
      '143813444726': vpc-0b28df8980a1905d5


  InstanceType:
    us-east-1:
      '143813444726':
        - InstanceType: t3a.small
        - InstanceType: t3.small
      '196800776222':
        - InstanceType: t3a.small
        - InstanceType: t2.large
        - InstanceType: t4g.small
        - InstanceType: t3.medium
        - InstanceType: t3a.medium
        - InstanceType: t2.medium

Conditions:
  IsProd: !Equals [ !Ref 'AWS::AccountId', '196800776222' ]

Resources:
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: Server
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      AutoScalingGroups:
        - !Ref AutoScalingGroup
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: !GetAtt TargetGroup.TargetGroupName
      Deployment:
        Description: !Sub 'commit hash: ${CommitHash}'
        Revision:
          RevisionType: S3
          S3Location:
            Bucket: !Ref DeploymentBucket
            Key: !Ref CodeArtifactKey
            BundleType: tgz
      DeploymentConfigName: !If [ IsProd, CodeDeployDefault.HalfAtATime, CodeDeployDefault.AllAtOnce ]
      DeploymentStyle:
        DeploymentType: IN_PLACE
        # DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      ServiceRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/universal-integration-codedeploy

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 20
        MinInstancesInService: !If [ IsProd, 2, 1 ]  # Match MinSize.
        MinSuccessfulInstancesPercent: 50
        SuspendProcesses:
          - AlarmNotification
          - AZRebalance
          - HealthCheck
          - ReplaceUnhealthy
          - ScheduledActions
        PauseTime: PT5M
        WaitOnResourceSignals: true
    Properties:
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      MinSize: !If [ IsProd, '2', '1' ]
      MaxSize: !If [ IsProd, '6', '2' ]
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
        - !Ref TargetGroup
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupDesiredCapacity
            - GroupInServiceInstances
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${AppName}'
          PropagateAtLaunch: true
        - Key: InspectMe
          Value: 'yes'
          PropagateAtLaunch: true
      VPCZoneIdentifier: !FindInMap [ Subnets, !Ref 'AWS::Region', !Ref 'AWS::AccountId' ]
  AppUser:
    Type: AWS::IAM::User
    Properties:
      ManagedPolicyArns:
        - !Ref AppIamPolicy
  AppUserAccessKeys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref AppUser
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'InstanceRole'
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: !Sub 'Instance profile role ${Environment}-${AppName}'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - !Ref AppIamPolicy
      Tags:
        - Key: Environment
          Value: !Sub '${Environment}'
  AppIamPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: !Sub '${AppName} app resource permissions'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: CfnSignaling
            Effect: Allow
            Action: cloudformation:SignalResource
            Resource:
              - !Ref AWS::StackId
          - Sid: Cloudwatch
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource:
            - "*"
          - Sid: S3General
            Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:DeleteObject
              - s3:DeleteObjectTagging
              - s3:DeleteObjectVersion
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:GetObjectVersion
              - s3:GetObjectVersionAcl
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionAcl
            Resource: !
              - !Sub arn:aws:s3:::spincar-deploy-${AWS::Region}/*
              - !Sub 'arn:aws:s3:::integrations-${AWS::Region}-${Environment}/*'
              - !Sub 'arn:aws:s3:::crm-integrations-${Environment}/*'
          - Sid: SESPermission
            Effect: Allow
            Action:
              - ses:DescribeActiveReceiptRuleSet
              - ses:DescribeConfigurationSet
              - ses:DescribeReceiptRule
              - ses:DescribeReceiptRuleSet
              - ses:GetCustomVerificationEmailTemplate
              - ses:GetIdentityDkimAttributes
              - ses:GetIdentityPolicies
              - ses:GetIdentityMailFromDomainAttributes
              - ses:GetIdentityNotificationAttributes
              - ses:GetIdentityVerificationAttributes
              - ses:GetSendStatistics
              - ses:GetSendQuota
              - ses:GetTemplate
              - ses:ListCustomVerificationEmailTemplates
              - ses:ListReceiptFilters
              - ses:ListTemplates
              - ses:ListIdentityPolicies
              - ses:GetAccountSendingEnabled
              - ses:ListConfigurationSets
              - ses:ListReceiptRuleSets
              - ses:ListVerifiedEmailAddres- ses
              - ses:ListIdentities
            Resource: !Sub 'arn:aws:ses:${AWS::Region}:${AWS::AccountId}:*'
          - Sid: GetSecretValue
            Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource:
              - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:universal-integrations/*"
              - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Environment}/DMSUploadAPI*"
          - Sid: SNSPermission
            Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'

  LifecycleHookTerminate:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref 'AutoScalingGroup'
      HeartbeatTimeout: 90
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: "CONTINUE"
  CpuScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60
  HighLatencyAlarm:
    Condition: IsProd
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_web_performance'
      AlarmDescription: !Sub 'High latency from Dms upload api in ${AWS::Region}'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !Ref 'AppLoadBalancer'
      EvaluationPeriods: 2
      MetricName: TargetResponseTime
      Namespace: AWS/ApplicationELB
      Period: 300
      ExtendedStatistic: p99
      Threshold: 1
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Authentication:
        rolebased:
          type: S3
          buckets: !Sub "spincar-deploy-${AWS::Region}"
          roleName:
            Ref: InstanceRole
      AWS::CloudFormation::Init:
        configSets:
          launch: # This set only runs when an instance launches for the first time.
            - codedeploy_agent  # CD agent should be first to prevent inconsistent states if cfn-init fails.
            - fetch_cfninit_package
            - cfn_hup
            - cwagent
            - beats
            - boto
            - cleanup
            - enable_unattended_upgrades
          hup: # This set runs each time cfn-hup does.
            - codedeploy_agent  # CD agent should be first to prevent inconsistent states if cfn-init fails.
            - fetch_cfninit_package
            - beats
            - cleanup
        enable_unattended_upgrades:
          services:
            systemd:
              unattended-upgrades:
                enabled: true
                ensureRunning: true
        boto:
          commands:
            01_run:
              env:
                APPUSER_ACCESS_KEY: !Sub '${AppUserAccessKeys}:${AppUserAccessKeys.SecretAccessKey}'
                PATH: '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'
              cwd : /opt/cfn_init/current/boto
              command: bash ./config.sh
        beats:
          commands:
            02_run:
              env:
                AWS_REGION: !Sub ${AWS::Region}
                STS_APPLICATION_NAME: !Ref AppName
                STS_ENVIRONMENT: !Ref Environment
                STS_FLAVOR: !If [ IsProd, prod, test ]
                STS_COMMIT_HASH: !Ref CommitHash
                PATH: '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'
              cwd : /opt/cfn_init/current/beats
              command: bash ./config.sh
        cfn_hup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=python3.10 /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --region ${AWS::Region} -c hup
              mode: '000400'
          commands:
            03_run:
              env:
                PATH: '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'
              cwd : /opt/cfn_init/current/cfn_hup
              command: bash ./config.sh
        cleanup:
          commands:
            04_run:
              cwd: /opt/cfn_init
              command: tar -czf "archive-$(date +%Y%m%d%H%M%S).tar.gz" current/ --remove-files
        codedeploy_agent:  # It's CRITICAL that the CD agent is installed; It should be installed during the AMI creation.
          commands:
            99_start_enable:
              command: 'systemctl start codedeploy-agent && systemctl enable codedeploy-agent'
        cwagent:
          commands:
            05_run:
              env:
                PATH: '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'
              cwd : /opt/cfn_init/current/cwagent
              command: bash ./config.sh
        fetch_cfninit_package:
          sources:
            /opt/cfn_init/current: !Sub 'https://${DeploymentBucket}.s3.${AWS::Region}.amazonaws.com/${CfnInitArtifactKey}'
        randomseed:
          commands:
            06_run:
              env:
                PATH: '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'
              cwd : /opt/cfn_init/current/randomseed
              command: bash ./config.sh
        security:
          commands:
            07_run:
              env:
                PATH: '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'
              cwd : /opt/cfn_init/current/security
              command: bash ./config.sh
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 24
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        ImageId: !Ref AmiId
        InstanceType: t3a.small
        KeyName: !FindInMap [ KeyPair, !Ref 'AWS::Region', !Ref 'AWS::AccountId']
        Monitoring:
          Enabled: !If [ IsProd, true, false ]
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb -O /tmp/amazon-cloudwatch-agent.deb
              dpkg -i /tmp/amazon-cloudwatch-agent.deb
              apt-get update
              apt-get install -y build-essential python3-pip wget ruby-full nginx libpcre3 libpcre3-dev net-tools jq
              apt-get install -y python-setuptools
              pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
              pip3 install awscli

              cd /home/ubuntu
              wget https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install
              chmod +x ./install
              ./install auto

              mkdir -p /opt/cfn_init/current

              /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --region ${AWS::Region} -c launch
              /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}

  UniversalIntegrationsELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: A default policy permitted for use by Universal integration app load balancers
      VpcId: !FindInMap [ Vpcs, !Ref 'AWS::Region', !Ref 'AWS::AccountId' ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: !If [ IsProd, 'true', 'false' ]
        - Key: access_logs.s3.enabled
          Value: !If [ IsProd, 'true', 'true' ]
        - Key: access_logs.s3.bucket
          Value: !Sub 'spincar-logs-${AWS::Region}'
        - Key: access_logs.s3.prefix
          Value: !Sub 'new/alb/${AppName}'
      SecurityGroups:
        - !GetAtt UniversalIntegrationsELBSecurityGroup.GroupId
      Subnets: !FindInMap [ Subnets, !Ref 'AWS::Region', !Ref 'AWS::AccountId' ]
      Tags:
        - Key: AppName
          Value: !Sub '${AppName}'
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !FindInMap [ Vpcs, !Ref 'AWS::Region', !Ref 'AWS::AccountId' ]
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health_check
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
  AlbHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: HTTP_301
  AlbHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 443
      Protocol: 'HTTPS'
      SslPolicy: ELBSecurityPolicy-2016-08
      Certificates:
        - CertificateArn: !FindInMap [ SslCert, !Ref 'AWS::Region', !Ref 'AWS::AccountId' ]
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !FindInMap [ Vpcs, !Ref 'AWS::Region', !Ref 'AWS::AccountId' ]
      GroupDescription: Enable HTTP access on inbound port from load balancer.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 81
          SourceSecurityGroupId: !GetAtt UniversalIntegrationsELBSecurityGroup.GroupId
  # RecordSetGroup:
  #   Type: AWS::Route53::RecordSetGroup
  #   Properties:
  #     HostedZoneName: !If [ IsProd, 'impel.io.', 'testenv.impel.io.' ]
  #     RecordSets:
  #       - AliasTarget:
  #           DNSName: !GetAtt 'AppLoadBalancer.DNSName'
  #           HostedZoneId: !GetAtt 'AppLoadBalancer.CanonicalHostedZoneID'
  #         Name: !Sub
  #           - '${AWS::StackName}.${fqdn}'
  #           - fqdn: !If [ IsProd, 'impel.com.', 'testenv.impel.io.' ]
  #         Type: A
  # RecordSetGroupImpel:
  #   Type: AWS::Route53::RecordSetGroup
  #   Properties:
  #     HostedZoneName: !If [ IsProd, 'impel.io.', 'testenv.impel.io.' ]
  #     RecordSets:
  #       - AliasTarget:
  #           DNSName: !GetAtt 'AppLoadBalancer.DNSName'
  #           HostedZoneId: !GetAtt 'AppLoadBalancer.CanonicalHostedZoneID'
  #         Name: !Sub
  #           - '${AWS::StackName}.${fqdn}'
  #           - fqdn: !If [ IsProd, 'impel.io.', 'testenv.impel.io.' ]
  #         Type: A

  DmsUploadLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 'dms_upload_api'

  DeploymentInfo:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: Universal Integrations Deployment Info
      Name: 'universal-integrations/deployment_info'
      SecretString: !Sub '{"ENVIRONMENT":"${Environment}"}'

  UniversalIntegrationBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub 'integrations-${AWS::Region}-${Environment}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: !If [ IsProd, Enabled, Suspended ]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        # Only eventbridge can trigger glue workflows
        EventBridgeConfiguration:
          EventBridgeEnabled: true
        # Only SNS can trigger glue crawlers
        TopicConfigurations:
          - Event: s3:ObjectCreated:*
            Topic: !Ref IntegrationsS3ToSNSTopic
    DependsOn: IntegrationsS3ToSNSPolicy

  IntegrationsS3ToSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub 'integrations-sns-s3-topic-${AWS::Region}-${Environment}'
      TopicName: !Sub 'integrations-sns-s3-topic-${AWS::Region}-${Environment}'

  IntegrationsS3ToSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Id: !Sub 'integrations-sns-s3-policy-${AWS::Region}-${Environment}'
        Statement:
        - Sid: S3ToSNS
          Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action:
            - SNS:Publish
          Resource: !Ref IntegrationsS3ToSNSTopic
          Condition:
            ArnLike:
              aws:SourceArn: !Sub 'arn:aws:s3:::integrations-${AWS::Region}-${Environment}'
      Topics:
        - Ref: IntegrationsS3ToSNSTopic

  UniversalIntegrationGlueBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub 'integrations-etl-${Environment}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: !If [ IsProd, Enabled, Suspended ]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Allow dev to upload glue etl files on deployment
  UniversalIntegrationGlueBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref UniversalIntegrationGlueBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
            Resource: !Sub 'arn:aws:s3:::${UniversalIntegrationGlueBucket}/*'
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:role/dev"

  AthenaResultsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub 'athena-results-${Environment}-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: !If [ IsProd, Enabled, Suspended ]

Outputs:
  AutoScalingGroupId:
    Description: The name of the AutoScaling Group
    Value: !Ref 'AutoScalingGroup'
  CodeDeployApplication:
    Description: The name of the CodeDeploy application
    Value: !Ref 'CodeDeployApplication'
  DeploymentGroupName:
    Description: The name of the CodeDeploy deployment group
    Value: !Ref 'CodeDeployDeploymentGroup'
