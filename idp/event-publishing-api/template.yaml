AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: event publishing api

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: "^[a-zA-z0-9-]+$"
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens

  DomainSuffix:
    Description: The domain suffix of the API Gateway
    Type: String
    AllowedPattern: "^[a-zA-z0-9-]+$|"
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens
    Default: ""

Conditions:
  IsProd:
    Fn::Equals:
      - Ref: AWS::AccountId
      - 196800776222
  IsUsEast1: !Equals [!Ref "AWS::Region", "us-east-1"]

Mappings:
  SslCertificates:
    us-east-1:
      '143813444726': 'arn:aws:acm:us-east-1:143813444726:certificate/9f026b43-c690-4434-93e1-9be4ef91f67d'
      '196800776222': 'arn:aws:acm:us-east-1:196800776222:certificate/4bad36e0-d971-41e6-a2d8-a897013012be'

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Sub "${AWS::AccountId}"
        ENVIRONMENT: !Ref Environment
        LOGLEVEL: INFO

Resources:
  EventPublishingAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "event-publishing-api-${Environment}"
      StageName: !Ref Environment
      Domain:
        DomainName: !If [ IsProd, 'event-publising-api.impel.io', !Sub 'event-publising-api${DomainSuffix}.testenv.impel.io' ]
        CertificateArn: !FindInMap [ SslCertificates, !Ref 'AWS::Region', !Ref 'AWS::AccountId']
        SecurityPolicy: TLS_1_2
        # There is no HostedZone on unified AWS account ask platform team to create records from autogenerated url
        # Creating new resource must also manually update record
        # Route53:
        #   HostedZoneName: !If [ IsProd, impel.io., testenv.impel.io. ]
        #   IpV6: true
      Auth:
        DefaultAuthorizer: DefaultAuth
        Authorizers:
          DefaultAuth:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt Authorizer.Arn
            Identity:
              Headers:
                - client-id
                - api-key
              Context:
                - resourcePath
              ReauthorizeEvery: 0
      AccessLogSetting:
        DestinationArn: !GetAtt APILogGroup.Arn
        Format: >-
          {"request_id" : "$context.requestId","api_id" : "$context.apiId","resource_path" : "$context.resourcePath","resource_id" : "$context.resourceId","http_method" : "$context.httpMethod","source_ip" : "$context.identity.sourceIp","user-agent" : "$context.identity.userAgent","account_id" : "$context.identity.accountId","api_key" : "$context.identity.apiKey","caller" : "$context.identity.caller","user" : "$context.identity.user","user_arn" : "$context.identity.userArn"}
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: "./swagger/event-publishing-api-oas-interpolated.yaml"
      GatewayResponses:
        BAD_REQUEST_PARAMETERS:
          ResponseTemplates:
            application/json: '{"message": "$context.error.validationErrorString"}'
        BAD_REQUEST_BODY:
          ResponseTemplates:
            application/json: '{"message": "$context.error.validationErrorString"}'
        UNAUTHORIZED:
          ResponseTemplates:
            application/json: '{"message": "This request is unauthorized."}'
          StatusCode: "401"
        ACCESS_DENIED:
          ResponseTemplates:
            application/json: '{"message": "$context.authorizer.key"}'
          StatusCode: "403"
        DEFAULT_5xx:
          ResponseTemplates:
            application/json: '{"message": "Internal Server Error. Please contact Impel support."}'

  APILogGroup:
    Type: AWS::Logs::LogGroup

  APICloudWatchRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  APIGatewayAccount:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt APICloudWatchRole.Arn

  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "event-publishing-api-${Environment}-Authorizer"
      CodeUri: app/
      Handler: authorizer.lambda_handler
      Timeout: 120
      MemorySize: 1024
      Policies:
        - Id: AuthorizerPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowGetAPIKeys
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                !If [
                  IsProd,
                  !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/event-publishing-api*",
                  !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/event-publishing-api*",
                ]

  PostEvents:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "event-publishing-api-${Environment}-PostEvents"
      CodeUri: app/
      Handler: post_events.lambda_handler
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          EVENT_BUS_NAME: !If [ IsProd, "idp-shared-services-prod-EventBus", "idp-shared-services-test-EventBus" ]
      Events:
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref EventPublishingAPIGateway
            Path: /v1/events
            Method: POST
      Policies:
        - Id: PostEventsPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowPostEvents
              Effect: Allow
              Action:
                - events:PutEvents
              Resource:
                - !If [
                    IsProd,
                    !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/idp-shared-services-prod-EventBus",
                    !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/idp-shared-services-test-EventBus"
                  ]
