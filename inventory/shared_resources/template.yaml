AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: shared inventory resources

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: '^[a-zA-z0-9-]+$'
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens

Conditions:
  IsProd:
    Fn::Equals:
    - Ref: AWS::AccountId
    - 196800776222
  IsUsEast1: !Equals [ !Ref 'AWS::Region', 'us-east-1' ]

Mappings:
  Subnets:
    us-east-1:
      '196800776222':
        - subnet-0d29a385efe83bf1c
        - subnet-0e88ecdd743701e96
        - subnet-00291e028e21cb78f
        - subnet-0b1555d5fa3c8ba8e
      '143813444726':
        - subnet-030d57e39ec0df603
        - subnet-01044d580678ea63c
        - subnet-0b29db0aeb6cdabec
        - subnet-0e28d592f2ca28fb7
  VpcId:
    us-east-1:
      '196800776222': vpc-03417e688cee5bc07
      '143813444726': vpc-0b28df8980a1905d5
  SslCertificates:
    us-east-1:
      '143813444726': 'arn:aws:acm:us-east-1:143813444726:certificate/9f026b43-c690-4434-93e1-9be4ef91f67d'
      '196800776222': 'arn:aws:acm:us-east-1:196800776222:certificate/4bad36e0-d971-41e6-a2d8-a897013012be'

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Sub '${AWS::AccountId}'
        ENVIRONMENT: !Ref Environment
        IS_PROD: !If [ IsProd, 1, 0 ]
        LOGLEVEL: INFO
        MERCH_SFTP_KEY: MERCH_SFTP
        SALESAI_SFTP_KEY: SALESAI_SFTP
        SNS_TOPIC_ARN: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
    VpcConfig:
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetIds: !FindInMap [ Subnets, !Ref 'AWS::Region', !Ref 'AWS::AccountId' ]

Resources:
  InventoryIntegrationsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub 'inventory-integrations-${AWS::Region}-${Environment}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        TopicConfigurations:
          - Event: s3:ObjectCreated:*
            Topic: !Ref InventoryS3ToSNSTopic
      LifecycleConfiguration:
        Rules:
          - Id: ExpireNoncurrent
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 3  # A very generous limit unlikely to cause problems with virtually any of our use cases.
            ExpiredObjectDeleteMarker: True  # Must be set to avoid excess AWS Backup costs.
            NoncurrentVersionExpiration:
              NoncurrentDays: 3  # A very short limit to avoid excess bucket costs.
            Status: Enabled
      VersioningConfiguration:
        Status: !If [IsProd, Enabled, Suspended]
      Tags:
        - Key: org:backup-tier
          Value: !If [ IsProd, 'medium', 'none' ]
    DependsOn: InventoryS3ToSNSPolicy

  InventoryS3ToSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub 'inventory-integrations-sns-s3-topic-${AWS::Region}-${Environment}'
      TopicName: !Sub 'inventory-integrations-sns-s3-topic-${AWS::Region}-${Environment}'

  InventoryS3ToSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Id: !Sub 'inventory-integrations-sns-s3-policy-${AWS::Region}-${Environment}'
        Statement:
        - Sid: S3ToSNS
          Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action:
            - SNS:Publish
          Resource: !Ref InventoryS3ToSNSTopic
          Condition:
            ArnLike:
              aws:SourceArn: !Sub 'arn:aws:s3:::inventory-integrations-${AWS::Region}-${Environment}'
      Topics:
        - Ref: InventoryS3ToSNSTopic

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Permit traffic from the shared inv integrations
      VpcId: !FindInMap [ VpcId, !Ref 'AWS::Region', !Ref 'AWS::AccountId']
      SecurityGroupEgress:
        - Description: AllowAll
          CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: shared-inv-integrations

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: S3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - !Sub "arn:aws:s3:::inventory-integrations-${AWS::Region}-${Environment}*"
        - PolicyName: SQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sqs:SendMessage"
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource:
                # - !GetAtt DirectUploadQueue.Arn
                - !GetAtt UnifiedLoadQueue.Arn
                - !GetAtt PartnerSyndicationQueue.Arn
        - PolicyName: AccessSecretsManager
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !If [
                      IsProd,
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/inventory-integrations-sftp*",
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/inventory-integrations-sftp*",
                    ]
                  - !If [
                      IsProd,
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/RDS/SHARED*",
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/RDS/SHARED*"
                    ]
                  - !If [
                      IsProd,
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/inventory-integrations-seez*",
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/inventory-integrations-seez*",
                    ]
        - PolicyName: SNSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource:
                - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
        - PolicyName: LambdaVPCAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"

  # The DirectUpload Resources have been deprecated and are no longer in use.
  # DirectUploadQueue:
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     QueueName: !Sub 'shared-inv-${Environment}-DirectUploadQueue'
  #     VisibilityTimeout: 60
  #     MessageRetentionPeriod: 1209600
  #     RedrivePolicy:
  #       deadLetterTargetArn: !GetAtt DirectUploadDeadLetterQueue.Arn
  #       maxReceiveCount: 3

  # DirectUploadDeadLetterQueue:
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     QueueName: !Sub 'shared-inv-${Environment}-DirectUploadDLQ'
  #     VisibilityTimeout: 10
  #     MessageRetentionPeriod: 1209600

  # DirectUploadDLQAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmName: !Sub 'shared-inv-${Environment}-DirectUploadDLQ'
  #     AlarmDescription: There are over 1 unprocessed messages in the Direct SFTP Upload DLQ
  #     ActionsEnabled: true
  #     AlarmActions:
  #       - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
  #     Dimensions:
  #       - Name: QueueName
  #         Value: !GetAtt DirectUploadDeadLetterQueue.QueueName
  #     EvaluationPeriods: 1
  #     MetricName: ApproximateNumberOfMessagesVisible
  #     Namespace: AWS/SQS
  #     Period: 300
  #     Statistic: Sum
  #     ComparisonOperator: GreaterThanThreshold
  #     Threshold: 1
  #     TreatMissingData: notBreaching

  DirectUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub shared-inv-${Environment}-DirectUpload
      CodeUri: app/
      Handler: direct_upload.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 60
      MemorySize: 1024
      Environment:
        Variables:
          INVENTORY_BUCKET: !Ref InventoryIntegrationsBucket

  # DirectUploadErrorAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmName: !Sub shared-inv-${Environment}-DirectUpload
  #     AlarmDescription: Direct SFTP Upload failed to execute
  #     ActionsEnabled: true
  #     AlarmActions:
  #       - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
  #     ComparisonOperator: GreaterThanThreshold
  #     Dimensions:
  #       - Name: FunctionName
  #         Value: !Ref DirectUploadFunction
  #     EvaluationPeriods: 1
  #     MetricName: Errors
  #     Namespace: AWS/Lambda
  #     Period: 900
  #     Statistic: Sum
  #     Threshold: 1
  #     TreatMissingData: notBreaching

  # DirectUploadEventMapping:
  #   Type: AWS::Lambda::EventSourceMapping
  #   Properties:
  #     BatchSize: 1
  #     EventSourceArn: !GetAtt DirectUploadQueue.Arn
  #     MaximumBatchingWindowInSeconds: 0
  #     FunctionName: !GetAtt DirectUploadFunction.Arn

  # DirectUploadTopicSubscription:
  # Type: AWS::SNS::Subscription
  #   Properties:
  #     Protocol: sqs
  #     RawMessageDelivery: true
  #     TopicArn: !Ref InventoryS3ToSNSTopic
  #     Endpoint: !GetAtt DirectUploadQueue.Arn
  #     FilterPolicyScope: MessageBody
  #     FilterPolicy:
  #       '{"Records":{"s3":{"object":{"key":[{"prefix":"unified"}]}},"eventName":[{"prefix":"ObjectCreated:"}]}}'

  # DirectUploadQueuePolicy:
  #   Type: AWS::SQS::QueuePolicy
  #   Properties:
  #     Queues:
  #       - !Ref DirectUploadQueue
  #     PolicyDocument:
  #         Version: '2012-10-17'
  #         Id: DirectUploadQueuePolicy
  #         Statement:
  #           - Sid: Allow-SNS-SendMessage
  #             Action:
  #               - sqs:SendMessage
  #             Effect: Allow
  #             Resource: !GetAtt DirectUploadQueue.Arn
  #             Principal:
  #                 Service: sns.amazonaws.com
  #             Condition:
  #                 ArnEquals:
  #                     aws:SourceArn: !Ref InventoryS3ToSNSTopic

  UnifiedLoadQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'shared-inv-${Environment}-UnifiedLoadQueue'
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 600
      RedrivePolicy:
          deadLetterTargetArn: !GetAtt UnifiedLoadDeadLetterQueue.Arn
          maxReceiveCount: 2

  UnifiedLoadDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'shared-inv-${Environment}-UnifiedLoadDLQ'
      VisibilityTimeout: 10
      MessageRetentionPeriod: 1209600

  UnifiedLoadDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub shared-inv-${Environment}-UnifiedLoadDLQ
      AlarmDescription: There are messages in the Unified Load DLQ Alarm
      ActionsEnabled: true
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
      Dimensions:
        - Name: QueueName
          Value: !GetAtt UnifiedLoadDeadLetterQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  UnifiedLoadTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      RawMessageDelivery: true
      TopicArn: !Ref InventoryS3ToSNSTopic
      Endpoint: !GetAtt UnifiedLoadQueue.Arn
      FilterPolicyScope: MessageBody
      FilterPolicy:
        '{"Records":{"s3":{"object":{"key":[{"prefix":"unified"}]}},"eventName":[{"prefix":"ObjectCreated:"}]}}'

  UnifiedLoadQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref UnifiedLoadQueue
      PolicyDocument:
          Version: '2012-10-17'
          Id: UnifiedLoadQueuePolicy
          Statement:
            - Sid: Allow-SNS-SendMessage
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt UnifiedLoadQueue.Arn
              Principal:
                  Service: sns.amazonaws.com
              Condition:
                  ArnEquals:
                      aws:SourceArn: !Ref InventoryS3ToSNSTopic

  UnifiedLoadInsert:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "shared-inv-${Environment}-UnifiedLoadInsert"
      Description: Load unified data from s3 to DMS Database.
      Handler: unified_load.lambda_handler
      CodeUri: app/
      Role: !GetAtt LambdaRole.Arn
      Timeout: 600
      MemorySize: 1024

  UnifiedLoadEventMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt UnifiedLoadQueue.Arn
      MaximumBatchingWindowInSeconds: 0
      FunctionName: !GetAtt UnifiedLoadInsert.Arn

  UnifiedLoadInsertErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub shared-inv-${Environment}-UnifiedLoadInsert
      AlarmDescription: Inventory database load failed to execute
      ActionsEnabled: true
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref UnifiedLoadInsert
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 900
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  GenerateICC:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "shared-inv-${Environment}-GenerateICC"
      Description: Generate ICC file for unified data.
      Handler: generate_icc.lambda_handler
      CodeUri: app/
      Role: !GetAtt LambdaRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          INVENTORY_BUCKET: !Ref InventoryIntegrationsBucket

  GenerateICCAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub shared-inv-${Environment}-GenerateICC
      AlarmDescription: Generate ICC failed to execute
      ActionsEnabled: !If [IsProd, true, false]
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref GenerateICC
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 900
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching

  GenerateICCSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "shared-inv-${Environment}-GenerateICCScheduleRule"
      ScheduleExpression: cron(15 4,8,12,16,20 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt GenerateICC.Arn
          Id: "GenerateICC"
          Input: '{"integration_partners": ["carsales", "coxau", "dealerstudio", "icc", "autostock", "icc-api"]}'

  PermissionForEventsToInvokeGenerateICC:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GenerateICC
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt GenerateICCSchedule.Arn

  PartnerSyndicationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'shared-inv-${Environment}-PartnerSyndicationQueue'
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 600
      RedrivePolicy:
          deadLetterTargetArn: !GetAtt PartnerSyndicationDLQ.Arn
          maxReceiveCount: 2

  PartnerSyndicationDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'shared-inv-${Environment}-PartnerSyndicationDLQ'
      VisibilityTimeout: 10
      MessageRetentionPeriod: 1209600

  PartnerSyndicationDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub shared-inv-${Environment}-PartnerSyndicationDLQ
      AlarmDescription: There are messages in the Partner Syndication DLQ
      ActionsEnabled: !If [IsProd, true, false]
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
      Dimensions:
        - Name: QueueName
          Value: !GetAtt PartnerSyndicationDLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  PartnerSyndicationTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      RawMessageDelivery: true
      TopicArn: !Ref InventoryS3ToSNSTopic
      Endpoint: !GetAtt PartnerSyndicationQueue.Arn
      FilterPolicyScope: MessageBody
      FilterPolicy:
        '{"Records":{"s3":{"object":{"key":[{"prefix":"icc"}]}},"eventName":[{"prefix":"ObjectCreated:"}]}}'

  PartnerSyndicationQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref PartnerSyndicationQueue
      PolicyDocument:
          Version: '2012-10-17'
          Id: PartnerSyndicationQueuePolicy
          Statement:
            - Sid: Allow-SNS-SendMessage
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt PartnerSyndicationQueue.Arn
              Principal:
                  Service: sns.amazonaws.com
              Condition:
                  ArnEquals:
                      aws:SourceArn: !Ref InventoryS3ToSNSTopic

  PartnerSyndication:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "shared-inv-${Environment}-PartnerSyndication"
      Description: Syndicate unified data to partners.
      Handler: partner_syndication.lambda_handler
      CodeUri: app/
      Role: !GetAtt LambdaRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          INVENTORY_BUCKET: !Ref InventoryIntegrationsBucket

  PartnerSyndicationEventMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt PartnerSyndicationQueue.Arn
      MaximumBatchingWindowInSeconds: 0
      FunctionName: !GetAtt PartnerSyndication.Arn

  MissingICCFilesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub shared-inv-${Environment}-MissingICCFiles
      AlarmDescription: Triggers when ICC files are not received in the inventory bucket
      ActionsEnabled: !If [IsProd, true, false]
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt PartnerSyndicationQueue.QueueName
      EvaluationPeriods: 1
      MetricName: NumberOfMessagesReceived
      Namespace: AWS/SQS
      Period: 14400
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching

  SharedDBAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "SharedDBAlarm-${Environment}"
      AlarmDescription: Alarm for the Shared Layer Shared DB when CPU usage exceeds 60%
      MetricName: CPUUtilization
      Namespace: AWS/RDS
      Statistic: Average
      Period: 60  # 1 minute
      EvaluationPeriods: 1
      Threshold: 75
      ComparisonOperator: GreaterThanOrEqualToThreshold
      ActionsEnabled: !If [ IsProd, true, false ]
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !If [ IsProd, unified-data-shared-prod, unified-data-shared-test ]

  CheckInventorySyndication:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "shared-inv-${Environment}-CheckInventorySyndication"
      Description: Check if the inventory syndication is working.
      Handler: check_inventory_syndication.lambda_handler
      CodeUri: app/
      Role: !GetAtt LambdaRole.Arn
      Timeout: 300
      MemorySize: 512
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: cron(59 23 * * ? *) # Runs every day at 23:59
            Enabled: !If [ IsProd, true, false ]
  
  CheckInventorySyndicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/shared-inv-${Environment}-CheckInventorySyndication"
      RetentionInDays: 60
  
  InternalInventoryApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "shared-inv-${Environment}-InternalInventoryApiGateway"
      StageName: !Ref Environment
      Domain:
        DomainName: !If [IsProd, !Sub 'internal-inventory-api-${Environment}.impel.io', !Sub 'internal-inventory-api-${Environment}.testenv.impel.io']
        CertificateArn: !FindInMap [ SslCertificates, !Ref 'AWS::Region', !Ref 'AWS::AccountId']
        SecurityPolicy: TLS_1_2
      Auth:
        DefaultAuthorizer: DefaultAuth
        Authorizers:
          DefaultAuth:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt Authorizer.Arn
            Identity:
              Headers:
                - client_id
                - x_api_key
              Context:
                - resourcePath
              ReauthorizeEvery: 0
      AccessLogSetting:
        DestinationArn: !GetAtt APILogGroup.Arn
        Format: >-
          {"request_id" : "$context.requestId","api_id" : "$context.apiId","resource_path" : "$context.resourcePath","resource_id" : "$context.resourceId","http_method" : "$context.httpMethod","source_ip" : "$context.identity.sourceIp","user-agent" : "$context.identity.userAgent","account_id" : "$context.identity.accountId","api_key" : "$context.identity.apiKey","caller" : "$context.identity.caller","user" : "$context.identity.user","user_arn" : "$context.identity.userArn"}
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: "./swagger/inventory-internal-api-oas-interpolated.yaml"
      GatewayResponses:
        BAD_REQUEST_PARAMETERS:
          ResponseTemplates:
            application/json: '{"message": "$context.error.validationErrorString"}'
        BAD_REQUEST_BODY:
          ResponseTemplates:
            application/json: '{"message": "$context.error.validationErrorString"}'
        UNAUTHORIZED:
          ResponseTemplates:
            application/json: '{"message": "This request is unauthorized."}'
          StatusCode: "401"
        ACCESS_DENIED:
          ResponseTemplates:
            application/json: '{"message": "$context.authorizer.key"}'
          StatusCode: "403"
        DEFAULT_5xx:
          ResponseTemplates:
            application/json: '{"message": "Internal Server Error. Please contact Impel support."}'

  APILogGroup:
    Type: AWS::Logs::LogGroup

  APICloudWatchRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  APIGatewayAccount:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt APICloudWatchRole.Arn

  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "shared-inv-${Environment}-inventory-authorizer"
      CodeUri: app/
      Handler: authorizer.lambda_handler
      Timeout: 30
      MemorySize: 512
      Policies:
        - Id: AuthorizerPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowGetAPIKeys
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                !If [
                  IsProd,
                  !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/InventoryInternalApi*",
                  !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/InventoryInternalApi*",
                ]

  AuthorizerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/shared-inv-${Environment}-inventory-authorizer"

  RetrieveInventory:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "shared-inv-${Environment}-inventory-RetrieveInventory"
      CodeUri: app/
      Handler: retrieve_inventory.lambda_handler
      Timeout: 30
      MemorySize: 1024
      Role: !GetAtt LambdaRole.Arn
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref InternalInventoryApiGateway
            Path: /inventory/v1
            Method: GET
  
  RetrieveInventoryLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/shared-inv-${Environment}-inventory-RetrieveInventory"
  
  RetrieveDealer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "shared-inv-${Environment}-inventory-RetrieveDealer"
      CodeUri: app/
      Handler: retrieve_dealer.lambda_handler
      Timeout: 30
      MemorySize: 1024
      Role: !GetAtt LambdaRole.Arn
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref InternalInventoryApiGateway
            Path: /dealer/v1
            Method: GET
  
  RetrieveDealerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/shared-inv-${Environment}-inventory-RetrieveDealer"
