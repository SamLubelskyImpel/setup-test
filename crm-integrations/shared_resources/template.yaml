AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: shared crm resources

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: "^[a-zA-z0-9-]+$"
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens

Conditions:
  IsProd:
    Fn::Equals:
      - Ref: AWS::AccountId
      - 196800776222
  IsUsEast1: !Equals [!Ref "AWS::Region", "us-east-1"]

Mappings:
  SslCertificates:
    us-east-1:
      "143813444726": "arn:aws:acm:us-east-1:143813444726:certificate/9f026b43-c690-4434-93e1-9be4ef91f67d"
      "196800776222": "arn:aws:acm:us-east-1:196800776222:certificate/4bad36e0-d971-41e6-a2d8-a897013012be"
  Subnets:
    us-east-1:
      "196800776222":
        - subnet-0d29a385efe83bf1c
        - subnet-0e88ecdd743701e96
        - subnet-00291e028e21cb78f
        - subnet-0b1555d5fa3c8ba8e
      "143813444726":
        - subnet-030d57e39ec0df603
        - subnet-01044d580678ea63c
        - subnet-0b29db0aeb6cdabec
        - subnet-0e28d592f2ca28fb7
  VpcId:
    us-east-1:
      "196800776222": vpc-03417e688cee5bc07
      "143813444726": vpc-0b28df8980a1905d5

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Sub "${AWS::AccountId}"
        ENVIRONMENT: !Ref Environment
        LOGLEVEL: INFO
    VpcConfig:
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetIds: !FindInMap [Subnets, !Ref "AWS::Region", !Ref "AWS::AccountId"]

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Permit traffic from the unified CRM lambdas
      VpcId: !FindInMap [ VpcId, !Ref 'AWS::Region', !Ref 'AWS::AccountId']
      SecurityGroupEgress:
        - Description: AllowAll
          CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      Tags:
        - Key: Environment
          Value: !Ref Environment

  RDSInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "crm api rds access"
      GroupId: !If [IsProd, "sg-00e12bc4c116eb820", "sg-00b911ee260ce5153"]
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: S3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource:
                - !If [
                    IsProd,
                    "arn:aws:s3:::crm-integrations-prod/configurations*",
                    "arn:aws:s3:::crm-integrations-test/configurations*"
                  ]
        - PolicyName: SQSPutPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sqs:PutMessage"
                Resource: "arn:aws:sqs:*:*:*"
        - PolicyName: SQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource:
                - !GetAtt ProcessLeadUpdatesQueue.Arn
        - PolicyName: LambdaEC2ENIManagement
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                Resource: "*"
        - PolicyName: AccessSecretsManager
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !If [
                      IsProd,
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/DMSDB*",
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/DMSDB*",
                    ]

  GetActiveDealers:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub crm-shared_get_active_dealers-${Environment}
      CodeUri: app/
      Handler: get_active_dealers.lambda_handler
      Timeout: 30
      Role: !GetAtt LambdaRole.Arn
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:crm-api-data-layer-${Environment}:2
  
  GetActiveDealersErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub crm-shared_get_active_dealers-${Environment}
      AlarmDescription: Lambda invocation errors detected from the DealerPeak Lead Updates
      ActionsEnabled: true
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref GetActiveDealers
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 900
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  ScheduledCRMDataPull:
    Type: AWS::Events::Rule
    Properties:
      Description: "Scheduled CRM Data Pull - DealerPeak"
      ScheduleExpression: "cron(*/5 * * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt GetActiveDealers.Arn
          Id: "get_active_dealers"
          Input: !Sub '{"impel_integration_partner_name": "DEALERPEAK"}'

  IntegrationsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !If [IsProd, "crm-integrations-prod", "crm-integrations-test"]
      NotificationConfiguration:
        EventBridgeConfiguration:
            EventBridgeEnabled: true
        # Event: 's3:ObjectCreated:*'
        # EventBridge:
        #   EventBus: !GetAtt IntegrationsEventBridgeBus.Arn
        # Filter:
        #   S3Key:
        #     Rules:
        #       - Name: prefix
        #         Value: "raw/"

  ProcessLeadUpdates:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub crm-shared_lead_updates-${Environment}
      CodeUri: app/
      Handler: process_lead_updates.lambda_handler
      Timeout: 30
      Role: !GetAtt LambdaRole.Arn
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:crm-api-data-layer-${Environment}:2

  ProcessLeadUpdatesEventMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn: !GetAtt ProcessLeadUpdatesQueue.Arn
      MaximumBatchingWindowInSeconds: 300
      FunctionName: !GetAtt ProcessLeadUpdates.Arn
  
  ProcessLeadUpdatesQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "crm-shared_lead_updates_queue-${Environment}"
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ProcessLeadUpdatesDeadLetterQueue.Arn
        maxReceiveCount: 3
      
  ProcessLeadUpdatesDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "crm-shared_lead_updates_dlq-${Environment}"
      MessageRetentionPeriod: 604800
      VisibilityTimeout: 10
