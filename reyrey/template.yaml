AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Reyrey DMS ETL

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: '^[a-zA-z0-9-]+$'
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens

  DomainSuffix:
    Description: The domain suffix of the API Gateway
    Type: String
    AllowedPattern: '^[a-zA-z0-9-]+$|'
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens
    Default: ""

Conditions:
  IsProd:
    Fn::Equals:
    - Ref: AWS::AccountId
    - 196800776222
  IsUsEast1: !Equals [ !Ref 'AWS::Region', 'us-east-1' ]

Mappings:
  SslCertificates:
    us-east-1:
      '143813444726': 'arn:aws:acm:us-east-1:143813444726:certificate/9f026b43-c690-4434-93e1-9be4ef91f67d'
      '196800776222': 'arn:aws:acm:us-east-1:196800776222:certificate/4bad36e0-d971-41e6-a2d8-a897013012be'

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Sub '${AWS::AccountId}'
        ENVIRONMENT: !Ref Environment
        IS_PROD: !If [ IsProd, 1, 0 ]
        LOGLEVEL: INFO

Resources:
  ReyReyGlueRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "glue.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
      Policies:
        - PolicyName: ReyReyGluePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: SMPolicy
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !If [ IsProd, 
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/DMSDB*",
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/DMSDB*"
                      ]
        - PolicyName: ReyReyGlueS3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: SPolicy
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:*Object
                Resource: 
                  - !If [ IsProd, 
                      'arn:aws:s3:::integrations-etl-prod/raw_data/*',
                      'arn:aws:s3:::integrations-etl-test/raw_data/*'
                    ]
                  - !If [ IsProd, 
                      'arn:aws:s3:::integrations-etl-prod/glue_etl_job/reyrey_glue_job.py',
                      'arn:aws:s3:::integrations-etl-test/glue_etl_job/reyrey_glue_job.py'
                    ]
                  - !If [ IsProd, 
                      !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                      !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                    ]
        - PolicyName: ReyReySSMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: SSMPolicy
                Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource: "*"
        - PolicyName: ReyReyGlueSQSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: SQSPolicy
                Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:GetQueueUrl
                  - sqs:CreateQueue
                  - sqs:SendMessage
                  - sqs:SendMessageBatch
                  - sqs:ListDeadLetterSourceQueues
                  - sqs:ChangeMessageVisibility
                  - sqs:PurgeQueue
                  - sqs:ReceiveMessage
                  - sqs:GetQueueAttributes
                  - sqs:ListQueueTags
                  - sqs:SetQueueAttributes
                Resource: 
                  - !GetAtt ReyReyROQueue.Arn
                  - !GetAtt ReyReyRODLQ.Arn
                  - !GetAtt ReyReyFIQueue.Arn
                  - !GetAtt ReyReyFIDLQ.Arn
                  - !GetAtt ReyReyETLDLQ.Arn

  ReyReyCrawlerDB:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: "reyreycrawlerdb"
        Description: "ReyReyDB"

  ReyReyRepairOrderClassifier:
    Type: AWS::Glue::Classifier
    Properties:
      XMLClassifier:
        Name: "ReyReyRepairOrderClassifier"
        Classification: "xml"
        RowTag: "rey_ImpelRepairOrder"

  ReyReyFIClassifier:
    Type: AWS::Glue::Classifier
    Properties:
      XMLClassifier:
        Name: "ReyReyFIClassifier"
        Classification: "xml"
        RowTag: "rey_ImpelFIClosedDeal"

  ReyReyLakeFormationPermissionRaw:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt ReyReyGlueRole.Arn
      Resource:
        DatabaseResource:
          Name: !Ref ReyReyCrawlerDB
        TableResource:
          DatabaseName: !Ref ReyReyCrawlerDB
          TableWildcard: {}
      Permissions:
        - 'ALL'
      PermissionsWithGrantOption: []

  ReyReyFICrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub 'reyrey-crawler-fi-${Environment}'
      Description: Crawl raw xml data for rey rey fi folder.
      Role: !GetAtt ReyReyGlueRole.Arn
      TablePrefix: !Sub 'ReyReyCrawlerDB_'
      DatabaseName: !Ref ReyReyCrawlerDB
      Classifiers:
        - !Ref ReyReyRepairOrderClassifier
        - !Ref ReyReyFIClassifier
      Targets:
        S3Targets:
          - Path: !If [ IsProd, 
                    !Sub "s3://integrations-${AWS::Region}-prod/reyrey/fi_closed_deal/",
                    !Sub "s3://integrations-${AWS::Region}-test/reyrey/fi_closed_deal/",
                  ]
            DlqEventQueueArn: !GetAtt ReyReyFIDLQ.Arn
            EventQueueArn: !GetAtt ReyReyFIQueue.Arn    
      SchemaChangePolicy:
        UpdateBehavior: 'UPDATE_IN_DATABASE'
        DeleteBehavior: 'LOG'
      Configuration: '{"Version":1.0,"CrawlerOutput":{"Partitions":{"AddOrUpdateBehavior":"InheritFromTable"},"Tables":{"AddOrUpdateBehavior":"MergeNewColumns"}},"Grouping":{"TableGroupingPolicy":"CombineCompatibleSchemas"}}'
      RecrawlPolicy:
        RecrawlBehavior: 'CRAWL_EVENT_MODE'
        
  ReyReyROCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub 'reyrey-crawler-ro-${Environment}'
      Description: Crawl raw xml data for rey rey repair order folder
      Role: !GetAtt ReyReyGlueRole.Arn
      TablePrefix: !Sub 'ReyReyCrawlerDB_'
      DatabaseName: !Ref ReyReyCrawlerDB
      Classifiers:
        - !Ref ReyReyRepairOrderClassifier
        - !Ref ReyReyFIClassifier
      Targets:
        S3Targets:    
          - Path: !If [ IsProd, 
                    !Sub "s3://integrations-${AWS::Region}-prod/reyrey/repair_order/",
                    !Sub "s3://integrations-${AWS::Region}-test/reyrey/repair_order/",
                  ]
            DlqEventQueueArn: !GetAtt ReyReyRODLQ.Arn
            EventQueueArn: !GetAtt ReyReyROQueue.Arn
      SchemaChangePolicy:
        UpdateBehavior: 'UPDATE_IN_DATABASE'
        DeleteBehavior: 'LOG'
      Configuration: '{"Version":1.0,"CrawlerOutput":{"Partitions":{"AddOrUpdateBehavior":"InheritFromTable"},"Tables":{"AddOrUpdateBehavior":"MergeNewColumns"}},"Grouping":{"TableGroupingPolicy":"CombineCompatibleSchemas"}}'
      RecrawlPolicy:
        RecrawlBehavior: 'CRAWL_EVENT_MODE'

  ReyReyETLFI:
    Type: AWS::Glue::Job
    Properties:
      Description: ETL job to run after the rey rey fi crawler.
      Name: !Sub 'reyrey-etl-fi-${Environment}'
      Role: !GetAtt ReyReyGlueRole.Arn
      GlueVersion: 3.0
      MaxCapacity: 2
      ExecutionProperty:
        MaxConcurrentRuns: 1
      Connections:
        Connections:
            - !Sub 'dms-rds-connection-${Environment}'
      Command:
        Name: glueetl
        PythonVersion: 3
        ScriptLocation: !If [ IsProd, 
                      's3://integrations-etl-prod/glue_etl_job/reyrey_glue_job.py',
                      's3://integrations-etl-test/glue_etl_job/reyrey_glue_job.py'
                    ]
      DefaultArguments: 
        '--job-bookmark-option': 'job-bookmark-enable'
        '--TempDir': !If [ IsProd, 
                      's3://integrations-etl-prod/temporary/',
                      's3://integrations-etl-test/temporary/'
                    ]
        '--dlq_url': !Ref ReyReyETLDLQ
        '--db_name': !Ref ReyReyCrawlerDB
        '--catalog_table_names': "reyreycrawlerdb_fi_closed_deal"
        '--catalog_connection': !Ref RDSConnection
        '--environment': !Ref Environment
        '--additional-python-modules': 'psycopg2-binary==2.9.3'

  ReyReyETLRO:
    Type: AWS::Glue::Job
    Properties:
      Description: ETL job to run after the rey rey RO crawler.
      Name: !Sub 'reyrey-etl-ro-${Environment}'
      Role: !GetAtt ReyReyGlueRole.Arn
      GlueVersion: 3.0
      MaxCapacity: 2
      ExecutionProperty:
        MaxConcurrentRuns: 1
      Connections:
        Connections:
            - !Sub 'dms-rds-connection-${Environment}'
      Command:
        Name: glueetl
        PythonVersion: 3
        ScriptLocation: !If [ IsProd, 
                      's3://integrations-etl-prod/glue_etl_job/reyrey_glue_job.py',
                      's3://integrations-etl-test/glue_etl_job/reyrey_glue_job.py'
                    ]
      DefaultArguments: 
        '--job-bookmark-option': 'job-bookmark-enable'
        '--TempDir': !If [ IsProd, 
                      's3://integrations-etl-prod/temporary/',
                      's3://integrations-etl-test/temporary/'
                    ]
        '--dlq_url': !Ref ReyReyETLDLQ
        '--db_name': !Ref ReyReyCrawlerDB
        '--catalog_table_names': "reyreycrawlerdb_repair_order"
        '--catalog_connection': !Ref RDSConnection
        '--environment': !Ref Environment
        '--additional-python-modules': 'psycopg2-binary==2.9.3'

  GlueTriggerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - glue:notifyEvent
          Resource:
          - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:workflow/${ReyReyWorkflowRO}
          - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:workflow/${ReyReyWorkflowFI}

  ReyReyEventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub reyrey-eventbridge-role-${Environment}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: NotifyGlueWorkflow
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - glue:notifyEvent
                Resource:
                - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:workflow/${ReyReyWorkflowRO}
                - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:workflow/${ReyReyWorkflowFI}

  ReyReyWorkflowRO:
    Type: AWS::Glue::Workflow
    Properties: 
      Description: Workflow for orchestrating glue rey rey RO jobs
      Name: !Sub 'reyrey-glue-workflow-ro-${Environment}'

  ReyReyWorkflowRORuleEvent: 
    Type: AWS::Events::Rule
    Properties: 
      EventPattern: 
        source:
        - "aws.s3"
        detail:
          eventSource:
          - "s3.amazonaws.com"
          eventName:
          - "PutObject"
          - "CopyObject"
          - "CompleteMultipartUpload"
          requestParameters:
            bucketName:
            - !If [ IsProd, 
                    !Sub "integrations-${AWS::Region}-prod",
                    !Sub "integrations-${AWS::Region}-test",
                  ]
            key:
            - prefix: "reyrey/repair_order/"
      Targets:
        - Id: !Sub reyrey-workflow-ro-target-${Environment}
          Arn: !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:workflow/${ReyReyWorkflowRO}
          RoleArn: !GetAtt ReyReyEventBridgeRole.Arn

  ReyReyWorkflowROStart:
    Type: AWS::Glue::Trigger
    Properties:
      Name: !Sub 'reyrey-workflow-start-ro-${Environment}'
      Type: EVENT
      EventBatchingCondition:
        BatchSize: 100
        BatchWindow: 900
      WorkflowName: !Ref ReyReyWorkflowRO
      Actions:
        - CrawlerName: !Ref ReyReyROCrawler

  ReyReyWorkflowROJobTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: !Sub 'reyrey-ro-crawler-glue-success-${Environment}'
      Type: CONDITIONAL
      Description: Trigger to start the universal integration glue job
      WorkflowName: !Ref ReyReyWorkflowRO
      StartOnCreation: true
      Actions:
        - JobName: !Ref ReyReyETLRO
      Predicate:
        Logical: ANY
        Conditions:
            - LogicalOperator: EQUALS
              CrawlerName: !Ref ReyReyROCrawler
              CrawlState: SUCCEEDED

  ReyReyWorkflowFI:
    Type: AWS::Glue::Workflow
    Properties: 
      Description: Workflow for orchestrating glue rey rey FI jobs
      Name: !Sub 'reyrey-glue-workflow-fi-${Environment}'

  ReyReyWorkflowFIRuleEvent: 
    Type: AWS::Events::Rule
    Properties: 
      EventPattern: 
        source:
        - "aws.s3"
        detail:
          eventSource:
          - "s3.amazonaws.com"
          eventName:
          - "PutObject"
          - "CopyObject"
          - "CompleteMultipartUpload"
          requestParameters:
            bucketName:
            - !If [ IsProd, 
                    !Sub "integrations-${AWS::Region}-prod",
                    !Sub "integrations-${AWS::Region}-test",
                  ]
            key:
            - prefix: "reyrey/fi_closed_deal/"
      Targets:
        - Id: !Sub reyrey-workflow-fi-target-${Environment}
          Arn: !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:workflow/${ReyReyWorkflowFI}
          RoleArn: !GetAtt ReyReyEventBridgeRole.Arn

  ReyReyWorkflowFIStart:
    Type: AWS::Glue::Trigger
    Properties:
      Name: !Sub 'reyrey-workflow-start-fi-${Environment}'
      Type: EVENT
      EventBatchingCondition:
        BatchSize: 100
        BatchWindow: 900
      WorkflowName: !Ref ReyReyWorkflowFI
      Actions:
        - CrawlerName: !Ref ReyReyFICrawler

  ReyReyWorkflowFIJobTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: !Sub 'reyrey-fi-crawler-glue-success-${Environment}'
      Type: CONDITIONAL
      Description: Trigger to start the universal integration glue job
      WorkflowName: !Ref ReyReyWorkflowFI
      StartOnCreation: true
      Actions:
        - JobName: !Ref ReyReyETLFI
      Predicate:
        Logical: ANY
        Conditions:
            - LogicalOperator: EQUALS
              CrawlerName: !Ref ReyReyFICrawler
              CrawlState: SUCCEEDED

  RDSConnection:
    Type: AWS::Glue::Connection
    Properties: 
      CatalogId: !Ref AWS::AccountId
      ConnectionInput:
        Name: !Sub 'dms-rds-connection-${Environment}'
        PhysicalConnectionRequirements:
          AvailabilityZone: 'us-east-1b'
          SecurityGroupIdList: 
            - !If [ IsProd, 
                'sg-00e12bc4c116eb820',
                'sg-00b911ee260ce5153'
              ] 
          SubnetId: !If [ IsProd, 
                  'subnet-0b1555d5fa3c8ba8e',
                  'subnet-030d57e39ec0df603'
                ] 
        ConnectionProperties:
          Type: JDBC
          JDBC_CONNECTION_URL: !If [ IsProd, 
                    !Sub '{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-1:${AWS::AccountId}:secret:prod/DMSDB:SecretString:jdbc_url}}',
                    !Sub '{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-1:${AWS::AccountId}:secret:test/DMSDB:SecretString:jdbc_url}}'
                  ]
          USERNAME: !If [ IsProd, 
                    !Sub '{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-1:${AWS::AccountId}:secret:prod/DMSDB:SecretString:user}}',
                    !Sub '{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-1:${AWS::AccountId}:secret:test/DMSDB:SecretString:user}}'
                  ]
          PASSWORD: !If [ IsProd, 
                    !Sub '{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-1:${AWS::AccountId}:secret:prod/DMSDB:SecretString:password}}',
                    !Sub '{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-1:${AWS::AccountId}:secret:test/DMSDB:SecretString:password}}'
                  ]
        ConnectionType: JDBC

  ReyReyETLDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ReyReyETLDLQ
        
  ReyReyFIDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ReyReyFIDLQ

  ReyReyRODLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ReyReyRODLQ

  ReyReyROQueue:
    Type: AWS::SQS::Queue
    DependsOn: ReyReyRODLQ
    Properties:
      QueueName: ReyReyROQueue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ReyReyRODLQ.Arn
        maxReceiveCount: 1

  ReyReyROQueueRule: 
    Type: AWS::Events::Rule
    Properties: 
      EventPattern: 
        source:
        - "aws.s3"
        detail:
          eventSource:
          - "s3.amazonaws.com"
          eventName:
          - "PutObject"
          - "CopyObject"
          - "CompleteMultipartUpload"
          requestParameters:
            bucketName:
            - !If [ IsProd, 
                    !Sub "integrations-${AWS::Region}-prod",
                    !Sub "integrations-${AWS::Region}-test",
                  ]
            key:
            - prefix: "reyrey/repair_order/"
      Targets: 
        - Arn: !GetAtt ReyReyROQueue.Arn
          Id: "ReyReyROQueueTarget"

  ReyReyROQueueRulePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: SQS:SendMessage
          Resource:  !GetAtt ReyReyROQueue.Arn
      Queues:
        - Ref: ReyReyROQueue

  ReyReyFIQueue:
    Type: AWS::SQS::Queue
    DependsOn: ReyReyFIDLQ
    Properties:
      QueueName: ReyReyFIQueue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ReyReyFIDLQ.Arn
        maxReceiveCount: 1

  ReyReyFIQueueRule: 
    Type: AWS::Events::Rule
    Properties: 
      EventPattern: 
        source:
        - "aws.s3"
        detail:
          eventSource:
          - "s3.amazonaws.com"
          eventName:
          - "PutObject"
          - "CopyObject"
          - "CompleteMultipartUpload"
          requestParameters:
            bucketName:
            - !If [ IsProd, 
                    !Sub "integrations-${AWS::Region}-prod",
                    !Sub "integrations-${AWS::Region}-test",
                  ]
            key:
            - prefix: "reyrey/fi_closed_deal/"
      Targets: 
        - Arn: !GetAtt ReyReyFIQueue.Arn
          Id: "ReyReyFIQueueTarget"

  ReyReyFIQueueRulePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: SQS:SendMessage
          Resource:  !GetAtt ReyReyFIQueue.Arn
      Queues:
        - Ref: ReyReyFIQueue

  ReyreyROCrawlerAlert:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Alert for when ReyRey RO Glue Crawler fails
      State: DISABLED # !If [ IsProd, ENABLED, DISABLED ] TODO: Enable once reyrey sends data to avoid alert spam
      EventPattern:
        source:
          - aws.glue
        detail-type:
          - "Glue Crawler State Change"
        detail:
          state:
            - "Failed"
          crawlerName:
            - !Ref ReyReyROCrawler
      Targets:
        - Arn: !Ref TopicUnivClientEngineeringAlertTopic
          Id: !Sub ReyreyROCrawlerAlert-target-${Environment}

  ReyreyFICrawlerAlert:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Alert for when ReyRey FI Glue Crawler fails
      State: DISABLED # !If [ IsProd, ENABLED, DISABLED ] TODO: Enable once reyrey sends data to avoid alert spam
      EventPattern:
        source:
          - aws.glue
        detail-type:
          - "Glue Crawler State Change"
        detail:
          state:
            - "Failed"
          crawlerName:
            - !Ref ReyReyFICrawler
      Targets:
        - Arn: !Ref TopicUnivClientEngineeringAlertTopic
          Id: !Sub ReyreyFICrawlerAlert-target-${Environment}

  ReyreyETLFIAlert:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Alert for when ReyRey Glue ETL fails
      State: DISABLED # !If [ IsProd, ENABLED, DISABLED ] TODO: Enable once reyrey sends data to avoid alert spam
      EventPattern:
        source:
          - aws.glue
        detail-type:
          - "Glue Job State Change"
        detail:
          state:
            - "Failed"
          jobName:
            - !Ref ReyReyETLFI
      Targets:
        - Arn: !Ref TopicUnivClientEngineeringAlertTopic
          Id: !Sub ReyreyETLFIAlert-target-${Environment}

  ReyreyETLROAlert:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Alert for when ReyRey Glue ETL fails
      State: DISABLED # !If [ IsProd, ENABLED, DISABLED ] TODO: Enable once reyrey sends data to avoid alert spam
      EventPattern:
        source:
          - aws.glue
        detail-type:
          - "Glue Job State Change"
        detail:
          state:
            - "Failed"
          jobName:
            - !Ref ReyReyETLRO
      Targets:
        - Arn: !Ref TopicUnivClientEngineeringAlertTopic
          Id: !Sub ReyreyETLROAlert-target-${Environment}

  AlertTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Sid: AllowSNS
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: 'sns:Publish'
            Resource:
              - !Ref TopicUnivClientEngineeringAlertTopic
      Topics:
        - !Ref TopicUnivClientEngineeringAlertTopic

  TopicUnivClientEngineeringAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: alert_client_engineering
      Subscription:
        - Endpoint: !If [ IsProd, 
                    "impel_alert_client_engineering@impel.io",
                    "ken@impel.io",
                  ]
          Protocol: email
      TopicName: alert_client_engineering

  ReyReyETLDLQRule:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'reyrey-glue-etl-dql-rule-${Environment}'
      AlarmDescription: There are messages in the ReyRey ETL DLQ
      ActionsEnabled: true
      Dimensions:
        - Name: QueueName
          Value: !GetAtt ReyReyETLDLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 1800
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  ReyReyETLDLQRuleEvent:
    Type: AWS::Events::Rule
    Properties:
      State: ENABLED
      RoleArn: !GetAtt ReyReyEventBridgeRole.Arn
      EventPattern:
        source:
        - aws.cloudwatch
        detail-type:
        - CloudWatch Alarm State Change
        detail:
          alarmName:
            - !Sub 'reyrey-glue-etl-dql-rule-${Environment}'
          state:
            value:
            - ALARM
      Description: Runs on reyrey ETL alarm triggered
      Targets:
        - Arn: !Ref TopicUnivClientEngineeringAlertTopic
          Id: !Sub ReyreyETLDLQAlert-target-${Environment}

  GlueTriggerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowDevGlue
            Effect: Allow
            Action:
              - glue:*
            Resource: '*'
      Roles: 
        - "dev"
