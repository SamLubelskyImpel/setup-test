AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: dms etl

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: '^[a-zA-z0-9-]+$'
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens

Conditions:
  IsProd:
    Fn::Equals:
    - Ref: AWS::AccountId
    - 196800776222
  IsUsEast1: !Equals [ !Ref 'AWS::Region', 'us-east-1' ]

Mappings:
  SslCertificates:
    us-east-1:
      '143813444726': 'arn:aws:acm:us-east-1:143813444726:certificate/9f026b43-c690-4434-93e1-9be4ef91f67d'
      '196800776222': 'arn:aws:acm:us-east-1:196800776222:certificate/4bad36e0-d971-41e6-a2d8-a897013012be'

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Sub '${AWS::AccountId}'
        ENVIRONMENT: !Ref Environment
        IS_PROD: !If [ IsProd, 1, 0 ]
        LOGLEVEL: INFO

Resources:
  UniversalIntegrationsGlueRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "glue.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
      Policies:
        - PolicyName: UniversalIntegrationsGluePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: SMPolicy
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !If [ IsProd, 
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/DMSDB*",
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:stage/DMSDB*"
                      ]
        - PolicyName: UniversalIntegrationsGlueS3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: SPolicy
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:*Object
                Resource: 
                  - !Sub 'arn:aws:s3:::aws-glue-assets-universal-integrations/raw_data/*' # TODO: migrate univ
                  - !Sub 'arn:aws:s3:::aws-glue-assets-universal-integrations/glue_etl_job/s3_glue_job.py' # TODO: migrate univ
                  - !If [ IsProd, 
                      !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                      !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                    ]
        - PolicyName: UniversalIntegrationsGlueSSMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: SSMPolicy
                Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource: "*"

  UniversalIntegrationCrawlerDB:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: "universalintegrationcrawler"
        Description: "universalintegrationDB"

  ReyReyRepairOrderClassifier:
    Type: AWS::Glue::Classifier
    Properties:
      XMLClassifier:
        Name: "ReyReyRepairOrderClassifier"
        Classification: "xml"
        RowTag: "rey_ImpelRepairOrder"

  ReyReyFIClassifier:
    Type: AWS::Glue::Classifier
    Properties:
      XMLClassifier:
        Name: "ReyReyFIClassifier"
        Classification: "xml"
        RowTag: "rey_ImpelFIClosedDeal"

  UniversalIntegrationLakeFormationPermissionRaw:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt UniversalIntegrationsGlueRole.Arn
      Resource:
        DatabaseResource:
          Name: !Ref UniversalIntegrationCrawlerDB
        TableResource:
          DatabaseName: !Ref UniversalIntegrationCrawlerDB
          TableWildcard: {}
      Permissions:
        - 'ALL'
      PermissionsWithGrantOption: []

  UniversalIntegrationCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub 'universal-integration-crawler-${Environment}'
      Description: Crawl raw xml data for universal integrations
      Role: !GetAtt UniversalIntegrationsGlueRole.Arn
      TablePrefix: !Sub 'UniversalIntegrationCrawlerDB_'
      DatabaseName: !Ref UniversalIntegrationCrawlerDB
      RecrawlPolicy: 
        RecrawlBehavior: "CRAWL_EVENT_MODE"
      Classifiers:
        - !Ref ReyReyRepairOrderClassifier
        - !Ref ReyReyFIClassifier
      Targets:
        S3Targets:
          - Path: !If [ IsProd, 
                    !Sub "s3://integrations-${AWS::Region}-prod/reyrey/fi_closed_deal/",
                    !Sub "s3://integrations-${AWS::Region}-test/reyrey/fi_closed_deal/",
                  ]
            EventQueueArn: !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:integrations-s3-queue-${AWS::Region}-${Environment}'
          - Path: !If [ IsProd, 
                    !Sub "s3://integrations-${AWS::Region}-prod/reyrey/repair_order/",
                    !Sub "s3://integrations-${AWS::Region}-test/reyrey/repair_order/",
                  ]
            EventQueueArn: !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:integrations-s3-queue-${AWS::Region}-${Environment}'
      SchemaChangePolicy:
        UpdateBehavior: 'UPDATE_IN_DATABASE'
        DeleteBehavior: 'LOG'
      Configuration: '{"Version":1.0,"CrawlerOutput":{"Partitions":{"AddOrUpdateBehavior":"InheritFromTable"},"Tables":{"AddOrUpdateBehavior":"MergeNewColumns"}},"Grouping":{"TableGroupingPolicy":"CombineCompatibleSchemas"}}'

  UniversalIntegrationETL:
    Type: AWS::Glue::Job
    Properties:
      Description: ETL job to run after the universal integration crawler
      Name: !Sub 'universal-integration-etl-${Environment}'
      Role: !GetAtt UniversalIntegrationsGlueRole.Arn
      GlueVersion: 3.0
      Command:
        Name: glueetl
        PythonVersion: 3
        ScriptLocation: !Sub 's3://aws-glue-assets-universal-integrations/glue_etl_job/reyrey_etl.py'
      DefaultArguments: 
        '--job-bookmark-option': 'job-bookmark-enable'
        '--TempDir': !Sub 's3://aws-glue-assets-universal-integrations/temporary/'
        '--db_name': !Ref UniversalIntegrationCrawlerDB
        '--catalog_table_names': "universalintegrationcrawlerdb_fi_closed_deal,universalintegrationcrawlerdb_repair_order"
        '--catalog_connection': !Ref RDSConnection
        '--environment': !Ref Environment
        '--additional-python-modules': 'psycopg2-binary==2.9.3'

  UniversalIntegrationGlueWorkflow:
    Type: AWS::Glue::Workflow
    Properties: 
      Description: Workflow for orchestrating glue universal integration jobs
      Name: !Sub 'universal-integrations-glue-workflow-${Environment}'

  # UniversalIntegrationGlueWorkflowStartTrigger:
  #   Type: AWS::Glue::Trigger
  #   Properties:
  #     Name: !Sub 'universal-integrations-glue-start-${Environment}'
  #     Type: SCHEDULED
  #     Description: Trigger for starting the universal integration glue workflow
  #     Schedule: cron(0 10 * * ? *)
  #     StartOnCreation: true
  #     Actions:
  #       - CrawlerName: !Ref UniversalIntegrationCrawler
  #     WorkflowName: !Ref UniversalIntegrationGlueWorkflow

  UniversalIntegrationGlueWorkflowJobTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: !Sub 'universal-integration-glue-crawler-success-${Environment}'
      Type: CONDITIONAL
      Description: Trigger to start the unverisal integration glue job
      StartOnCreation: true
      Actions:
        - JobName: !Ref UniversalIntegrationETL
      Predicate:
        Conditions:
          - LogicalOperator: EQUALS
            CrawlerName: !Ref UniversalIntegrationCrawler
            CrawlState: SUCCEEDED
      WorkflowName: !Ref UniversalIntegrationGlueWorkflow

  RDSConnection:
    Type: AWS::Glue::Connection
    Properties: 
      CatalogId: !Ref AWS::AccountId
      ConnectionInput: 
        ConnectionProperties:
          Name: 'UniversalIntegrationConnection'
          Type: JDBC
          JDBC_CONNECTION_URL: !Sub '{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-1:${AWS::AccountId}:secret:test/DMSDB:SecretString:jdbc_url}}' # TODO: migrate univ
          USERNAME: !Sub '{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-1:${AWS::AccountId}:secret:test/DMSDB:SecretString:user}}' # TODO: migrate univ
          PASSWORD: !Sub '{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-1:${AWS::AccountId}:secret:test/DMSDB:SecretString:password}}' # TODO: migrate univ
        ConnectionType: JDBC

  ReyreyCrawlerAlert:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Alert for when ReyRey Glue Crawler fails
      State: ENABLED
      EventPattern:
        source:
          - aws.glue
        detail-type:
          - "Glue Crawler State Change"
        detail:
          state:
            - "Failed"
          crawlerName:
            - !Ref UniversalIntegrationCrawler
      Targets:
        - Arn: !Ref TopicUnivClientEngineeringAlertTopic
          Id: !Sub ReyreyCrawlerAlert-target-${Environment}

  ReyreyETLAlert:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Alert for when ReyRey Glue ETL fails
      State: ENABLED
      EventPattern:
        source:
          - aws.glue
        detail-type:
          - "Glue Job State Change"
        detail:
          state:
            - "Failed"
          jobName:
            - !Ref UniversalIntegrationETL
      Targets:
        - Arn: !Ref TopicUnivClientEngineeringAlertTopic
          Id: !Sub ReyreyETLAlert-target-${Environment}

  AlertTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Sid: AllowSNS
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: 'sns:Publish'
            Resource:
              - !Ref TopicUnivClientEngineeringAlertTopic
      Topics:
        - !Ref TopicUnivClientEngineeringAlertTopic

  TopicUnivClientEngineeringAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: alert_client_engineering
      Subscription:
        - Endpoint: !If [ IsProd, 
                    "impel_alert_client_engineering@impel.io",
                    "ken@impel.io",
                  ]
          Protocol: email
      TopicName: alert_client_engineering
