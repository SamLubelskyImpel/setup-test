AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: shared CDPI resources

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: '^[a-zA-z0-9-]+$'
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens

Conditions:
  IsProd:
    Fn::Equals:
    - Ref: AWS::AccountId
    - 196800776222
  IsUsEast1: !Equals [ !Ref 'AWS::Region', 'us-east-1' ]

Mappings:
  ProductAccountsArn:
    sales-ai:
      '196800776222': 'arn:aws:iam::078045093221:root'
      '143813444726': 'arn:aws:iam::856787491001:root'
    service-ai:
      '196800776222': 'arn:aws:iam::261695625069:root'
      '143813444726': 'arn:aws:iam::261695625069:root'
  Subnets:
    us-east-1:
      '196800776222':
        - subnet-0d29a385efe83bf1c
        - subnet-0e88ecdd743701e96
        - subnet-00291e028e21cb78f
        - subnet-0b1555d5fa3c8ba8e
      '143813444726':
        - subnet-030d57e39ec0df603
        - subnet-01044d580678ea63c
        - subnet-0b29db0aeb6cdabec
        - subnet-0e28d592f2ca28fb7
  VpcId:
    us-east-1:
      '196800776222': vpc-03417e688cee5bc07
      '143813444726': vpc-0b28df8980a1905d5
  SslCertificates:
    us-east-1:
      '143813444726': 'arn:aws:acm:us-east-1:143813444726:certificate/9f026b43-c690-4434-93e1-9be4ef91f67d'
      '196800776222': 'arn:aws:acm:us-east-1:196800776222:certificate/4bad36e0-d971-41e6-a2d8-a897013012be'

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Sub '${AWS::AccountId}'
        ENVIRONMENT: !Ref Environment
        IS_PROD: !If [ IsProd, 1, 0 ]
        LOGLEVEL: INFO
    VpcConfig:
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetIds: !FindInMap [ Subnets, !Ref 'AWS::Region', !Ref 'AWS::AccountId' ]

Resources:
  SharedBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub 'cdpi-shared-${AWS::Region}-${Environment}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: !If [ IsProd, Enabled, Suspended ]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        TopicConfigurations:
          - Event: s3:ObjectCreated:*
            Topic: !Ref SharedS3ToSNSTopic
    DependsOn: SharedS3ToSNSPolicy

  SharedS3ToSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub 'cdpi-shared-sns-s3-topic-${AWS::Region}-${Environment}'
      TopicName: !Sub 'cdpi-shared-sns-s3-topic-${AWS::Region}-${Environment}'

  SharedS3ToSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Id: !Sub 'cdpi-shared-sns-s3-policy-${AWS::Region}-${Environment}'
        Statement:
        - Sid: S3ToSNS
          Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action:
            - SNS:Publish
          Resource: !Ref SharedS3ToSNSTopic
          Condition:
            ArnLike:
              aws:SourceArn: !Sub 'arn:aws:s3:::cdpi-shared-${AWS::Region}-${Environment}'
      Topics:
        - Ref: SharedS3ToSNSTopic

  SalesAIRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'cdpi-sales-ai-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !FindInMap [ ProductAccountsArn, 'sales-ai', !Ref 'AWS::AccountId' ]
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AccessSharedBucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:*
                Resource:
                  - !Sub "arn:aws:s3:::cdpi-shared-${AWS::Region}-${Environment}/customer-inbound/sales-ai/*"
              - Effect: "Allow"
                Action:
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::cdpi-shared-${AWS::Region}-${Environment}"

  ServiceAIRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'cdpi-service-ai-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !FindInMap [ ProductAccountsArn, 'service-ai', !Ref 'AWS::AccountId' ]
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AccessSharedBucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:*
                Resource:
                  - !Sub "arn:aws:s3:::cdpi-shared-${AWS::Region}-${Environment}/customer-inbound/service-ai/*"
              - Effect: "Allow"
                Action:
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::cdpi-shared-${AWS::Region}-${Environment}"

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Permit traffic from the shared cdpi integrations
      VpcId: !FindInMap [ VpcId, !Ref 'AWS::Region', !Ref 'AWS::AccountId']
      SecurityGroupEgress:
        - Description: AllowAll
          CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: shared-cdpi-integrations

  RDSInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "cdpi integration shared rds access"
      GroupId: !If [ IsProd,
                      'sg-00e12bc4c116eb820',
                      'sg-00b911ee260ce5153'
                    ]
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: AccessSecretsManager
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !If [
                      IsProd,
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/CDPI/DB/application*",
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/CDPI/DB/application*",
                    ]
        - PolicyName: LambdaVPCAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"
    
  CdpiOrmLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "cdpi_orm_layer-${Environment}"
      Description: CDPI Orm Layer
      ContentUri: ./layers/cdpi_orm
      CompatibleRuntimes:
        - python3.9
      LicenseInfo: MIT
      RetentionPolicy: Retain