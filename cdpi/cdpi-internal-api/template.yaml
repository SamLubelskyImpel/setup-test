AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: API for cdpi database

Parameters:
  Environment:
    Description: The name of the runtime environment (e.g., dev, prod)
    Type: String
    AllowedPattern: "^[a-zA-Z0-9-]+$"
    ConstraintDescription: Must contain only letters, numbers, or hyphens

Conditions:
  IsProd: !Equals [ !Ref Environment, prod ]

Mappings:
  Subnets:
    us-east-1:
      '196800776222':
        - subnet-0d29a385efe83bf1c
        - subnet-0e88ecdd743701e96
        - subnet-00291e028e21cb78f
        - subnet-0b1555d5fa3c8ba8e
      '143813444726':
        - subnet-030d57e39ec0df603
        - subnet-01044d580678ea63c
        - subnet-0b29db0aeb6cdabec
        - subnet-0e28d592f2ca28fb7
  VpcId:
    us-east-1:
      '196800776222': vpc-03417e688cee5bc07
      '143813444726': vpc-0b28df8980a1905d5
  SslCertificates:
    us-east-1:
      '143813444726': 'arn:aws:acm:us-east-1:143813444726:certificate/9f026b43-c690-4434-93e1-9be4ef91f67d'
      '196800776222': 'arn:aws:acm:us-east-1:196800776222:certificate/4bad36e0-d971-41e6-a2d8-a897013012be'


Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        LOGLEVEL: INFO
    VpcConfig:
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetIds: !FindInMap [ Subnets, !Ref 'AWS::Region', !Ref 'AWS::AccountId' ]

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Permit traffic from the CRM internal API
      VpcId: !FindInMap [VpcId, !Ref "AWS::Region", !Ref "AWS::AccountId"]
      SecurityGroupEgress:
        - Description: AllowAll
          CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: crm-internal-api

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AccessSecretsManager
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !If 
                    - IsProd
                    - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/CDPI/cdpi-api*"
                    - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/CDPI/cdpi-api*"
                  - !If [
                      IsProd,
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/CDPI/DB/application*",
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/CDPI/DB/application*",
                    ]
        - PolicyName: LambdaEC2ENIManagement
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                Resource: "*"
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  CdpiInternalApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Auth:
        DefaultAuthorizer: DefaultAuth
        Authorizers:
          DefaultAuth:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt Authorizer.Arn
            Identity:
              Headers:
                - partner_id
                - x_api_key
              Context:
                - resourcePath
              ReauthorizeEvery: 0
      AccessLogSetting:
        DestinationArn: !GetAtt APILogGroup.Arn
        Format: >-
          {"request_id" : "$context.requestId", "api_id" : "$context.apiId", "resource_path" : "$context.resourcePath", "resource_id" : "$context.resourceId", "http_method" : "$context.httpMethod", "source_ip" : "$context.identity.sourceIp", "user-agent" : "$context.identity.userAgent", "account_id" : "$context.identity.accountId", "api_key" : "$context.identity.apiKey", "caller" : "$context.identity.caller", "user" : "$context.identity.user", "user_arn" : "$context.identity.userArn"}
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: "./swagger/cdpi-api-oas.yaml"
        GatewayResponses:
          BAD_REQUEST_PARAMETERS:
            ResponseTemplates:
              application/json: '{"message": "$context.error.validationErrorString"}'
          BAD_REQUEST_BODY:
            ResponseTemplates:
              application/json: '{"message": "$context.error.validationErrorString"}'
          UNAUTHORIZED:
            ResponseTemplates:
              application/json: '{"message": "This request is unauthorized."}'
            StatusCode: "401"
          ACCESS_DENIED:
            ResponseTemplates:
              application/json: '{"message": "$context.authorizer.key"}'
            StatusCode: "403"
          DEFAULT_5xx:
            ResponseTemplates:
              application/json: '{"message": "Internal Server Error. Please contact Impel support."}'

  APILogGroup:
    Type: AWS::Logs::LogGroup

  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "cdpi-api-${Environment}-Authorizer"
      CodeUri: app/
      Handler: authorizer.lambda_handler
      Timeout: 60
      MemorySize: 1024
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Sid: AllowGetAPIKeys
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !If 
                  - IsProd
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/CDPI/cdpi-api*"
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/CDPI/cdpi-api*"

  DealerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "cdpi-api-${Environment}-Dealer"
      CodeUri: app/
      Handler: main.lambda_handler
      Timeout: 60
      Runtime: python3.9
      Role: !GetAtt LambdaRole.Arn
      Layers:
        - !If [
            IsProd,
            !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:cdpi_orm_layer-prod:4",
            !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:cdpi_orm_layer-test:15"
          ]
      Events:
        GetDealer:
          Type: Api
          Properties:
            Path: /dealer
            Method: GET
            RestApiId: !Ref CdpiInternalApi
        PostDealer:
          Type: Api
          Properties:
            Path: /dealer
            Method: POST
            RestApiId: !Ref CdpiInternalApi
        PutDealer:
          Type: Api
          Properties:
            Path: /dealer
            Method: PUT
            RestApiId: !Ref CdpiInternalApi
