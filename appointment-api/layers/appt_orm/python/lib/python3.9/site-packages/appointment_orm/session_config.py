"""Create reusable sqlalchemy session object."""
import traceback
from builtins import object
from os import environ
from typing import Any, Dict, Tuple, Type

from appt_orm import create_db_uri

from sqlalchemy import MetaData, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.engine import Engine
from sqlalchemy.orm.session import Session, sessionmaker

assert environ["ENVIRONMENT"], "Environment variable `ENVIRONMENT` was not defined"

env = environ["ENVIRONMENT"]

_Sessions: Dict[str, Tuple[Engine, Type[Session]]] = {}
BaseForModels = declarative_base(
    metadata=MetaData(schema=env if env in ("test", "stage", "prod") else "test")
)


class DBSession(object):
    """Create reusable sqlalchemy session object."""

    def __init__(self) -> None:
        """Create DB Session."""
        self.uri: str = create_db_uri(env)
        if self.uri in _Sessions:
            self.engine, self.Session = _Sessions[self.uri]
        else:
            self.engine = create_engine(
                self.uri,
                pool_recycle=300,
                connect_args={"options": "-c timezone=UTC"}
            )
            self.Session = sessionmaker(bind=self.engine)
            _Sessions[self.uri] = (self.engine, self.Session)
        self.__state: str = "pre-open"

    def __enter__(self) -> 'DBSession':
        """Initialize DB Session."""
        if self.__state != "pre-open":
            raise RuntimeError("this session was already used in a context manager")
        self.session: Session = self.Session()
        self.__state = "open"
        return self

    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
        """Close DB Session."""
        self.__state = "closed"
        try:
            self.session.close()
        except Exception:
            traceback.print_exc()

    def __getattr__(self, name: str) -> Any:
        """Return DB session attributes."""
        if self.__state != "open":
            raise RuntimeError("using session that is not open")
        return getattr(self.session, name)

    def query(self, *args: Any, **kwds: Any) -> Any:
        """Return a new query object that uses this wrapper as the session."""
        return self.session.query(*args, **kwds).with_session(self)
