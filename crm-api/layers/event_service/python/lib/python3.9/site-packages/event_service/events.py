from datetime import datetime, timezone
import logging
from os import environ
from enum import Enum
import boto3
from json import dumps

from event_service.event_bus import send_event, generate_event_id


SNS_TOPIC_ARN = environ.get("SNS_TOPIC_ARN")

logger = logging.getLogger()
logger.setLevel(environ.get("LOGLEVEL", "INFO").upper())


class Event(Enum):
    Created = 'created'
    Updated = 'updated'


class Resource(Enum):
    Lead = 'lead'
    Activity = 'activity'


def send_alert_notification(message, subject) -> None:
    """Send alert notification to CE team."""
    sns_client = boto3.client('sns')
    sns_client.publish(
        TopicArn=SNS_TOPIC_ARN,
        Message=dumps({'default': dumps({"message": message})}),
        Subject=f'WBNS: {subject}',
        MessageStructure='json'
    )


def dispatch_event(request_product: str, partner: str, event: Event, content: object, resource: Resource):
    event_type = f'integrations.crm.{"chatai" if request_product == "chat_ai" else "salesai"}.{resource.value}.{event.value}'
    event = {
        'event_id': generate_event_id(),
        'event_type': event_type,
        'client_id': partner,
        'product_name': 'INTEGRATIONS_CRM',
        'event_content': {
            **content,  # type: ignore
            'created_ts': datetime.now(timezone.utc).isoformat(),
        }
    }  # type: ignore

    try:
        send_event('com.impel.crm-api', { 'events': [event] })
    except Exception as e:
        logger.exception(f'Failed to dispatch WBNS event {event}')
        send_alert_notification(
            message=f"Error occurred while dispatching event {event}: {e}",
            subject="CRM Event Failure Alert"
        )
