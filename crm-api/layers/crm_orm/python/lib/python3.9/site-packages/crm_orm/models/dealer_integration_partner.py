"""Dealer Integration Partner Model."""

from sqlalchemy import Boolean, Column, DateTime, ForeignKey, Integer
from sqlalchemy.orm import relationship
from typing import Dict, Any
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy.ext.mutable import MutableDict
from crm_orm.session_config import BaseForModels
from crm_orm.models.integration_partner import IntegrationPartner
from crm_orm.models.dealer import Dealer


class DealerIntegrationPartner(BaseForModels):  # type: ignore
    """Dealer Integration Partner Model."""

    __tablename__ = "crm_dealer_integration_partner"

    id = Column(Integer, primary_key=True, autoincrement=True)
    crm_dealer_id = Column(Integer)
    integration_partner_id = Column(Integer, ForeignKey("crm_integration_partner.id"))
    integration_partner = relationship(IntegrationPartner)

    dealer_id = Column(Integer, ForeignKey("crm_dealer.id"))
    dealer = relationship(Dealer)

    is_active = Column(Boolean, default=True)
    metadata_ = Column("metadata", MutableDict.as_mutable(JSONB))  # type: ignore
    db_creation_date = Column(DateTime)
    db_update_date = Column(DateTime)

    def as_dict(self) -> Dict[str, Any]:
        """Return attributes of the keys in the table."""
        return {
            key.name: getattr(self, key.name)
            for key in self.__table__.columns
        }
