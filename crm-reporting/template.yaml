AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CRM Reporting

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: '^[a-zA-z0-9-]+$'
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens

Conditions:
  IsProd:
    Fn::Equals:
    - Ref: AWS::AccountId
    - 196800776222
  IsUsEast1: !Equals [ !Ref 'AWS::Region', 'us-east-1' ]

Mappings:
  VpcId:
    us-east-1:
      '196800776222': vpc-03417e688cee5bc07
      '143813444726': vpc-0b28df8980a1905d5
  Subnets:
    us-east-1:
      '196800776222':
        - subnet-0d29a385efe83bf1c
        - subnet-0e88ecdd743701e96
        - subnet-00291e028e21cb78f
        - subnet-0b1555d5fa3c8ba8e
      '143813444726':
        - subnet-030d57e39ec0df603
        - subnet-01044d580678ea63c
        - subnet-0b29db0aeb6cdabec
        - subnet-0e28d592f2ca28fb7
  SslCertificates:
    us-east-1:
      '143813444726': 'arn:aws:acm:us-east-1:143813444726:certificate/9f026b43-c690-4434-93e1-9be4ef91f67d'
      '196800776222': 'arn:aws:acm:us-east-1:196800776222:certificate/4bad36e0-d971-41e6-a2d8-a897013012be'

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Sub '${AWS::AccountId}'
        ENVIRONMENT: !Ref Environment
        IS_PROD: !If [ IsProd, 1, 0 ]
        LOGLEVEL: INFO
    VpcConfig:
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetIds: !FindInMap [ Subnets, !Ref 'AWS::Region', !Ref 'AWS::AccountId' ]        

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaEC2ENIManagement
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                Resource: "*"
        - PolicyName: S3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:*Object
                Resource:
                  - !If [ IsProd,
                      !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                      !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                    ]
        - PolicyName: CloudWatchPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*" 
        - PolicyName: SecretsManagerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !If [ IsProd,
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/DMSDB*",
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/DMSDB*"
                      ]
        - PolicyName: SNSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
                  - !Ref CRMReportingSnsTopic

  CRMSemiDailyAlert:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub crm-reporting-${Environment}-SemiDailyAlert
      CodeUri: app/
      Timeout: 30
      Handler: crm_semidaily_alert.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref CRMReportingSnsTopic
  
  CRMSemiDailyErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub crm-reporting-${Environment}-SemiDailyAlert
      AlarmDescription: Semi-daily Alert failed 1 time within 15 minutes
      ActionsEnabled: true
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref CRMSemiDailyAlert
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 900
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  CRMSemiDailyAlertDeadletterQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800
      VisibilityTimeout: 10

  CRMSemiDailyAlertScheduledEvent:
    Type: AWS::Events::Rule
    Properties:
      State: !If [ IsProd, ENABLED, DISABLED ]
      ScheduleExpression: cron(0 12,0 * * ? *)
      Description: Runs CRM alerting semi-daily
      Targets:
        - Id: CRMSemiDailyAlertFunctionTarget
          Arn: !GetAtt CRMSemiDailyAlert.Arn
          DeadLetterConfig:
            Arn: !GetAtt CRMSemiDailyAlertDeadletterQueue.Arn

  CRMSemiAlertFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CRMSemiDailyAlert.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CRMSemiDailyAlertScheduledEvent.Arn

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Permit traffic from the crm reporting
      VpcId: !FindInMap [ VpcId, !Ref 'AWS::Region', !Ref 'AWS::AccountId']
      SecurityGroupEgress:
        - Description: AllowAll
          CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: crm-alerting

  RDSInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "crm alerting rds access"
      GroupId: !If [ IsProd, 
                      'sg-00e12bc4c116eb820',
                      'sg-00b911ee260ce5153'
                    ]
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId

  CRMReportingSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub crm-reporting-topic-${Environment}

  # SupportSnsSubscription:
  #   Type: AWS::SNS::Subscription
  #   Properties:
  #     Endpoint: !If [IsProd, 'support@impel.io', 'srwoods@impel.ai']
  #     Protocol: email
  #     TopicArn: !Ref CRMReportingSnsTopic

  # SupportAISnsSubscription:
  #   Type: AWS::SNS::Subscription
  #   Properties:
  #     Endpoint: !If [IsProd, 'aisupportalerts@impel.io', 'srwoods@impel.ai']
  #     Protocol: email
  #     TopicArn: !Ref CRMReportingSnsTopic

  CESnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !If [IsProd, 'impel_alert_client_engineering@impel.io', 'srwoods@impel.io']
      Protocol: email
      TopicArn: !Ref CRMReportingSnsTopic
      # FilterPolicy: '{"alert_type": ["client_engineering"]}'
  
  L3SnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !If [IsProd, 'l3support@impel.ai', 'srwoods@impel.io']
      Protocol: email
      TopicArn: !Ref CRMReportingSnsTopic
