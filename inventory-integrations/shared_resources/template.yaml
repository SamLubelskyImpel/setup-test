AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: shared inventory resources

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: '^[a-zA-z0-9-]+$'
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens

Conditions:
  IsProd:
    Fn::Equals:
    - Ref: AWS::AccountId
    - 196800776222
  IsUsEast1: !Equals [ !Ref 'AWS::Region', 'us-east-1' ]

Mappings:
  Subnets:
    us-east-1:
      '196800776222':
        - subnet-0d29a385efe83bf1c
        - subnet-0e88ecdd743701e96
        - subnet-00291e028e21cb78f
        - subnet-0b1555d5fa3c8ba8e
      '143813444726':
        - subnet-030d57e39ec0df603
        - subnet-01044d580678ea63c
        - subnet-0b29db0aeb6cdabec
        - subnet-0e28d592f2ca28fb7
  VpcId:
    us-east-1:
      '196800776222': vpc-03417e688cee5bc07
      '143813444726': vpc-0b28df8980a1905d5
  SslCertificates:
    us-east-1:
      '143813444726': 'arn:aws:acm:us-east-1:143813444726:certificate/9f026b43-c690-4434-93e1-9be4ef91f67d'
      '196800776222': 'arn:aws:acm:us-east-1:196800776222:certificate/4bad36e0-d971-41e6-a2d8-a897013012be'

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Sub '${AWS::AccountId}'
        ENVIRONMENT: !Ref Environment
        IS_PROD: !If [ IsProd, 1, 0 ]
        LOGLEVEL: INFO
        MERCH_FTP_KEY: MERCH_UPLOAD_FTP
        AI_FTP_KEY: AI_UPLOAD_FTP

Resources:
  InventoryIntegrationsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub 'inventory-integrations-${AWS::Region}-${Environment}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: !If [ IsProd, Enabled, Suspended ]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        TopicConfigurations:
          - Event: s3:ObjectCreated:*
            Topic: !Ref InventoryS3ToSNSTopic
    DependsOn: InventoryS3ToSNSPolicy

  InventoryS3ToSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub 'inventory-integrations-sns-s3-topic-${AWS::Region}-${Environment}'
      TopicName: !Sub 'inventory-integrations-sns-s3-topic-${AWS::Region}-${Environment}'

  InventoryS3ToSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Id: !Sub 'inventory-integrations-sns-s3-policy-${AWS::Region}-${Environment}'
        Statement:
        - Sid: S3ToSNS
          Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action:
            - SNS:Publish
          Resource: !Ref InventoryS3ToSNSTopic
          Condition:
            ArnLike:
              aws:SourceArn: !Sub 'arn:aws:s3:::inventory-integrations-${AWS::Region}-${Environment}'
      Topics:
        - Ref: InventoryS3ToSNSTopic

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: S3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - !Sub "arn:aws:s3:::inventory-integrations-${AWS::Region}-${Environment}*"
        - PolicyName: SQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sqs:SendMessage"
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource:
                - !GetAtt DirectUploadQueue.Arn
        - PolicyName: AccessSecretsManager
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !If [
                      IsProd,
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/inventory-integrations-ftp*",
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/inventory-integrations-ftp*",
                    ]
        - PolicyName: SNSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource:
                - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'

  DirectUploadQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'shared-inv-${Environment}-DirectUploadQueue'
      VisibilityTimeout: 60
      MessageRetentionPeriod: 1209600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DirectUploadDeadLetterQueue.Arn
        maxReceiveCount: 5
  
  DirectUploadDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'shared-inv-${Environment}-DirectUploadQueueDLQ'
      VisibilityTimeout: 10
      MessageRetentionPeriod: 1209600

  DirectUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub shared-inv-${Environment}-DirectUpload
      CodeUri: app/
      Handler: direct_upload.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 60
  
  DirectUploadEventMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt DirectUploadQueue.Arn
      MaximumBatchingWindowInSeconds: 0
      FunctionName: !GetAtt DirectUploadFunction.Arn
  
  DirectUploadTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      RawMessageDelivery: true
      TopicArn: !Ref InventoryS3ToSNSTopic
      Endpoint: !GetAtt DirectUploadQueue.Arn
      FilterPolicyScope: MessageBody
      FilterPolicy:
        '{"Records":{"s3":{"object":{"key":[{"prefix":"unified"}]}},"eventName":[{"prefix":"ObjectCreated:"}]}}'

  DirectUploadQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref DirectUploadQueue
      PolicyDocument:
          Version: '2012-10-17'
          Id: DirectUploadQueuePolicy
          Statement:
            - Sid: Allow-SNS-SendMessage
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt DirectUploadQueue.Arn
              Principal:
                  Service: sns.amazonaws.com
              Condition:
                  ArnEquals:
                      aws:SourceArn: !Ref InventoryS3ToSNSTopic