AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cox AU inventory integration

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: '^[a-zA-z0-9-]+$'
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens

Conditions:
  IsProd:
    Fn::Equals:
    - Ref: AWS::AccountId
    - 196800776222
  IsUsEast1: !Equals [ !Ref 'AWS::Region', 'us-east-1' ]

Mappings:
  Subnets:
    us-east-1:
      '196800776222':
        - subnet-0d29a385efe83bf1c
        - subnet-0e88ecdd743701e96
        - subnet-00291e028e21cb78f
        - subnet-0b1555d5fa3c8ba8e
      '143813444726':
        - subnet-030d57e39ec0df603
        - subnet-01044d580678ea63c
        - subnet-0b29db0aeb6cdabec
        - subnet-0e28d592f2ca28fb7
  VpcId:
    us-east-1:
      '196800776222': vpc-03417e688cee5bc07
      '143813444726': vpc-0b28df8980a1905d5
  SslCertificates:
    us-east-1:
      '143813444726': 'arn:aws:acm:us-east-1:143813444726:certificate/9f026b43-c690-4434-93e1-9be4ef91f67d'
      '196800776222': 'arn:aws:acm:us-east-1:196800776222:certificate/4bad36e0-d971-41e6-a2d8-a897013012be'

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Sub '${AWS::AccountId}'
        ENVIRONMENT: !Ref Environment
        IS_PROD: !If [ IsProd, 1, 0 ]
        LOGLEVEL: INFO
        SFTP_SECRET_KEY: COXAU_SFTP
        INVENTORY_BUCKET: !Sub "inventory-integrations-${AWS::Region}-${Environment}"
    VpcConfig:
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetIds: !FindInMap [ Subnets, !Ref 'AWS::Region', !Ref 'AWS::AccountId' ]

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Permit traffic from the coxau inv integration
      VpcId: !FindInMap [ VpcId, !Ref 'AWS::Region', !Ref 'AWS::AccountId']
      SecurityGroupEgress:
        - Description: AllowAll
          CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: coxau-inv-integration

  RDSInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "coxau inventory integration rds access"
      GroupId: !If [ IsProd,
                      'sg-00e12bc4c116eb820',
                      'sg-00b911ee260ce5153'
                    ]
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: S3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - !Sub "arn:aws:s3:::inventory-integrations-${AWS::Region}-${Environment}*"
        - PolicyName: SQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sqs:SendMessage"
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource:
                - !GetAtt DownloadSFTPCoxAUQueue.Arn
        - PolicyName: AccessSecretsManager
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !If [
                      IsProd,
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/inventory-integrations-sftp*",
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/inventory-integrations-sftp*",
                    ]
                  - !If [ IsProd,
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/DMSDB*",
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/DMSDB*"
                      ]
        - PolicyName: SNSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource:
                - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
        - PolicyName: LambdaVPCAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"

  InvokeSFTPCoxAU:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub coxau-inv-${Environment}-InvokeSFTPCoxAU
      CodeUri: app/
      Handler: invoke_sftp_coxau.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          DOWNLOAD_QUEUE_URL: !GetAtt DownloadSFTPCoxAUQueue.QueueUrl

  InvokeSFTPCoxAULogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/coxau-inv-${Environment}-InvokeSFTPCoxAU'
      RetentionInDays: 60
  
  InvokeSFTPCoxAUErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub coxau-inv-${Environment}-InvokeSFTPCoxAU
      AlarmDescription: CoxAU SFTP Invoke failed to execute
      ActionsEnabled: true
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref InvokeSFTPCoxAU
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 900
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  DownloadSFTPCoxAU:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub coxau-inv-${Environment}-DownloadSFTPCoxAU
      CodeUri: app/
      Handler: download_sftp_coxau.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 60
      MemorySize: 1024

  DownloadSFTPCoxAULogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/coxau-inv-${Environment}-DownloadSFTPCoxAU'
      RetentionInDays: 60
  
  DownloadSFTPCoxAUErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub coxau-inv-${Environment}-DownloadSFTPCoxAU
      AlarmDescription: CoxAU SFTP Download failed to download and process files
      ActionsEnabled: true
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref DownloadSFTPCoxAU
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 900
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
  
  DownloadSFTPCoxAUDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'coxau-inv-${Environment}-DownloadSFTPCoxAUDLQ'
      VisibilityTimeout: 10
      MessageRetentionPeriod: 1209600
  
  DownloadSFTPCoxAUQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'coxau-inv-${Environment}-DownloadSFTPCoxAUQueue'
      VisibilityTimeout: 60
      MessageRetentionPeriod: 1209600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DownloadSFTPCoxAUDeadLetterQueue.Arn
        maxReceiveCount: 3

  DownloadSFTPCoxAUDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'coxau-inv-${Environment}-DownloadSFTPCoxAUDLQ'
      AlarmDescription: There are over 1 unprocessed messages in the CoxAU SFTP Download DLQ
      ActionsEnabled: true
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DownloadSFTPCoxAUDeadLetterQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 1
      TreatMissingData: notBreaching
  
  DownloadSFTPCoxAUEventMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt DownloadSFTPCoxAUQueue.Arn
      MaximumBatchingWindowInSeconds: 0
      FunctionName: !GetAtt DownloadSFTPCoxAU.Arn

  InvokeSFTPCoxAUScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Invoke SFTP Cox AU every hour"
      ScheduleExpression: "cron(0 */1 * * ? *)"
      State: !If [IsProd, "ENABLED", "DISABLED"]
      Targets:
        - Arn: !GetAtt InvokeSFTPCoxAU.Arn
          Id: "invoke_sftp_coxau_scheduled"
  
  InvokeSFTPCoxAUScheduleLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt InvokeSFTPCoxAU.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt InvokeSFTPCoxAUScheduleRule.Arn
