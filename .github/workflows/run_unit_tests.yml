name: CI Pipeline

on:
  pull_request:
    types: [opened, reopened, synchronize] # Trigger on new PRs, reopened PRs, or new commits to an open PR

env:
  AWS_REGION: us-east-1 # Set your default AWS region for the test environment
  TEST_ENVIRONMENT_NAME: test # The exact environment name your deploy.sh expects for 'test'

jobs:
  run-unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure full history for testing context

      - name: Identify Changed Services
        uses: ./.github/actions/find_changed_services/
        id: find-changed-services
        
      - name: Identify changed files
        uses: ./.github/actions/find_changed_files/
        id: find-changed-files

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Use a recent Python version

      - name: Setup AWS Config
        run: |
          mkdir -p ~/.aws
          printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\n" \
                 "${{ secrets.AWS_ACCESS_KEY_ID }}" \
                 "${{ secrets.AWS_SECRET_ACCESS_KEY }}" > ~/.aws/credentials
          printf "[default]\nregion = %s\nsource_profile = default\noutput = json\nrole_arn=%s\n" \
               "${{ secrets.AWS_REGION }}" \
               "${{ secrets.ROLE_ARN }}" > ~/.aws/config

      - name: Create coverage report directory
        run: |
          mkdir -p .reports

      - name: Run Pytest on all changed services
        run: |
          changed_services="${{ steps.find-changed-services.outputs.changed_services }}"
          echo "Changed services: $changed_services"
          if [ -z "$changed_services" ]; then
            echo "No services changed. Skipping unit tests."
            exit 0
          fi
          COMMON_DEPS="pytest moto coverage boto3 pytest-mock"
          for service_path in $changed_services; do
            echo "--- Running tests for service: $service_path ---"
            service_name="${service_path//\//-}"
            VENV_DIR=".venv-$service_name"

            rm -rf "$VENV_DIR"
            python3 -m venv "$VENV_DIR"
            source "$VENV_DIR/bin/activate"

            python3 -m venv "$VENV_DIR"
            source "$VENV_DIR/bin/activate"

            pip install $COMMON_DEPS
            SERVICE_REQUIREMENTS_FILE="${service_path}/app/requirements.txt"
            if [ -f "$SERVICE_REQUIREMENTS_FILE" ]; then
              echo "Installing service-specific dependencies from $SERVICE_REQUIREMENTS_FILE..."
              pip install -r "$SERVICE_REQUIREMENTS_FILE"
            else
              echo "No service-specific requirements.txt found at $SERVICE_REQUIREMENTS_FILE. Using only common dependencies."
            fi

            coverage run -m pytest $service_path/tests || true
            coverage xml -o .reports/coverage-${service_name}.xml || true

            deactivate
            echo "--- Finished tests for service: $service_path ---"
          done
        shell: bash # Explicitly use bash for this step

      - name: Run Ruff on all changed files
        continue-on-error: true
        run: |
          pip install ruff
          pip install flake8
          pip install flake8-json

          changed_files="${{ steps.find-changed-files.outputs.changed_files }}"
          echo "Changed files: $changed_files"

          PY_FILES=$(echo "$changed_files" | tr ' ' '\n' | grep '\.py$') || true
          PY_FILES=$(echo "$PY_FILES" | tr '\n' ' ')
          PY_FILES="${PY_FILES## }"
          echo "Changed .py files: $PY_FILES"

          if [ -z "$PY_FILES" ]; then
            echo "No changed .py files. Skipping ruff."
            exit 0
          fi
          echo "ruff check $PY_FILES"
          ruff check $PY_FILES || true
          echo "ruff check --format=json $PY_FILES"
          ruff check --format=json $PY_FILES > .reports/ruff-report.json || true
          echo "flake8 --format=json $PY_FILES"
          echo "flake8 $PY_FILES"
          echo "flake8 --format=json $PY_FILES"
          flake8 --format=json $PY_FILES > .reports/flake8-report.json
          
          
      - name: Run cfn-lint on all changed files
        continue-on-error: true
        run: |
          pip install cfn-lint

          changed_files="${{ steps.find-changed-files.outputs.changed_files }}"
          echo "Changed files: $changed_files"

          TEMPLATE_FILES=$(echo "$changed_files" | tr ' ' '\n' | grep 'template\.yaml$') || true
          TEMPLATE_FILES=$(echo "$TEMPLATE_FILES" | tr '\n' ' ')
          TEMPLATE_FILES="${TEMPLATE_FILES## }"
          echo "Changed template files: $TEMPLATE_FILES"

          if [ -z "$TEMPLATE_FILES" ]; then
            echo "No changed template files. Skipping cfn-lint."
            exit 0
          fi

          
          echo "cfn-lint $TEMPLATE_FILES"
          cfn-lint $TEMPLATE_FILES || true
          echo "cfn-lint --format json $TEMPLATE_FILES"
          cfn-lint --format json $TEMPLATE_FILES > .reports/cfn-lint-report.json
         

      - name: Display report files
        run: |
          ls -al .reports
          cat .reports/flake8-report.json
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarQube Quality Gate Check
        id: sonar-quality-gate-check
        uses: SonarSource/sonarqube-quality-gate-action@master
        with: 
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

