name: Run Unit Tests

on:
  pull_request:
    types: [opened, reopened, synchronize] # Trigger on new PRs, reopened PRs, or new commits to an open PR

env:
  AWS_REGION: us-east-1 # Set your default AWS region for the test environment
  TEST_ENVIRONMENT_NAME: test # The exact environment name your deploy.sh expects for 'test'

jobs:
  # Job 1: Identify all changed service directories that can be deployed
  identify-deployable-services:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find Changed Services
        uses: ./.github/actions/find_changed_services/
        id: find-changed-services

      # - name: Format Changed Services
      #   id: format-changed-services
      #   run: |
      #     RAW_CHANGED_SERVICES=${{ steps.find-changed-services.outputs.changed_services }}
      #     echo "RAW_CHANGED_SERVICES: $RAW_CHANGED_SERVICES"
      #     if [ -z "$RAW_CHANGED_SERVICES" ]; then
      #       echo "No changed services found"
      #       echo "changed_services=[]" >> $GITHUB_OUTPUT
      #     else  
      #       JSON_ARRAY=$(echo "$RAW_CHANGED_SERVICES" | jq -R -s -c 'split(" ") | map(select(length > 0))')
      #       echo "JSON_ARRAY: $JSON_ARRAY"
      #       echo "changed_services=$JSON_ARRAY" >> $GITHUB_OUTPUT
      #     fi
      #   shell: bash
    outputs:
      changed_services: ${{ steps.find-changed-services.outputs.changed_services }}

  # Job 2: Run Pytest on all files in STACK_DIRS_TO_DEPLOY
  run-unit-tests:
    needs: identify-deployable-services # This job depends on the output of the first job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure full history for testing context

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a recent Python version

      - name: Install packages
        run: |
          pip install pytest
          pip install moto
          pip install aws-lambda-powertools
          pip install coverage
          pip install boto3 
          pip install pytest-mock
      - name: Setup AWS Config
        run: |
          mkdir -p ~/.aws
          printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\n" \
                 "${{ secrets.AWS_ACCESS_KEY_ID }}" \
                 "${{ secrets.AWS_SECRET_ACCESS_KEY }}" > ~/.aws/credentials
          printf "[default]\nregion = %s\nsource_profile = default\noutput = json\nrole_arn=%s\n" \
               "${{ secrets.AWS_REGION }}" \
               "${{ secrets.ROLE_ARN }}" > ~/.aws/config
      - name: Run Pytest on all changed services
        run: |
          echo "Changed services: ${{ needs.identify-deployable-services.outputs.changed_services }}"
          for service in ${{ needs.identify-deployable-services.outputs.changed_services }}; do
            echo "Running pytest on $service"
            pytest $service/tests
          done
        shell: bash # Explicitly use bash for this step
