name: CI Pipeline

on:
  pull_request:
    types: [opened, reopened, synchronize] # Trigger on new PRs, reopened PRs, or new commits to an open PR

jobs:
  run-unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure full history for testing context

      - name: Identify Changed Files
        id: identify-changed-files
        run: |
          changed_files=$(git diff --name-only -r HEAD^1 HEAD) # Get all files changed in the whole PR (not just from the last commit)
          echo "changed_files: $changed_files"
          echo "changed_files=$changed_files" >> $GITHUB_OUTPUT

      - name: Identify changed services
        id: identify-changed-services
        run: |
          changed_services=""
          for file in ${{ steps.identify-changed-files.outputs.changed_files }}; do
            DIR_NAME=$(dirname $file)
            while [ "$DIR_NAME" != "." ]; do
              if [ -f "$DIR_NAME/template.yaml" ]; then
                if [[ ! "$changed_services" == *"$DIR_NAME"* ]]; then
                  echo "Adding $DIR_NAME to changed services"
                  changed_services="$DIR_NAME $changed_services"
                fi
                 break
              fi
              DIR_NAME=$(dirname $DIR_NAME)
            done
          done
          echo "changed_services: $changed_services"
          echo "changed_services=$changed_services" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Use a recent Python version

      - name: Upgrade pip
        run: |
          pip install --upgrade pip

      - name: Setup AWS Config
        run: |
          mkdir -p ~/.aws
          # Moto requires fake aws credentials to be set
          printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\n" \
                 "test-access-key-id" \
                 "test-secret-access-key" > ~/.aws/credentials
          printf "[default]\nregion = %s\nsource_profile = default\noutput = json\nrole_arn=%s\n" \
               "us-east-1" \
               "test-role-arn" > ~/.aws/config

      - name: Create coverage report directory
        run: |
          mkdir -p .reports

      - name: Run Pytest on all changed services
        run: |
          changed_services="${{ steps.identify-changed-services.outputs.changed_services }}"
          echo "Changed services: $changed_services"

          if [ -z "$changed_services" ]; then
            echo "No services changed. Skipping unit tests."
            exit 0
          fi

          common_deps="pytest moto coverage boto3 pytest-mock"

          for service_path in $changed_services; do
            echo "--- Running tests for service: $service_path ---"
            service_name="${service_path//\//-}"
            venv_dir=".venv-$service_name"

            rm -rf "$venv_dir"
            python3 -m venv "$venv_dir"
            source "$venv_dir/bin/activate"

            pip install $common_deps
            service_requirements_file="${service_path}/app/requirements.txt"
            if [ -f "$service_requirements_file" ]; then
              echo "Installing service-specific dependencies from $service_requirements_file..."
              pip install -r "$service_requirements_file"
            else
              echo "No service-specific requirements.txt found at $service_requirements_file. Using only common dependencies."
            fi

            coverage run -m pytest $service_path/tests
            coverage xml -o .reports/coverage-${service_name}.xml

            deactivate
            echo "--- Finished tests for service: $service_path ---"
          done
        shell: bash # Explicitly use bash for this step

      - name: Run flake8 on all changed files
        continue-on-error: true
        run: |
          pip install flake8

          changed_files="${{ steps.identify-changed-files.outputs.changed_files }}"
          echo "Changed files: $changed_files"

          py_files=$(echo "$changed_files" | tr ' ' '\n' | grep '\.py$') || true
          py_files=$(echo "$py_files" | tr '\n' ' ') # Convert newlines to spaces
          py_files="${py_files## }" # Remove trailing spaces
          echo "Changed .py files: $py_files"

          if [ -z "$py_files" ]; then
            echo "No changed .py files. Skipping ruff."
            exit 0
          fi

          echo "flake8 $py_files"
          flake8 $py_files || true
          echo "flake8 --format=pylint --output-file=.reports/flake8-report.txt $py_files"
          flake8 --format=pylint --output-file=.reports/flake8-report.txt $py_files
                
      - name: Run cfn-lint on all changed files
        continue-on-error: true
        run: |
          pip install cfn-lint

          changed_files="${{ steps.identify-changed-files.outputs.changed_files }}"
          echo "Changed files: $changed_files"

          template_files=$(echo "$changed_files" | tr ' ' '\n' | grep 'template\.yaml$') || true
          template_files=$(echo "$template_files" | tr '\n' ' ') # Convert newlines to spaces
          template_files="${template_files## }" # Remove trailing spaces
          echo "Changed template files: $template_files"

          if [ -z "$template_files" ]; then
            echo "No changed template files. Skipping cfn-lint."
            exit 0
          fi

          echo "cfn-lint $template_files" 
          cfn-lint $template_files || true
          echo "cfn-lint --format json $template_files"
          cfn-lint --format json $template_files > .reports/cfn-lint-report.json
         
      - name: Display report files
        run: |
          ls -al .reports

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarQube Quality Gate Check
        id: sonar-quality-gate-check
        uses: SonarSource/sonarqube-quality-gate-action@master
        with: 
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

