name: Run Unit Tests

on:
  pull_request:
    types: [opened, reopened, synchronize] # Trigger on new PRs, reopened PRs, or new commits to an open PR

env:
  AWS_REGION: us-east-1 # Set your default AWS region for the test environment
  TEST_ENVIRONMENT_NAME: test # The exact environment name your deploy.sh expects for 'test'

jobs:
  # Job 1: Identify all changed service directories that can be deployed
  identify-deployable-services:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find Changed Services
        uses: ./.github/actions/find_changed_services/
        id: find-changed-services

      - name: Format Changed Services
        id: format-changed-services
        run: |
          echo "changed_services=$(echo ${{ steps.find-changed-services.outputs.changed_services }} | tr ' ' '\n')" >> $GITHUB_OUTPUT
        shell: bash
    outputs:
      changed_services: ${{ steps.format-changed-services.outputs.changed_services }}

  # Job 2: Run Pytest on all files in STACK_DIRS_TO_DEPLOY
  run-unit-tests:
    needs: identify-deployable-services # This job depends on the output of the first job
    if: ${{ needs.identify-deployable-services.outputs.changed_services != '' }} # Only run if there are directories to test
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false # Do not cancel other tests if one fails
      matrix:
        # The matrix will iterate over each directory path provided by the first job
        stack_dir: ${{ needs.identify-deployable-services.outputs.changed_services }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure full history for testing context

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a recent Python version

      - name: Install packages
        run: |
          pip install pytest
          pip install moto
          pip install aws-lambda-powertools
          pip install coverage
          pip install boto3 
          pip install pytest-mock
      - name: Setup AWS Config
        run: |
          mkdir -p ~/.aws
          printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\n" \
                 "${{ secrets.AWS_ACCESS_KEY_ID }}" \
                 "${{ secrets.AWS_SECRET_ACCESS_KEY }}" > ~/.aws/credentials
          printf "[default]\nregion = %s\nsource_profile = default\noutput = json\nrole_arn=%s\n" \
               "${{ secrets.AWS_REGION }}" \
               "${{ secrets.ROLE_ARN }}" > ~/.aws/config
      - name: Run Pytest in ${{ matrix.stack_dir }}
        run: |
          set -euo pipefail # Ensure script exits on error

          # Change to the microservice directory identified by the matrix
          echo "Changing directory to: ${{ matrix.stack_dir }}"
          cd "${{ matrix.stack_dir }}"

          echo "Running pytest in $(pwd)..."
          # Run pytest. You might want to add specific options here, e.g., discovery options.
          # -k "not integration" example to skip integration tests if they are slow/require external services.
          # --cache-clear to ensure clean runs.
          # Using `set +e` to allow pytest to fail without immediately failing the step,
          # so we can report its specific exit code.
          set +e
          pytest_output=$(pytest --cache-clear 2>&1) # Capture output and stderr
          pytest_exit_code=$?
          set -e # Re-enable exit on error

          echo "$pytest_output" # Print pytest output

          if [ $pytest_exit_code -ne 0 ]; then
            echo "Pytest FAILED for ${{ matrix.stack_dir }}. Exit code: $pytest_exit_code"
            exit 1 # Fail the GitHub Actions step
          else
            echo "Pytest PASSED for ${{ matrix.stack_dir }}."
          fi
        shell: bash # Explicitly use bash for this step
