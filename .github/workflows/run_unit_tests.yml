name: Run Unit Tests

on:
  pull_request:
    types: [opened, reopened, synchronize] # Trigger on new PRs, reopened PRs, or new commits to an open PR
  push:
    branches:
      - master

env:
  AWS_REGION: us-east-1 # Set your default AWS region for the test environment
  TEST_ENVIRONMENT_NAME: test # The exact environment name your deploy.sh expects for 'test'

jobs:
  run-unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure full history for testing context
      - name: Identify Changed Services
        uses: ./.github/actions/find_changed_services/
        id: find-changed-services
      - name: Identify changed files
        uses: ./.github/actions/find_changed_files/
        id: find-changed-files
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a recent Python version
          
      - name: Install packages
        run: |
          pip install pytest
          pip install moto
          pip install aws-lambda-powertools
          pip install coverage
          pip install boto3 
          pip install pytest-mock
          pip install coverage
          pip install ruff
          pip install cfn-lint
      - name: Setup AWS Config
        run: |
          mkdir -p ~/.aws
          printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\n" \
                 "${{ secrets.AWS_ACCESS_KEY_ID }}" \
                 "${{ secrets.AWS_SECRET_ACCESS_KEY }}" > ~/.aws/credentials
          printf "[default]\nregion = %s\nsource_profile = default\noutput = json\nrole_arn=%s\n" \
               "${{ secrets.AWS_REGION }}" \
               "${{ secrets.ROLE_ARN }}" > ~/.aws/config
      - name: Create coverage report directory
        run: |
          mkdir -p .reports
      - name: Run Pytest on all changed services
        run: |
          changed_services="${{ steps.find-changed-services.outputs.changed_services }}"
          echo "Changed services: $changed_services"
          for service in $changed_services; do
            echo "Running pytest on $service"
            coverage run -m pytest $service/tests || true
            service_name="${service//\//-}"
            coverage xml -o .reports/coverage-${service_name}.xml || true
          done
        shell: bash # Explicitly use bash for this step
      - name: Run Ruff on all changed files
        run: |
          changed_files="${{ steps.find-changed-files.outputs.changed_files }}"
          echo "Changed files: $changed_files"
          PY_FILES=$(echo "$changed_files" | tr ' ' '\n' | grep '\.py$')
          PY_FILES=$(echo "$PY_FILES" | tr '\n' ' ')
          echo "Changed .py files: $PY_FILES"
          echo "ruff check -o .reports/ruff-report.json --output-format=json $PY_FILES || true"
          ruff check -o .reports/ruff-report.json --output-format=json $PY_FILES || true
      - name: Run cfn-lint on all changed files
        run: |
          changed_files="${{ steps.find-changed-files.outputs.changed_files }}"
          echo "Changed files: $changed_files"
          TEMPLATE_FILES=$(echo "$changed_files" | tr ' ' '\n' | grep 'template\.yaml$')
          TEMPLATE_FILES=$(echo "$TEMPLATE_FILES" | tr '\n' ' ')
          echo "Changed template files: $TEMPLATE_FILES"
          echo "cfn-lint --format json $TEMPLATE_FILES > .reports/cfn-lint-report.json || true"
          cfn-lint --format json $TEMPLATE_FILES > .reports/cfn-lint-report.json || true
      - name: Display report files
        run: |
          ls -al .reports
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: SonarQube Quality Gate Check
        id: sonar-quality-gate-check
        uses: SonarSource/sonarqube-quality-gate-action@master
        with: 
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

