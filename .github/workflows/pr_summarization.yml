name: Generate PR Summary

on:
  pull_request:
    types: [opened, reopened, synchronize] # Change this to only trigger on opened PRs in production

jobs:
  generate-pr-summary:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install requests
          pip install google-genai
    
      - name: Get Jira ticket number
        id: get-jira-ticket-number
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_DESCRIPTION: ${{ github.event.pull_request.body }}
        run: |
          import os
          import re
          
          # Get branch name from GitHub context
          branch_name = os.environ.get('GITHUB_HEAD_REF', '')  # For PRs
          if not branch_name:
              branch_name = os.environ.get('GITHUB_REF_NAME', '')  # Fallback for pushes
          
          print(f"Branch name: {branch_name}")
          
          # Look for Jira ticket in branch name
          regex = r"(scrum-\d{1,5})"
          match = re.search(regex, branch_name, re.IGNORECASE)
          jira_ticket = None
          if match:
              jira_ticket = match.group(1)
              print(f"Found Jira ticket: {jira_ticket}")
              # Set output for next steps
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"jira_ticket={jira_ticket}\n")
          # Look for Jira ticket in PR title
          if not jira_ticket:
              pr_title = os.environ.get('PR_TITLE', '')
              match = re.search(regex, pr_title, re.IGNORECASE)
              if match:
                  jira_ticket = match.group(1)
          # Look for Jira ticket in PR description
          if not jira_ticket:
              pr_description = os.environ.get('PR_DESCRIPTION', '')
              match = re.search(regex, pr_description, re.IGNORECASE)
              if match:
                  jira_ticket = match.group(1)
          if not jira_ticket:
              print("No Jira ticket found in branch name, PR title or PR description")
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write("jira_ticket=\n")
          else:
              jira_ticket = jira_ticket.upper()
              print(f"Found Jira ticket: {jira_ticket}")
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"jira_ticket={jira_ticket}\n")

        shell: python
      - name: Get git diff
        run: |
          git diff HEAD^1 HEAD > diff.txt
          cat diff.txt

      - name: Generate PR summary
        env:
          JIRA_TICKET: ${{ steps.get-jira-ticket-number.outputs.jira_ticket }}
          API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: | 
          import os
          from google import genai
          import requests
          import json
          
          def extract_text_from_jira_comment(comment_body):
            extracted_text = []

            def _traverse_content(content_list):
              for item in content_list:
                if item.get("type") == "text" and "text" in item:
                  extracted_text.append(item["text"])
                elif "content" in item and isinstance(item["content"], list):
                  _traverse_content(item["content"])

            _traverse_content(comment_body["content"])
            return "\n".join(extracted_text)

          API_KEY = os.environ['API_KEY']

          jira_ticket = os.environ.get('JIRA_TICKET', '')
          if jira_ticket:
            print(f"Jira ticket from previous step: {jira_ticket}")
          else: 
            print("No Jira ticket found in environment variables, proceeding without it.")

          jira_ticket_title = ""
          jira_ticket_description = ""
          jira_ticket_comments = ""
          if jira_ticket:
            try:
              print("Getting Jira ticket description from Jira API")
              jira_headers = {
                "Accept": "application/json"
              }
              jira_auth = ('sammy56lt@gmail.com', '${{ secrets.JIRA_API_KEY }}')
              response = requests.get(
                f"${{secrets.JIRA_BASE_URL}}/rest/api/3/issue/{jira_ticket}",
                headers=jira_headers,
                auth=jira_auth
              )
              response.raise_for_status()

              jira_ticket_title= response.json()['fields']['summary']
              jira_ticket_description = response.json()['fields'].get('description', '')
              print(f"Jira ticket title: {jira_ticket_title}")
              print(f"Jira ticket description: {jira_ticket_description}")

              response = requests.get(
                f"${{secrets.JIRA_BASE_URL}}/rest/api/3/issue/{jira_ticket}/comment",
                headers=jira_headers,
                auth=jira_auth
              )
              response.raise_for_status()
              formatted_comments = json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(",", ": "))
              print(f"Formatted comments: {formatted_comments}")
              raw_comments = json.loads(response.text)['comments']
              print(f"Raw comments: {json.dumps(raw_comments, sort_keys=True, indent=4, separators=(',', ': '))}")
              comments = [extract_text_from_jira_comment(x["body"]) for x in raw_comments]
              jira_ticket_comments = "\n\n".join(comments)

              print(f"Jira ticket comments: {jira_ticket_comments}" )
            except Exception as e:
              print(f"Error getting Jira ticket information: {e}")

          with open('diff.txt', 'r') as f:
            diff = f.read()
          with open('.github/prompts/pr_summarization_instructions.txt', 'r') as f:
            instructions = f.read()

          full_prompt = f"""  
          {instructions}
          {diff}
          """

          if jira_ticket_title:
            full_prompt += f"\nJira ticket title: {jira_ticket_title}"
          if jira_ticket_description:
            full_prompt += f"\nJira ticket description: {jira_ticket_description}"
          if jira_ticket_comments:
            full_prompt += f"\nJira ticket comments: {jira_ticket_comments}"
          print("Full prompt:")
          print(full_prompt[-1000:])
          print("--------------------------------")
          client = genai.Client(api_key=API_KEY)
          response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=full_prompt
          )
          print("Truncated PR summary:")
          print(response.text[:1000])

          comment_body = response.text

          if not jira_ticket_title:
            jira_ticket_reminder = """
            This PR does not have a Jira ticket associated with it.  To improve the quality of the PR summary, 
            in the future please add a JIRA ticket to the PR title, description or branch name.
            """
            comment_body = jira_ticket_reminder + "\n\n" + comment_body

          response = requests.post(
            f"https://api.github.com/repos/${{github.repository}}/issues/${{github.event.pull_request.number}}/comments",
            headers={
              "Authorization": f"Bearer ${{ secrets.GITHUB_TOKEN }}"
            },
            json={"body": comment_body}
          )
          print(f"Response: {response.text}")
          print(f"Response status code: {response.status_code}")
          response.raise_for_status()
        shell: python