name: Generate PR Summary

on:
  pull_request:
    types: [opened, reopened, synchronize] # Change this to only trigger on opened PRs in production

jobs:
  generate-pr-summary:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install requests
          pip install google-genai
    
      - name: Get Jira ticket number
        id: get-jira-ticket-number
        run: |
          import os
          import re
          import sys
          import json
          
          # Get branch name from GitHub context
          branch_name = os.environ.get('GITHUB_HEAD_REF', '')  # For PRs
          if not branch_name:
              branch_name = os.environ.get('GITHUB_REF_NAME', '')  # Fallback for pushes
          
          # Get PR title and description from GitHub context
          github_event = json.loads(os.environ.get('GITHUB_EVENT_PATH', '{}'))
          pr_title = github_event.get('pull_request', {}).get('title', '')
          pr_description = github_event.get('pull_request', {}).get('body', '') or ''
          
          print(f"Branch name: {branch_name}")
          print(f"PR title: {pr_title}")
          print(f"PR description length: {len(pr_description)} chars")
          
          # Look for Jira ticket in branch name, PR title, and PR description
          regex = r"(scrum-\d{1,5})"
          jira_ticket = None
          source = None
          
          # Check branch name first (highest priority)
          branch_match = re.search(regex, branch_name, re.IGNORECASE)
          if branch_match:
              jira_ticket = branch_match.group(1)
              source = "branch name"
          
          # Check PR title if not found in branch
          if not jira_ticket:
              title_match = re.search(regex, pr_title, re.IGNORECASE)
              if title_match:
                  jira_ticket = title_match.group(1)
                  source = "PR title"
          
          # Check PR description if not found in branch or title
          if not jira_ticket:
              desc_match = re.search(regex, pr_description, re.IGNORECASE)
              if desc_match:
                  jira_ticket = desc_match.group(1)
                  source = "PR description"
          
          if jira_ticket:
              print(f"Found Jira ticket: {jira_ticket} (from {source})")
              # Set output for next steps
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"jira_ticket={jira_ticket}\n")
          else:
              print("No Jira ticket found in branch name, PR title, or PR description")
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write("jira_ticket=\n")
                  f.write("jira_source=\n")
        shell: python