name: Generate PR Summary

on:
  pull_request:
    types: [opened, reopened, synchronize] # Change this to only trigger on opened PRs in production

jobs:
  generate-pr-summary:
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install requests
          pip install google-genai
    
      # - name: Get Jira ticket number
      #   id: get-jira-ticket-number
      #   run: |
      #     import os
      #     import re
          
      #     # Get branch name from GitHub context
      #     branch_name = os.environ.get('GITHUB_HEAD_REF', '')  # For PRs
      #     if not branch_name:
      #         branch_name = os.environ.get('GITHUB_REF_NAME', '')  # Fallback for pushes
          
      #     print(f"Branch name: {branch_name}")
          
      #     # Look for Jira ticket in branch name
      #     regex = r"(scrum-\d{1,5})"
      #     match = re.search(regex, branch_name, re.IGNORECASE)
          
      #     if match:
      #         jira_ticket = match.group(1)
      #         print(f"Found Jira ticket: {jira_ticket}")
      #         # Set output for next steps
      #         with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
      #             f.write(f"jira_ticket={jira_ticket}\n")
      #     else:
      #         print("No Jira ticket found in branch name")
      #         with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
      #             f.write("jira_ticket=\n")
      #   shell: python
      - name: Get git diff
        run: |
          git diff HEAD^1 HEAD > diff.txt
          cat diff.txt

      - name: Generate PR summary
        env:
          # JIRA_TICKET: ${{ steps.get-jira-ticket-number.outputs.jira_ticket }}
          API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: | 
          import os
          from google import genai
          import requests
          API_KEY = os.environ['API_KEY']
          print(f"API_KEY: {API_KEY}")
          # Access the variables from environment
          jira_ticket = os.environ.get('JIRA_TICKET', '')
          
          print(f"Jira ticket from previous step: {jira_ticket}")

          client = genai.Client(api_key=API_KEY)
          with open('diff.txt', 'r') as f:
            diff = f.read()
          with open('.github/prompts/pr_summarization_instructions.txt', 'r') as f:
            instructions = f.read()
          full_prompt = f"""  
          {instructions}
          {diff}
          """
          response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=full_prompt
          )
          print(response.text)
          with open('pr_summary.txt', 'w') as f:
            f.write(response.text)
          
          print("Url: https://api.github.com/repos/${{github.repository}}/issues/${{github.event.pull_request.number}}/comments")
          print("Github token: ${{ secrets.GITHUB_TOKEN }}")
          response = requests.post(
            f"https://api.github.com/repos/${{github.repository}}/issues/${{github.event.pull_request.number}}/comments",
            headers={
              "Authorization": f"Bearer ${{ secrets.GITHUB_TOKEN }}"
            },
            json={"body": response.text}
          )
          print(f"Response: {response.text}")
          print(f"Response status code: {response.status_code}")
        shell: python