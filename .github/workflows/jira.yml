name: Enrich PR with Jira Info (Inline Script)

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  add_jira_details:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write # Grant permission to update PRs
      contents: read       # Needed for the context, though not strictly for this script without checkout

    steps:
      - name: Extract Custom Jira Ticket ID
        id: extract_jira_id # Give this step an ID to reference its outputs
        uses: actions/github-script@v7 # Use a recent version of github-script
        with:
          script: |
            // Inline JavaScript for extracting Jira ID
            /**
             * Extracts a Jira ticket ID (e.g., "scrum-123") from a string.
             * Looks for the pattern "scrum- followed by 3 to 5 digits" (adjust regex as needed).
             * @param {string} text The string to search within.
             * @returns {string | null} The found Jira ID or null if not found.
             */
            function extractJiraId(text) {
                if (!text) {
                    return null;
                }
                // Regex: 'scrum-' followed by 3 to 5 digits (e.g., 123, 12345)
                // You can adjust the {3,5} part to match your exact digit count requirements.
                const regex = /(scrum-\d{1,5})/i; // /i for case-insensitive matching
                const match = text.match(regex);
                return match ? match[1].toUpperCase() : null; // Return in uppercase to standardize
            }

            let jiraTicketId = null;

            // 1. Check Branch Name
            const branchName = context.payload.pull_request.head.ref;
            console.log(`Checking branch name: ${branchName}`);
            jiraTicketId = extractJiraId(branchName);
            if (jiraTicketId) {
                console.log(`Found Jira ID in branch name: ${jiraTicketId}`);
            }

            // 2. Check PR Title (if not found in branch name)
            if (!jiraTicketId) {
                const prTitle = context.payload.pull_request.title;
                console.log(`Checking PR title: ${prTitle}`);
                jiraTicketId = extractJiraId(prTitle);
                if (jiraTicketId) {
                    console.log(`Found Jira ID in PR title: ${jiraTicketId}`);
                }
            }

            // 3. Check PR Description (if not found in title or branch name)
            if (!jiraTicketId) {
                const prBody = context.payload.pull_request.body;
                console.log(`Checking PR description: ${prBody}`);
                jiraTicketId = extractJiraId(prBody);
                if (jiraTicketId) {
                    console.log(`Found Jira ID in PR description: ${jiraTicketId}`);
                }
            }

            // Set the output for the GitHub Action step
            if (jiraTicketId) {
                console.log(`Extracted Jira Ticket ID: ${jiraTicketId}`);
                core.setOutput('jira_ticket_id', jiraTicketId);
            } else {
                console.log('No Jira ticket ID found in branch name, PR title, or PR description.');
                core.setOutput('jira_ticket_id', ''); // Explicitly set empty if not found
            }

      - name: Get Jira Issue Details and Update PR
        # Only run this step if a Jira ticket ID was successfully extracted
        if: steps.extract_jira_id.outputs.jira_ticket_id != ''
        uses: actions/github-script@v7
        with:
          script: |
            const jiraTicketId = "${{ steps.extract_jira_id.outputs.jira_ticket_id }}";
            const jiraBaseUrl = process.env.JIRA_BASE_URL;
            const jiraUsername = process.env.JIRA_USERNAME;
            const jiraApiToken = process.env.JIRA_API_TOKEN;

            const auth = Buffer.from(`${jiraUsername}:${jiraApiToken}`).toString('base64');

            try {
              const response = await fetch(`${jiraBaseUrl}/rest/api/3/issue/${jiraTicketId}`, {
                headers: {
                  'Authorization': `Basic ${auth}`,
                  'Accept': 'application/json'
                }
              });

              if (!response.ok) {
                console.error(`Failed to fetch Jira issue: ${response.status} ${response.statusText}`);
                // Throw an error to fail the step if Jira issue cannot be fetched
                throw new Error(`Jira API error: ${response.statusText}`);
              }

              const issue = await response.json();
              const issueSummary = issue.fields.summary;
              const issueLink = `${jiraBaseUrl}/browse/${jiraTicketId}`;

              const prNumber = context.payload.pull_request.number;
              const repoOwner = context.repo.owner;
              const repoName = context.repo.repo;

              // Get current PR details
              const { data: pullRequest } = await github.rest.pulls.get({
                owner: repoOwner,
                repo: repoName,
                pull_number: prNumber,
              });

              let newPrBody = pullRequest.body || '';
              let newPrTitle = pullRequest.title;

              // Add Jira link to PR body if not already present
              // Check for both the ticket ID and the full link to avoid duplicates
              if (!newPrBody.includes(jiraTicketId) && !newPrBody.includes(issueLink)) {
                newPrBody += `\n\n---\nJira Issue: [${jiraTicketId} | ${issueSummary}](${issueLink})`;
              }

              // Prefix PR title with Jira ID if not already present
              // Use a regex to check if it's already prefixed, allowing for variations
              const jiraIdCheckRegex = new RegExp(jiraTicketId, 'i'); // Create regex to check for ID anywhere, case-insensitive
              if (!jiraIdCheckRegex.test(newPrTitle)) { // If Jira ID is NOT found in the title
                newPrTitle = `${jiraTicketId} | ${newPrTitle}`; // Then prefix it
              }

              await github.rest.pulls.update({
                owner: repoOwner,
                repo: repoName,
                pull_number: prNumber,
                title: newPrTitle,
                body: newPrBody
              });

              console.log(`Updated PR with Jira info for ${jiraTicketId}`);

            } catch (error) {
              console.error(`Error processing Jira information: ${error.message}`);
              throw error; // Fail the step if an error occurs
            }
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USERNAME: ${{ secrets.JIRA_USERNAME }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      - name: Transition Jira to In Progress
        if: steps.extract_jira_id.outputs.jira_ticket_id != '' # Only run if Jira ID found
        uses: actions/github-script@v7
        continue-on-error: true # <--- This makes the step not fail the job if the transition fails
        with:
          script: |
            const jiraTicketId = "${{ steps.extract_jira_id.outputs.jira_ticket_id }}";
            const jiraBaseUrl = process.env.JIRA_BASE_URL;
            const jiraUsername = process.env.JIRA_USERNAME;
            const jiraApiToken = process.env.JIRA_API_TOKEN;

            const auth = Buffer.from(`${jiraUsername}:${jiraApiToken}`).toString('base64');

            try {
              // 1. Get current Jira issue status
              console.log(`Checking current status for Jira ticket: ${jiraTicketId}`);
              const issueResponse = await fetch(`${jiraBaseUrl}/rest/api/3/issue/${jiraTicketId}?fields=status`, {
                headers: {
                  'Authorization': `Basic ${auth}`,
                  'Accept': 'application/json'
                }
              });

              if (!issueResponse.ok) {
                console.warn(`WARN: Could not fetch Jira issue ${jiraTicketId} to check status: ${issueResponse.status} ${issueResponse.statusText}`);
                return; // Exit script, don't attempt transition
              }
              const issue = await issueResponse.json();
              const currentStatus = issue.fields.status.name;
              console.log(`Current status of ${jiraTicketId}: ${currentStatus}`);

              // Check if the current status is exactly "TO DO" (case-insensitive for robustness)
              if (currentStatus.toUpperCase() !== 'TO DO') {
                console.log(`Jira ticket ${jiraTicketId} is not in 'TO DO' status. Skipping transition to 'IN PROGRESS'.`);
                return; // Exit script
              }

              // 2. Get available transitions for the Jira issue
              console.log(`Fetching available transitions for Jira ticket: ${jiraTicketId}`);
              const transitionsResponse = await fetch(`${jiraBaseUrl}/rest/api/3/issue/${jiraTicketId}/transitions`, {
                headers: {
                  'Authorization': `Basic ${auth}`,
                  'Accept': 'application/json'
                }
              });

              if (!transitionsResponse.ok) {
                console.warn(`WARN: Could not fetch transitions for Jira issue ${jiraTicketId}: ${transitionsResponse.status} ${transitionsResponse.statusText}`);
                return; // Exit script
              }
              const transitionsData = await transitionsResponse.json();

              // Find the 'In Progress' transition ID
              // Use .toUpperCase() for comparison as transition names might vary in case (e.g., "In Progress", "In progress")
              const inProgressTransition = transitionsData.transitions.find(
                t => t.name.toUpperCase() === 'IN PROGRESS'
              );

              if (!inProgressTransition) {
                console.warn(`WARN: 'IN PROGRESS' transition not found for Jira ticket ${jiraTicketId}. Available transitions:`);
                transitionsData.transitions.forEach(t => console.log(`- ${t.name} (ID: ${t.id})`));
                return; // Exit script
              }

              // 3. Execute the transition
              console.log(`Attempting to transition Jira ticket ${jiraTicketId} to 'IN PROGRESS' (Transition ID: ${inProgressTransition.id})`);
              const transitionPostResponse = await fetch(`${jiraBaseUrl}/rest/api/3/issue/${jiraTicketId}/transitions`, {
                method: 'POST',
                headers: {
                  'Authorization': `Basic ${auth}`,
                  'Accept': 'application/json',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  transition: {
                    id: inProgressTransition.id
                  }
                })
              });

              if (!transitionPostResponse.ok) {
                const errorText = await transitionPostResponse.text(); // Get more detailed error message
                console.warn(`WARN: Failed to transition Jira ticket ${jiraTicketId}: ${transitionPostResponse.status} ${transitionPostResponse.statusText}. Response: ${errorText}`);
                // Do NOT throw here, as continue-on-error: true handles the job status
                return;
              }

              console.log(`Successfully transitioned Jira ticket ${jiraTicketId} to 'IN PROGRESS'.`);

            } catch (error) {
              // Catch any unexpected errors but don't rethrow to keep the step green/yellow
              console.warn(`WARN: An unexpected error occurred during Jira status transition for ${jiraTicketId}: ${error.message}`);
            }
        env:
            JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
            JIRA_USERNAME: ${{ secrets.JIRA_USERNAME }}
            JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
