name: Run All Tests

on:
  schedule:
    - cron: '0 0 * * *' # Run every day at midnight
  workflow_dispatch: # Run manually

jobs:
  run-all-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Use a recent Python version

      - name: Upgrade pip
        run: |
          pip install --upgrade pip

      - name: Setup AWS Config
        run: |
          mkdir -p ~/.aws
          printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\n" \
                  "test-access-key-id" \
                  "test-secret-access-key" > ~/.aws/credentials
          printf "[default]\nregion = %s\nsource_profile = default\noutput = json\nrole_arn=%s\n" \
                "us-east-1" \
                "test-role-arn" > ~/.aws/config

      - name: Create coverage report directory
        run: |
          mkdir -p .reports
      
      - name: Find all service directories
        id: find-service-dirs
        run: | 
            service_dirs=$(find . -type f -name "deploy.sh" -print0 | xargs -0 -n 1 dirname)
            service_dirs=$(echo "$service_dirs" | tr '\n' ' ')
            echo "service_dirs=$service_dirs" >> $GITHUB_OUTPUT

      - name: Run flake8 on entire codebase
        continue-on-error: true
        run: |
          pip install flake8
          flake8 --format=pylint --output-file=.reports/flake8-report.txt .

      - name: Run cfn-lint on all template.yaml files
        continue-on-error: true
        run: |
          template_files=$(find . -type f -name "template.yaml" -print0 | xargs -0 -n 1)
          echo "template_files: $template_files"
          pip install cfn-lint
          cfn-lint --format json $template_files > .reports/cfn-lint-report.json

      - name: Run Pytest on all services
        run: |
          service_dirs="${{ steps.find-service-dirs.outputs.service_dirs }}"
          echo "Service directories: $service_dirs"

          COMMON_DEPS="pytest moto coverage boto3 pytest-mock"
          for service_path in $service_dirs; do
            echo "--- Running tests for service: $service_path ---"
            service_name="${service_path//\//-}"
            VENV_DIR=".venv-$service_name"

            rm -rf "$VENV_DIR"
            python3 -m venv "$VENV_DIR"
            source "$VENV_DIR/bin/activate"

            pip install $COMMON_DEPS
            SERVICE_REQUIREMENTS_FILE="${service_path}/app/requirements.txt"
            if [ -f "$SERVICE_REQUIREMENTS_FILE" ]; then
              echo "Installing service-specific dependencies from $SERVICE_REQUIREMENTS_FILE..."
              pip install -r "$SERVICE_REQUIREMENTS_FILE"
            else
              echo "No service-specific requirements.txt found at $SERVICE_REQUIREMENTS_FILE. Using only common dependencies."
            fi

            coverage run -m pytest $service_path/tests || true
            coverage xml -o .reports/coverage-${service_name}.xml || true

            deactivate
            echo "--- Finished tests for service: $service_path ---"
          done
        shell: bash # Explicitly use bash for this step

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

