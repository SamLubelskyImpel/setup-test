AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Carlabs DMS ETL

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: '^[a-zA-z0-9-]+$'
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens

Conditions:
  IsProd:
    Fn::Equals:
    - Ref: AWS::AccountId
    - 196800776222

Mappings:
  SslCertificates:
    us-east-1:
      '143813444726': 'arn:aws:acm:us-east-1:143813444726:certificate/9f026b43-c690-4434-93e1-9be4ef91f67d'
      '196800776222': 'arn:aws:acm:us-east-1:196800776222:certificate/4bad36e0-d971-41e6-a2d8-a897013012be'
  Subnets:
    us-east-1:
      '196800776222':
        - subnet-0d29a385efe83bf1c
        - subnet-0e88ecdd743701e96
        - subnet-00291e028e21cb78f
        - subnet-0b1555d5fa3c8ba8e
      '143813444726':
        - subnet-030d57e39ec0df603
        - subnet-01044d580678ea63c
        - subnet-0b29db0aeb6cdabec
        - subnet-0e28d592f2ca28fb7
  VpcId:
    us-east-1:
      '196800776222': vpc-03417e688cee5bc07
      '143813444726': vpc-0b28df8980a1905d5

Globals:
  Function:
    Runtime: python3.9
    EventInvokeConfig:
      MaximumRetryAttempts: 0
    Environment:
      Variables:
        LOGLEVEL: INFO
        ENVIRONMENT: !Ref Environment
        IS_PROD: !If [ IsProd, true, false ]
    VpcConfig:
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetIds: !FindInMap [ Subnets, !Ref 'AWS::Region', !Ref 'AWS::AccountId' ]

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Permit traffic from the Carlabs ETL
      VpcId: !FindInMap [ VpcId, !Ref 'AWS::Region', !Ref 'AWS::AccountId']
      SecurityGroupEgress:
        - Description: AllowAll
          CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: carlabs-etl

  StepFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !Sub '${PullSalesHistoryFunction.Arn}'
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: '*'
        - PolicyName: Xray
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource: '*'

  PullSalesHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Pull sales history from Carlabs
      CodeUri: app
      Handler: data_pull.lambda_handler
      Timeout: 60
      MemorySize: 2048
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: Secrets
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !If [IsProd, !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/DMSDB*', !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/DMSDB*']
                - !If [IsProd, !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/carlabs/data_integrations*', !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/carlabs/data_integrations*']

  SalesHistoryStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Role: !GetAtt StepFunctionRole.Arn
      DefinitionUri: state_machines/sales_history.json
      DefinitionSubstitutions:
        PullSalesHistoryFunction: !GetAtt PullSalesHistoryFunction.Arn

  # SalesHistoryStateMachineScheduledEvent:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     State: !If [ IsProd, ENABLED, DISABLED ]
  #     ScheduleExpression: rate(2 hours)
  #     Description: Schedule daily retrieval of CarGurus vehicles
  #     Targets:
  #       - Id: CarGurusStateMachineScheduledEventLambdaTarget
  #         Arn: !GetAtt CarGurusStateMachine.Arn
  #         RoleArn: !GetAtt CarGurusStateMachineSchedulerRole.Arn