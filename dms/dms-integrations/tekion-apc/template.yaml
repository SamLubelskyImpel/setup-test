AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Tekion APC DMS

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: '^[a-zA-z0-9-]+$'
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens

  DomainSuffix:
    Description: The domain suffix of the API Gateway
    Type: String
    AllowedPattern: '^[a-zA-z0-9-]+$|'
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens
    Default: ""

Conditions:
  IsProd:
    Fn::Equals:
    - Ref: AWS::AccountId
    - 196800776222
  IsUsEast1: !Equals [ !Ref 'AWS::Region', 'us-east-1' ]

Mappings:
  Subnets:
    us-east-1:
      '196800776222':
        - subnet-0d29a385efe83bf1c
        - subnet-0e88ecdd743701e96
        - subnet-00291e028e21cb78f
        - subnet-0b1555d5fa3c8ba8e
      '143813444726':
        - subnet-030d57e39ec0df603
        - subnet-01044d580678ea63c
        - subnet-0b29db0aeb6cdabec
        - subnet-0e28d592f2ca28fb7
  VpcId:
    us-east-1:
      '196800776222': vpc-03417e688cee5bc07
      '143813444726': vpc-0b28df8980a1905d5
  SslCertificates:
    us-east-1:
      '143813444726': 'arn:aws:acm:us-east-1:143813444726:certificate/9f026b43-c690-4434-93e1-9be4ef91f67d'
      '196800776222': 'arn:aws:acm:us-east-1:196800776222:certificate/4bad36e0-d971-41e6-a2d8-a897013012be'

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Sub '${AWS::AccountId}'
        ENVIRONMENT: !Ref Environment
        LOGLEVEL: INFO
        CE_TOPIC: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
        INTEGRATIONS_BUCKET: !If [ IsProd,
                        !Sub "integrations-${AWS::Region}-prod",
                        !Sub "integrations-${AWS::Region}-test"
                      ]
        FTP_FOLDER: !If [ IsProd, "Historical_Files", "dev1/Historical_Files"]
    VpcConfig:
      SecurityGroupIds:
        - !Ref TekionSecurityGroup
      SubnetIds: !FindInMap [ Subnets, !Ref 'AWS::Region', !Ref 'AWS::AccountId' ]

Resources:
  TekionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Permit traffic from the Tekion APC lambdas
      VpcId: !FindInMap [ VpcId, !Ref 'AWS::Region', !Ref 'AWS::AccountId']
      SecurityGroupEgress:
        - Description: AllowAll
          CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      Tags:
        - Key: Environment
          Value: !Ref Environment

  RDSInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "tekion apc dms integration rds access"
      GroupId: !If [ IsProd,
                      'sg-00e12bc4c116eb820',
                      'sg-00b911ee260ce5153'
                    ]
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt TekionSecurityGroup.GroupId

  RepairOrderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-apc-dms-${Environment}-RepairOrderQueue"
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt RepairOrderDLQ.Arn
        maxReceiveCount: 5

  RepairOrderDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-apc-dms-${Environment}-RepairOrderDLQ"
      MessageRetentionPeriod: 1209600

  DealsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-apc-dms-${Environment}-DealsQueue"
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DealsDLQ.Arn
        maxReceiveCount: 5

  DealsDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-apc-dms-${Environment}-DealsDLQ"
      MessageRetentionPeriod: 1209600

  HistoricalDataQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-apc-dms-${Environment}-HistoricalDataQueue"
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt HistoricalDataDLQ.Arn
        maxReceiveCount: 5

  HistoricalDataDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-apc-dms-${Environment}-HistoricalDataDLQ"
      MessageRetentionPeriod: 1209600

  InvokeTekionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "tekion-apc-dms-${Environment}-InvokeTekion"
      Description: Invoke data pull for every Tekion dealer
      CodeUri: app/
      Handler: invoke_tekion.lambda_handler
      Timeout: 180
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowSQS
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt RepairOrderQueue.Arn
                - !GetAtt DealsQueue.Arn
                - !GetAtt HistoricalDataQueue.Arn
                - !GetAtt AppointmentsQueue.Arn
            - Sid: AllowSecrets
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/DmsDataService*",
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/DmsDataService*",
                  ]
      Environment:
        Variables:
          Environment: !Ref Environment
          REPAIR_ORDER_QUEUE: !Ref RepairOrderQueue
          DEALS_QUEUE: !Ref DealsQueue
          HISTORICAL_DATA_QUEUE: !Ref HistoricalDataQueue
          APPOINTMENTS_QUEUE: !Ref AppointmentsQueue
      Events:
        DailyInvoke:
          Type: Schedule
          Properties:
            Description: Start the daily data pull for each tekion dealer.
            Enabled: !If [ IsProd, true, false ]
            Schedule: cron(0 0 * * ? *)
            Input: '{"frequency": "daily"}'

  RepairOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "tekion-apc-dms-${Environment}-RepairOrder"
      Description: Tekion Repair Order Data Pull
      CodeUri: app/
      Handler: repair_order.repair_orders.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowSecrets
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/dms-integrations-partner*",
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:stage/dms-integrations-partner*",
                  ]
            - Sid: AllowS3
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
                - s3:*Object
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                  ]
            - Sid: AllowSNSPolicy
              Effect: Allow
              Action:
                - sns:Publish
              Resource:
                - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
            - Sid: AllowInvokeFunction
              Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !GetAtt RefreshTokenLambda.Arn
      Environment:
        Variables:
          Environment: !Ref Environment
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Enabled: True
            Queue: !GetAtt RepairOrderQueue.Arn

  HistoricalDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "tekion-apc-dms-${Environment}-HistoricalDataPull"
      Description: Tekion Historical Data Pull
      CodeUri: app/
      Handler: historical.historical_data.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowSecrets
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/TekionFTP*",
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/TekionFTP*",
                  ]
                - !If [ IsProd,
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/DealerVaultFTP*",
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/DealerVaultFTP*",
                  ]
            - Sid: AllowS3
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
                - s3:*Object
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                  ]
            - Sid: AllowSNSPolicy
              Effect: Allow
              Action:
                - sns:Publish
              Resource:
                - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
      Environment:
        Variables:
          Environment: !Ref Environment
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Enabled: True
            Queue: !GetAtt HistoricalDataQueue.Arn

  DealsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "tekion-apc-dms-${Environment}-Deals"
      Description: Tekion Deals Data Pull
      CodeUri: app/
      Handler: vehicle_sales.vehicle_sale.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowSecrets
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/dms-integrations-partner*",
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:stage/dms-integrations-partner*",
                  ]
            - Sid: AllowS3
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
                - s3:*Object
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                  ]
            - Sid: AllowSNSPolicy
              Effect: Allow
              Action:
                - sns:Publish
              Resource:
                - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
            - Sid: AllowInvokeFunction
              Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !GetAtt RefreshTokenLambda.Arn
      Environment:
        Variables:
          Environment: !Ref Environment
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Enabled: True
            Queue: !GetAtt DealsQueue.Arn

  RepairOrderDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub "tekion-apc-dms-${Environment}-RepairOrderDLQAlarm"
      AlarmDescription: There are messages in the Tekion repair order DLQ
      ActionsEnabled: true
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
      Dimensions:
        - Name: QueueName
          Value: !GetAtt RepairOrderDLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  DealsDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub "tekion-apc-dms-${Environment}-DealsDLQAlarm"
      AlarmDescription: There are messages in the Tekion deals DLQ
      ActionsEnabled: true
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DealsDLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  RefreshTokenLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: Refresh Tekion token
      FunctionName: !Sub tekion-apc-dms-${Environment}-RefreshToken
      CodeUri: app/
      Handler: refresh_token.lambda_handler
      ReservedConcurrentExecutions: 1
      Timeout: 30
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowSecrets
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/dms-integrations-partner*",
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:stage/dms-integrations-partner*",
                  ]
            - Sid: AllowS3
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
                - s3:*Object
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                  ]

  TekionFormatRODLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-apc-dms-${Environment}-FormatRODLQ"
      MessageRetentionPeriod: 1209600

  TekionFormatROQueue:
    Type: AWS::SQS::Queue
    DependsOn: TekionFormatRODLQ
    Properties:
      QueueName: !Sub "tekion-apc-dms-${Environment}-FormatROQueue"
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt TekionFormatRODLQ.Arn
        maxReceiveCount: 5

  TekionFormatROQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !If [ IsProd,
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                  ]
      Protocol: sqs
      RawMessageDelivery: true
      Endpoint: !GetAtt TekionFormatROQueue.Arn
      FilterPolicyScope: MessageBody
      FilterPolicy:
        '{"Records":{"s3":{"object":{"key":[{"prefix":"tekion-apc/repair_order"}]}},"eventName":[{"prefix":"ObjectCreated:"}]}}'

  TekionFormatROQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref TekionFormatROQueue
      PolicyDocument:
          Version: '2012-10-17'
          Id: TekionFormatROQueuePolicy
          Statement:
            - Sid: Allow-SNS-SendMessage
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt TekionFormatROQueue.Arn
              Principal:
                  Service: sns.amazonaws.com
              Condition:
                  ArnEquals:
                      aws:SourceArn: !If [ IsProd,
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                          ]

  TekionFormatROInsertFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "tekion-apc-dms-${Environment}-FormatROInsert"
      Description: Format Tekion RO data to the unified s3 bucket.
      CodeUri: app/
      Handler: repair_order.repair_order_format.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowGetDBInfo
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !If [ IsProd,
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/RDS/DMS*",
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/RDS/DMS*"
                        ]
            - Sid: S3
              Effect: Allow
              Action:
                - s3:*
              Resource: !If [ IsProd,
                  !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                  !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                ]
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TekionFormatROQueue.Arn

  TekionFormatRODLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub "tekion-apc-dms-${Environment}-FormatRODLQAlarm"
      AlarmDescription: Messages are in the Tekion format RO lambda
      ActionsEnabled: true
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: QueueName
          Value: !GetAtt TekionFormatRODLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  TekionFormatFIDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-apc-dms-${Environment}-FormatFIDLQ"
      MessageRetentionPeriod: 1209600

  TekionFormatFIQueue:
    Type: AWS::SQS::Queue
    DependsOn: TekionFormatFIDLQ
    Properties:
      QueueName: !Sub "tekion-apc-dms-${Environment}-FormatFIQueue"
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt TekionFormatFIDLQ.Arn
        maxReceiveCount: 5

  TekionFormatFIQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !If [ IsProd,
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                  ]
      Protocol: sqs
      RawMessageDelivery: true
      Endpoint: !GetAtt TekionFormatFIQueue.Arn
      FilterPolicyScope: MessageBody
      FilterPolicy:
        '{"Records":{"s3":{"object":{"key":[{"prefix":"tekion-apc/fi_closed_deal"}]}},"eventName":[{"prefix":"ObjectCreated:"}]}}'

  TekionFormatFIQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref TekionFormatFIQueue
      PolicyDocument:
          Version: '2012-10-17'
          Id: TekionFormatFIQueuePolicy
          Statement:
            - Sid: Allow-SNS-SendMessage
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt TekionFormatFIQueue.Arn
              Principal:
                  Service: sns.amazonaws.com
              Condition:
                  ArnEquals:
                      aws:SourceArn: !If [ IsProd,
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                          ]

  TekionFormatFIInsertFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "tekion-apc-dms-${Environment}-FormatFIInsert"
      Description: Format Tekion FI data to the unified s3 bucket.
      CodeUri: app/
      Handler: vehicle_sales.vehicle_sale_format.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowGetDBInfo
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !If [ IsProd,
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/RDS/DMS*",
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/RDS/DMS*"
                        ]
            - Sid: S3
              Effect: Allow
              Action:
                - s3:*
              Resource: !If [ IsProd,
                  !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                  !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                ]
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TekionFormatFIQueue.Arn

  TekionFormatFIDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub "tekion-apc-dms-${Environment}-FormatFIDLQAlarm"
      AlarmDescription: Messages are in the Tekion format FI lambda
      ActionsEnabled: true
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: QueueName
          Value: !GetAtt TekionFormatFIDLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  TekionFormatHistoricalRODLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-apc-dms-${Environment}-FormatHistoricalRODLQ"
      MessageRetentionPeriod: 1209600

  TekionFormatHistoricalROQueue:
    Type: AWS::SQS::Queue
    DependsOn: TekionFormatHistoricalRODLQ
    Properties:
      QueueName: !Sub "tekion-apc-dms-${Environment}-FormatHistoricalROQueue"
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt TekionFormatHistoricalRODLQ.Arn
        maxReceiveCount: 5

  TekionFormatHistoricalROQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !If [ IsProd,
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                  ]
      Protocol: sqs
      RawMessageDelivery: true
      Endpoint: !GetAtt TekionFormatHistoricalROQueue.Arn
      FilterPolicyScope: MessageBody
      FilterPolicy:
        '{"Records":{"s3":{"object":{"key":[{"prefix":"tekion-apc/historical/repair_order"}]}},"eventName":[{"prefix":"ObjectCreated:"}]}}'

  TekionFormatHistoricalROQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref TekionFormatHistoricalROQueue
      PolicyDocument:
          Version: '2012-10-17'
          Id: TekionFormatHistoricalROQueuePolicy
          Statement:
            - Sid: Allow-SNS-SendMessage
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt TekionFormatHistoricalROQueue.Arn
              Principal:
                  Service: sns.amazonaws.com
              Condition:
                  ArnEquals:
                      aws:SourceArn: !If [ IsProd,
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                          ]

  TekionFormatHistoricalROInsertFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "tekion-apc-dms-${Environment}-FormatHistoricalROInsert"
      Description: Format Tekion Historical RO data to the unified s3 bucket.
      CodeUri: app/
      Handler: historical.historical_repair_order_format.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowGetDBInfo
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !If [ IsProd,
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/RDS/DMS*",
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/RDS/DMS*"
                        ]
            - Sid: S3
              Effect: Allow
              Action:
                - s3:*
              Resource: !If [ IsProd,
                  !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                  !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                ]
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TekionFormatHistoricalROQueue.Arn

  TekionFormatHistoricalRODLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub "tekion-apc-dms-${Environment}-FormatHistoricalRODLQAlarm"
      AlarmDescription: Messages are in the Tekion format Historical RO lambda
      ActionsEnabled: true
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: QueueName
          Value: !GetAtt TekionFormatHistoricalRODLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  TekionFormatHistoricalFIDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-apc-dms-${Environment}-FormatHistoricalFIDLQ"
      MessageRetentionPeriod: 1209600

  TekionFormatHistoricalFIQueue:
    Type: AWS::SQS::Queue
    DependsOn: TekionFormatHistoricalFIDLQ
    Properties:
      QueueName: !Sub "tekion-apc-dms-${Environment}-FormatHistoricalFIQueue"
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt TekionFormatHistoricalFIDLQ.Arn
        maxReceiveCount: 5

  TekionFormatHistoricalFIQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !If [ IsProd,
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                  ]
      Protocol: sqs
      RawMessageDelivery: true
      Endpoint: !GetAtt TekionFormatHistoricalFIQueue.Arn
      FilterPolicyScope: MessageBody
      FilterPolicy:
        '{"Records":{"s3":{"object":{"key":[{"prefix":"tekion-apc/historical/fi_closed_deal"}]}},"eventName":[{"prefix":"ObjectCreated:"}]}}'

  TekionFormatHistoricalFIQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref TekionFormatHistoricalFIQueue
      PolicyDocument:
          Version: '2012-10-17'
          Id: TekionFormatHistoricalFIQueuePolicy
          Statement:
            - Sid: Allow-SNS-SendMessage
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt TekionFormatHistoricalFIQueue.Arn
              Principal:
                  Service: sns.amazonaws.com
              Condition:
                  ArnEquals:
                      aws:SourceArn: !If [ IsProd,
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                          ]

  TekionFormatHistoricalFIInsertFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "tekion-apc-dms-${Environment}-FormatHistoricalFIInsert"
      Description: Format Tekion Historical FI data to the unified s3 bucket.
      CodeUri: app/
      Handler: historical.historical_vehicle_sale_format.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowGetDBInfo
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !If [ IsProd,
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/RDS/DMS*",
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/RDS/DMS*"
                        ]
            - Sid: S3
              Effect: Allow
              Action:
                - s3:*
              Resource: !If [ IsProd,
                  !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                  !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                ]
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TekionFormatHistoricalFIQueue.Arn

  TekionFormatHistoricalFIDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub "tekion-apc-dms-${Environment}-FormatHistoricalFIDLQAlarm"
      AlarmDescription: Messages are in the Tekion format Historical FI lambda
      ActionsEnabled: true
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: QueueName
          Value: !GetAtt TekionFormatHistoricalFIDLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  AppointmentsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-apc-dms-${Environment}-AppointmentsQueue"
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AppointmentsDLQ.Arn
        maxReceiveCount: 5

  AppointmentsDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-apc-dms-${Environment}-AppointmentsDLQ"
      MessageRetentionPeriod: 1209600

  AppointmentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "tekion-apc-dms-${Environment}-Appointments"
      Description: Tekion Service Appointments Data Pull
      CodeUri: app/
      Handler: appointment.appointment.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowSecrets
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/dms-integrations-partner*",
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:stage/dms-integrations-partner*",
                  ]
            - Sid: AllowS3
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
                - s3:*Object
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                  ]
            - Sid: AllowSNSPolicy
              Effect: Allow
              Action:
                - sns:Publish
              Resource:
                - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
            - Sid: AllowInvokeFunction
              Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !GetAtt RefreshTokenLambda.Arn
      Environment:
        Variables:
          Environment: !Ref Environment
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Enabled: True
            Queue: !GetAtt AppointmentsQueue.Arn

  AppointmentsDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub "tekion-apc-dms-${Environment}-AppointmentsDLQAlarm"
      AlarmDescription: There are messages in the Tekion service appointments DLQ
      ActionsEnabled: true
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
      Dimensions:
        - Name: QueueName
          Value: !GetAtt AppointmentsDLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  TekionFormatSADLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-apc-dms-${Environment}-FormatSADLQ"
      MessageRetentionPeriod: 1209600

  TekionFormatSAQueue:
    Type: AWS::SQS::Queue
    DependsOn: TekionFormatSADLQ
    Properties:
      QueueName: !Sub "tekion-apc-dms-${Environment}-FormatSAQueue"
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt TekionFormatSADLQ.Arn
        maxReceiveCount: 5

  TekionFormatSAQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !If [ IsProd,
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                  ]
      Protocol: sqs
      RawMessageDelivery: true
      Endpoint: !GetAtt TekionFormatSAQueue.Arn
      FilterPolicyScope: MessageBody
      FilterPolicy:
        '{"Records":{"s3":{"object":{"key":[{"prefix":"tekion-apc/service_appointment"}]}},"eventName":[{"prefix":"ObjectCreated:"}]}}'

  TekionFormatSAQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref TekionFormatSAQueue
      PolicyDocument:
          Version: '2012-10-17'
          Id: TekionFormatSAQueuePolicy
          Statement:
            - Sid: Allow-SNS-SendMessage
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt TekionFormatSAQueue.Arn
              Principal:
                  Service: sns.amazonaws.com
              Condition:
                  ArnEquals:
                      aws:SourceArn: !If [ IsProd,
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                          ]

  TekionFormatSAInsertFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "tekion-apc-dms-${Environment}-FormatSAInsert"
      Description: Format Tekion SA data to the unified s3 bucket.
      CodeUri: app/
      Handler: appointment.appointment_format.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowGetDBInfo
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !If [ IsProd,
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/RDS/DMS*",
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/RDS/DMS*"
                        ]
            - Sid: S3
              Effect: Allow
              Action:
                - s3:*
              Resource: !If [ IsProd,
                  !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                  !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                ]
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TekionFormatSAQueue.Arn

  TekionFormatSADLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub "tekion-apc-dms-${Environment}-FormatSADLQAlarm"
      AlarmDescription: Messages are in the Tekion format SA lambda
      ActionsEnabled: true
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: QueueName
          Value: !GetAtt TekionFormatSADLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  TekionFormatHistoricalSADLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "tekion-apc-dms-${Environment}-FormatHistoricalSADLQ"
      MessageRetentionPeriod: 1209600

  TekionFormatHistoricalSAQueue:
    Type: AWS::SQS::Queue
    DependsOn: TekionFormatHistoricalSADLQ
    Properties:
      QueueName: !Sub "tekion-apc-dms-${Environment}-FormatHistoricalSAQueue"
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt TekionFormatHistoricalSADLQ.Arn
        maxReceiveCount: 5

  TekionFormatHistoricalSAQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !If [ IsProd,
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                  ]
      Protocol: sqs
      RawMessageDelivery: true
      Endpoint: !GetAtt TekionFormatHistoricalSAQueue.Arn
      FilterPolicyScope: MessageBody
      FilterPolicy:
        '{"Records":{"s3":{"object":{"key":[{"prefix":"tekion-apc/historical/service_appointment"}]}},"eventName":[{"prefix":"ObjectCreated:"}]}}'

  TekionFormatHistoricalSAQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref TekionFormatHistoricalSAQueue
      PolicyDocument:
          Version: '2012-10-17'
          Id: TekionFormatHistoricalSAQueuePolicy
          Statement:
            - Sid: Allow-SNS-SendMessage
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt TekionFormatHistoricalSAQueue.Arn
              Principal:
                  Service: sns.amazonaws.com
              Condition:
                  ArnEquals:
                      aws:SourceArn: !If [ IsProd,
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                          ]

  TekionFormatHistoricalSAInsertFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "tekion-apc-dms-${Environment}-FormatHistoricalSAInsert"
      Description: Format Tekion Historical SA data to the unified s3 bucket.
      CodeUri: app/
      Handler: historical.historical_appointment_format.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowGetDBInfo
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !If [ IsProd,
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/RDS/DMS*",
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/RDS/DMS*"
                        ]
            - Sid: S3
              Effect: Allow
              Action:
                - s3:*
              Resource: !If [ IsProd,
                  !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                  !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                ]
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TekionFormatHistoricalSAQueue.Arn

  TekionFormatHistoricalSADLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub "tekion-apc-dms-${Environment}-FormatHistoricalSADLQAlarm"
      AlarmDescription: Messages are in the Tekion format Historical SA lambda
      ActionsEnabled: true
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: QueueName
          Value: !GetAtt TekionFormatHistoricalSADLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  # Customer enrichment

  InvokeCustomerEnrichment:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub tekion-apc-dms-${Environment}-InvokeCustomerEnrichment
      Handler: customer_enrichment.invoke_handler
      Runtime: python3.9
      CodeUri: app/
      Timeout: 30
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowAPICredentials
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !If [ IsProd,
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/DmsDataService*",
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/DmsDataService*"
                        ]
            - Sid: AllowSQS
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt PullCustomersQueue.Arn
      Environment:
        Variables:
          PULL_CUSTOMERS_QUEUE: !Ref PullCustomersQueue
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(40 minutes)

  InvokeCustomerEnrichmentAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub tekion-apc-dms-${Environment}-InvokeCustomerEnrichmentAlarm
      AlarmDescription: Alarm triggered when the InvokeCustomerEnrichment function fails
      ActionsEnabled: !If [IsProd, true, false]
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref InvokeCustomerEnrichment
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: missing

  PullCustomersQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub tekion-apc-dms-${Environment}-PullCustomersQueue
      VisibilityTimeout: 90
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt PullCustomersDLQ.Arn
        maxReceiveCount: 3

  PullCustomersDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub tekion-apc-dms-${Environment}-PullCustomersDLQ

  PullCustomersDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub tekion-apc-dms-${Environment}-PullCustomersDLQAlarm
      AlarmDescription: There are over 1 unprocessed messages in the PullCustomersDLQ
      ActionsEnabled: !If [ IsProd, true, false ]
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: QueueName
          Value: !GetAtt PullCustomersDLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      TreatMissingData: notBreaching

  PullCustomers:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub tekion-apc-dms-${Environment}-PullCustomers
      Handler: customer_enrichment.pull_customers_handler
      Runtime: python3.9
      CodeUri: app/
      Timeout: 90
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowDBCredentials
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !If [ IsProd,
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/RDS/DMS*",
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/RDS/DMS*"
                        ]
            - Sid: AllowSQS
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt EnrichCustomersQueue.Arn
      Environment:
        Variables:
          ENRICH_CUSTOMERS_QUEUE: !Ref EnrichCustomersQueue
          CUSTOMER_QUERY_LIMIT: !If [ IsProd, 150, 1 ]
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt PullCustomersQueue.Arn
            BatchSize: 1  # avoid timeouts due to the database response time

  EnrichCustomersQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub tekion-apc-dms-${Environment}-EnrichCustomersQueue
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt EnrichCustomersDLQ.Arn
        maxReceiveCount: 3

  EnrichCustomersDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub tekion-apc-dms-${Environment}-EnrichCustomersDLQ

  EnrichCustomersDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub tekion-apc-dms-${Environment}-EnrichCustomersDLQAlarm
      AlarmDescription: There are over 1 unprocessed messages in the EnrichCustomersDLQ
      ActionsEnabled: !If [ IsProd, true, false ]
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: QueueName
          Value: !GetAtt EnrichCustomersDLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      TreatMissingData: notBreaching

  EnrichCustomers:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub tekion-apc-dms-${Environment}-EnrichCustomers
      Handler: customer_enrichment.enrich_customers_handler
      Runtime: python3.9
      CodeUri: app/
      Timeout: 90
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowCredentials
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/RDS/DMS*",
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/RDS/DMS*"
                  ]
                - !If [ IsProd,
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/dms-integrations-partner*",
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:stage/dms-integrations-partner*"
                  ]
            - Sid: AllowInvokeFunction
              Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !GetAtt RefreshTokenLambda.Arn
            - Sid: AllowS3
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:ListBucket
                - s3:PutObject
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                  ]
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EnrichCustomersQueue.Arn
            BatchSize: 1 # avoid timeouts due to the database and api response time
