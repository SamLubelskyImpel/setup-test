AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Reyrey DMS ETL

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: '^[a-zA-z0-9-]+$'
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens

  DomainSuffix:
    Description: The domain suffix of the API Gateway
    Type: String
    AllowedPattern: '^[a-zA-z0-9-]+$|'
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens
    Default: ""

Conditions:
  IsProd:
    Fn::Equals:
    - Ref: AWS::AccountId
    - 196800776222
  IsUsEast1: !Equals [ !Ref 'AWS::Region', 'us-east-1' ]

Mappings:
  Subnets:
    us-east-1:
      '196800776222':
        - subnet-0d29a385efe83bf1c
        - subnet-0e88ecdd743701e96
        - subnet-00291e028e21cb78f
        - subnet-0b1555d5fa3c8ba8e
      '143813444726':
        - subnet-030d57e39ec0df603
        - subnet-01044d580678ea63c
        - subnet-0b29db0aeb6cdabec
        - subnet-0e28d592f2ca28fb7
  VpcId:
    us-east-1:
      '196800776222': vpc-03417e688cee5bc07
      '143813444726': vpc-0b28df8980a1905d5
  SslCertificates:
    us-east-1:
      '143813444726': 'arn:aws:acm:us-east-1:143813444726:certificate/9f026b43-c690-4434-93e1-9be4ef91f67d'
      '196800776222': 'arn:aws:acm:us-east-1:196800776222:certificate/4bad36e0-d971-41e6-a2d8-a897013012be'

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Sub '${AWS::AccountId}'
        REGION: !Sub '${AWS::Region}'
        ENVIRONMENT: !Ref Environment
        IS_PROD: !If [ IsProd, 1, 0 ]
        LOGLEVEL: INFO
        INTEGRATIONS_BUCKET: !If [ IsProd,
          !Sub "integrations-${AWS::Region}-prod",
          !Sub "integrations-${AWS::Region}-test"
        ]
    VpcConfig:
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetIds: !FindInMap [ Subnets, !Ref 'AWS::Region', !Ref 'AWS::AccountId' ]

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Permit traffic from the ReyRey integration service
      VpcId: !FindInMap [ VpcId, !Ref 'AWS::Region', !Ref 'AWS::AccountId']
      SecurityGroupEgress:
        - Description: AllowAll
          CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: reyrey-integration

  RDSInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "reyrey integration rds access"
      GroupId: !If [ IsProd,
                      'sg-00e12bc4c116eb820',
                      'sg-00b911ee260ce5153'
                    ]
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId

  ReyReyFormatRODLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ReyReyFormatRODLQ

  ReyReyFormatROQueue:
    Type: AWS::SQS::Queue
    DependsOn: ReyReyFormatRODLQ
    Properties:
      QueueName: ReyReyFormatROQueue
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ReyReyFormatRODLQ.Arn
        maxReceiveCount: 5

  ReyReyFormatROQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !If [ IsProd,
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                  ]
      Protocol: sqs
      RawMessageDelivery: true
      Endpoint: !GetAtt ReyReyFormatROQueue.Arn
      FilterPolicyScope: MessageBody
      FilterPolicy:
        '{"Records":{"s3":{"object":{"key":[{"prefix":"reyrey/repair_order"}]}},"eventName":[{"prefix":"ObjectCreated:"}]}}'

  ReyReyFormatROQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ReyReyFormatROQueue
      PolicyDocument:
          Version: '2012-10-17'
          Id: ReyReyFormatROQueuePolicy
          Statement:
            - Sid: Allow-SNS-SendMessage
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt ReyReyFormatROQueue.Arn
              Principal:
                  Service: sns.amazonaws.com
              Condition:
                  ArnEquals:
                      aws:SourceArn: !If [ IsProd,
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                          ]

  ReyReyFormatROInsertFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Format ReyRey RO data to the unified s3 bucket.
      CodeUri: app/
      Handler: repair_order_format.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowGetDBInfo
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !If [ IsProd,
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/RDS/DMS*",
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/RDS/DMS*"
                        ]
            - Sid: S3
              Effect: Allow
              Action:
                - s3:*
              Resource: !If [ IsProd,
                  !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                  !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                ]
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ReyReyFormatROQueue.Arn

  ReyReyFormatRODLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub ReyReyFormatRODLQ-${Environment}
      AlarmDescription: Messages are in the reyrey format RO lambda
      ActionsEnabled: true
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: QueueName
          Value: !GetAtt ReyReyFormatRODLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  ReyReyFormatFIDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ReyReyFormatFIDLQ

  ReyReyFormatFIQueue:
    Type: AWS::SQS::Queue
    DependsOn: ReyReyFormatFIDLQ
    Properties:
      QueueName: ReyReyFormatFIQueue
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ReyReyFormatFIDLQ.Arn
        maxReceiveCount: 5

  ReyReyFormatFIQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !If [ IsProd,
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                  ]
      Protocol: sqs
      RawMessageDelivery: true
      Endpoint: !GetAtt ReyReyFormatFIQueue.Arn
      FilterPolicyScope: MessageBody
      FilterPolicy:
        '{"Records":{"s3":{"object":{"key":[{"prefix":"reyrey/fi_closed_deal"}]}},"eventName":[{"prefix":"ObjectCreated:"}]}}'

  ReyReyFormatFIQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ReyReyFormatFIQueue
      PolicyDocument:
          Version: '2012-10-17'
          Id: ReyReyFormatFIQueuePolicy
          Statement:
            - Sid: Allow-SNS-SendMessage
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt ReyReyFormatFIQueue.Arn
              Principal:
                  Service: sns.amazonaws.com
              Condition:
                  ArnEquals:
                      aws:SourceArn: !If [ IsProd,
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                          ]

  ReyReyFormatFIInsertFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Format ReyRey FI data to the unified s3 bucket.
      CodeUri: app/
      Handler: vehicle_sale_format.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowGetDBInfo
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !If [ IsProd,
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/RDS/DMS*",
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/RDS/DMS*"
                        ]
            - Sid: S3
              Effect: Allow
              Action:
                - s3:*
              Resource: !If [ IsProd,
                  !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                  !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                ]
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ReyReyFormatFIQueue.Arn

  ReyReyFormatFIDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub ReyReyFormatFIDLQ-${Environment}
      AlarmDescription: Messages are in the reyrey format FI lambda
      ActionsEnabled: true
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: QueueName
          Value: !GetAtt ReyReyFormatFIDLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  ReyReyFormatSADLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ReyReyFormatSADLQ

  ReyReyFormatSAQueue:
    Type: AWS::SQS::Queue
    DependsOn: ReyReyFormatSADLQ
    Properties:
      QueueName: ReyReyFormatSAQueue
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ReyReyFormatSADLQ.Arn
        maxReceiveCount: 5

  ReyReyFormatSAQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !If [ IsProd,
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                  ]
      Protocol: sqs
      RawMessageDelivery: true
      Endpoint: !GetAtt ReyReyFormatSAQueue.Arn
      FilterPolicyScope: MessageBody
      FilterPolicy:
        '{"Records":{"s3":{"object":{"key":[{"prefix":"reyrey/service_appointment"}]}},"eventName":[{"prefix":"ObjectCreated:"}]}}'

  ReyReyFormatSAQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ReyReyFormatSAQueue
      PolicyDocument:
          Version: '2012-10-17'
          Id: ReyReyFormatSAQueuePolicy
          Statement:
            - Sid: Allow-SNS-SendMessage
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt ReyReyFormatSAQueue.Arn
              Principal:
                  Service: sns.amazonaws.com
              Condition:
                  ArnEquals:
                      aws:SourceArn: !If [ IsProd,
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                          ]

  ReyReyFormatSAInsertFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Format ReyRey SA data to the unified s3 bucket.
      CodeUri: app/
      Handler: appointment_format.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowGetDBInfo
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !If [ IsProd,
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/RDS/DMS*",
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/RDS/DMS*"
                        ]
            - Sid: S3
              Effect: Allow
              Action:
                - s3:*
              Resource: !If [ IsProd,
                  !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                  !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                ]
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ReyReyFormatSAQueue.Arn

  ReyReyFormatSADLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub ReyReyFormatSADLQ-${Environment}
      AlarmDescription: Messages are in the reyrey format SA lambda
      ActionsEnabled: true
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: QueueName
          Value: !GetAtt ReyReyFormatSADLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  TopicUnivClientEngineeringAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: alert_client_engineering
      Subscription:
        - Endpoint: !If [ IsProd,
                    "impel_alert_client_engineering@impel.io",
                    "ken@impel.io",
                  ]
          Protocol: email
      TopicName: alert_client_engineering
