AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Quiter DMS ETL

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: '^[a-zA-z0-9-]+$'
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens
  CEAlertTopicArn:
    Description: The ARN of the SNS topic serving as the Alert Topic for CE
    Type: String
    AllowedPattern: '^arn:aws:sns:[a-z]{2}-[a-z]+-\d{1}:\d{12}:.*$'
    ConstraintDescription: Must be an SNS ARN

Conditions:
  IsProd:
    Fn::Equals:
    - Ref: AWS::AccountId
    - 196800776222
  IsUsEast1: !Equals [ !Ref 'AWS::Region', 'us-east-1' ]

Mappings:
  Subnets:
    us-east-1:
      '196800776222':
        - subnet-0d29a385efe83bf1c
        - subnet-0e88ecdd743701e96
        - subnet-00291e028e21cb78f
        - subnet-0b1555d5fa3c8ba8e
      '143813444726':
        - subnet-030d57e39ec0df603
        - subnet-01044d580678ea63c
        - subnet-0b29db0aeb6cdabec
        - subnet-0e28d592f2ca28fb7
  VpcId:
    us-east-1:
      '196800776222': vpc-03417e688cee5bc07
      '143813444726': vpc-0b28df8980a1905d5

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Sub '${AWS::AccountId}'
        REGION: !Sub '${AWS::Region}'
        ENVIRONMENT: !Ref Environment
        IS_PROD: !If [ IsProd, 1, 0 ]
        LOGLEVEL: INFO
        INTEGRATIONS_BUCKET: !If [ IsProd,
          !Sub "integrations-${AWS::Region}-prod",
          !Sub "integrations-${AWS::Region}-test"
        ]
        INVOKE_QUEUE: !Ref InvokeQueue
        MERGE_VEHICLE_SALE_QUEUE: !Ref QuiterMergeVehicleSalesQueue
        MERGE_REPAIR_ORDER_QUEUE: !Ref QuiterMergeRepairOrderQueue
        MERGE_APPOINTMENT_QUEUE: !Ref QuiterMergeAppointmentQueue
        CE_TOPIC: !Ref CEAlertTopicArn
        CLIENT_ENGINEERING_SNS_TOPIC_ARN: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
    VpcConfig:
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetIds: !FindInMap [ Subnets, !Ref 'AWS::Region', !Ref 'AWS::AccountId' ]

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Permit traffic from the Quiter integration service
      VpcId: !FindInMap [ VpcId, !Ref 'AWS::Region', !Ref 'AWS::AccountId']
      SecurityGroupEgress:
        - Description: AllowAll
          CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: quiter-integration

  RDSInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Quiter integration rds access
      GroupId: !If [ IsProd,
                      'sg-00e12bc4c116eb820',
                      'sg-00b911ee260ce5153'
                    ]
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId

  InvokeQuiterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Invoke data pull for every Quiter dealer
      CodeUri: app/
      Handler: invoke_quiter.lambda_handler
      Timeout: 180
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowSQS
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt InvokeQueue.Arn
                - !GetAtt QuiterMergeRepairOrderQueue.Arn
                - !GetAtt QuiterMergeVehicleSalesQueue.Arn
            - Sid: AllowSecrets
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/DmsDataService*",
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/DmsDataService*",
                  ]
      Environment:
        Variables:
          Environment: !Ref Environment
          INVOKE_QUEUE: !Ref InvokeQueue
      Events:
        DailyInvoke:
          Type: Schedule
          Properties:
            Description: Start the daily data pull for each quiter dealer.
            Enabled: !If [ IsProd, true, false ]
            Schedule: cron(0 1 * * ? *)  # Daily at 1:00 AM UTC
            Input: '{"frequency": "daily"}'

  InvokeQuiterFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if Invoke Quiter function fails"
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref InvokeQuiterFunction
      Statistic: Sum
      Period: 900  # 15 minutes
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      ActionsEnabled: !If [IsProd, true, false]

  InvokeQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub quiter-${Environment}-InvokeQueue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt InvokeQueueDLQ.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 900

  InvokeQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub quiter-${Environment}-InvokeQueueDLQ

  InvokeQueueDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub quiter-${Environment}-InvokeQueueDLQAlarm
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Dimensions:
        - Name: QueueName
          Value: !GetAtt InvokeQueueDLQ.QueueName
      Statistic: Sum
      Period: 900 
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      ActionsEnabled: !If [IsProd, true, false]

  ExtractDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Extract Quiter Data From FTP
      CodeUri: app/
      Handler: extract_data.lambda_handler
      Timeout: 900
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowSecrets
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/QuiterFTP*",
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/QuiterFTP*",
                  ]
            - Sid: AllowS3
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
                - s3:*Object
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                  ]
            - Sid: AllowSNSPolicy
              Effect: Allow
              Action:
                - sns:Publish
              Resource:
                - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
            - Sid: AllowSQS
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt QuiterMergeAppointmentQueue.Arn
                - !GetAtt QuiterMergeRepairOrderQueue.Arn
                - !GetAtt QuiterMergeVehicleSalesQueue.Arn
      Events:
        SQSEvent:
            Type: SQS
            Properties:
              Enabled: True
              Queue: !GetAtt InvokeQueue.Arn

# MERGE VEHICLE SALES 

  QuiterMergeVehicleSalesQueue:
    Type: AWS::SQS::Queue
    DependsOn: QuiterMergeVehicleSalesDLQ
    Properties:
      QueueName: !Sub quiter-${Environment}-QuiterMergeVehicleSalesQueue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt QuiterMergeVehicleSalesDLQ.Arn
        maxReceiveCount: 5
      VisibilityTimeout: 900

  QuiterMergeVehicleSalesDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub quiter-${Environment}-QuiterMergeVehicleSalesDLQ
      MessageRetentionPeriod: 1209600

  QuiterMergeVehicleSalesDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub quiter-${Environment}-MergeVehicleSalesDLQAlarm
      AlarmDescription: There are messages in the Quiter merge Vehicle Sales DLQ
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Dimensions:
        - Name: QueueName
          Value: !GetAtt QuiterMergeVehicleSalesDLQ.QueueName
      Statistic: Sum
      Period: 900 
      EvaluationPeriods: 1
      Threshold: 1  
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      ActionsEnabled: !If [IsProd, true, false]

  QuiterMergeVehicleSales:
    Type: AWS::Serverless::Function
    Properties:
      Description: Merge vehicle sales
      CodeUri: app/
      Handler: vehicle_sales.merge_sales.lambda_handler
      Timeout: 900
      MemorySize: 512
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowSecrets
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/QuiterFTP*",
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/QuiterFTP*",
                  ]
            - Sid: AllowSQS
              Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:ChangeMessageVisibility
              Resource: 
                - !If [ IsProd,
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                  ]
            - Sid: AllowSNSPolicy
              Effect: Allow
              Action:
                - sns:Publish
              Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
            - Sid: AllowS3
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
                - s3:*Object
              Resource:
                - !If 
                  - IsProd
                  - !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*"
                  - !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                - !If 
                  - IsProd
                  - !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod"
                  - !Sub "arn:aws:s3:::integrations-${AWS::Region}-test"
            - Sid: QuiterFormatQueuePolicy
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt QuiterMergeVehicleSalesQueue.Arn

      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Enabled: True
            Queue: !GetAtt QuiterMergeVehicleSalesQueue.Arn

# FORMAT VEHICLE SALES 

  QuiterFormatVehicleSalesQueue:
    Type: AWS::SQS::Queue
    DependsOn: QuiterFormatVehicleSalesDLQ
    Properties:
      QueueName: !Sub quiter-${Environment}-QuiterFormatVehicleSalesQueue
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt QuiterFormatVehicleSalesDLQ.Arn
        maxReceiveCount: 5

  QuiterFormatVehicleSalesDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub quiter-${Environment}-QuiterFormatVehicleSalesDLQ

  QuiterFormatDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub quiter-${Environment}-QuiterFormatVehicleSalesDLQAlarm
      AlarmDescription: There are messages in the Quiter format Vehicle Sales DLQ
      ActionsEnabled: !If [IsProd, true, false]
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
      Dimensions:
        - Name: QueueName
          Value: !GetAtt QuiterFormatVehicleSalesDLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 900
      Statistic: Sum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
  
  QuiterFormatVehicleSalesQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !If [ IsProd,
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                  ]
      Protocol: sqs
      RawMessageDelivery: true
      Endpoint: !GetAtt QuiterFormatVehicleSalesQueue.Arn
      FilterPolicyScope: MessageBody
      FilterPolicy:
        '{"Records":{"s3":{"object":{"key":[{"prefix":"quiter/fi_closed_deal"}]}},"eventName":[{"prefix":"ObjectCreated:"}]}}'

  QuiterFormatVehicleSaleQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref QuiterFormatVehicleSalesQueue
      PolicyDocument:
          Version: '2012-10-17'
          Id: QuiterFormatVehicleSalesQueuePolicy
          Statement:
            - Sid: Allow-SNS-SendMessage
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt QuiterFormatVehicleSalesQueue.Arn
              Principal:
                  Service: sns.amazonaws.com
              Condition:
                  ArnEquals:
                      aws:SourceArn: !If [ IsProd,
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                          ]

  QuiterFormatVehicleSales:
    Type: AWS::Serverless::Function
    Properties:
      Description: Format Quiter vehicle Sales data to the unified s3 bucket.
      CodeUri: app/
      Handler: vehicle_sales.vehicle_sale_format.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowGetDBInfo
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !If [ IsProd,
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/DMSDB*",
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/DMSDB*"
                        ]
            - Sid: S3
              Effect: Allow
              Action:
                - s3:*
              Resource:
                - !If 
                  - IsProd
                  - !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*"
                  - !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                - !If 
                  - IsProd
                  - !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod"
                  - !Sub "arn:aws:s3:::integrations-${AWS::Region}-test"
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt QuiterFormatVehicleSalesQueue.Arn
  
  # MERGE APPOINTMENTS 

  QuiterMergeAppointmentQueue:
    Type: AWS::SQS::Queue
    DependsOn: QuiterMergeAppointmentDeadLetterQueue
    Properties:
      QueueName: !Sub quiter-${Environment}-QuiterMergeAppointmentQueue
      VisibilityTimeout: 3600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt QuiterMergeAppointmentDeadLetterQueue.Arn
        maxReceiveCount: 3

  QuiterMergeAppointmentDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "quiter-${Environment}-MergeAppointmentsDLQ"
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 10

  QuiterMergeAppointment:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub quiter-${Environment}-MergeAppointments
      CodeUri: app/
      Handler: appointments.merge_appointments.lambda_handler
      Timeout: 900
      MemorySize: 512
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowS3
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
                - s3:*Object
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                  ]
                - !If [ IsProd,
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod",
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-test"
                  ]
            - Sid: AllowSNSPolicy
              Effect: Allow
              Action:
                - sns:Publish
              Resource:
                - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
                - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:claire_test_sns_topic"
            - Sid: AllowSQS
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt QuiterFormatAppointmentQueue.Arn
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Enabled: True
            Queue: !GetAtt QuiterMergeAppointmentQueue.Arn

  MergeAppointmentsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/quiter-${Environment}-MergeAppointments"

  QuiterMergeAppointmentsDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub quiter-${Environment}-MergeAppointmentsDLQAlarm
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Dimensions:
        - Name: QueueName
          Value: !GetAtt QuiterMergeAppointmentDeadLetterQueue.QueueName
      Statistic: Sum
      Period: 900  # 15 minutes
      EvaluationPeriods: 1
      Threshold: 1  # Trigger alarm if there is at least 1 message in DLQ
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      ActionsEnabled: !If [IsProd, true, false]

  # FORMAT APPOINTMENTS

  QuiterFormatAppointmentQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !If [ IsProd,
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                  ]
      Protocol: sqs
      RawMessageDelivery: true
      Endpoint: !GetAtt QuiterFormatAppointmentQueue.Arn
      FilterPolicyScope: MessageBody
      FilterPolicy:
        '{"Records":{"s3":{"object":{"key":[{"prefix":"quiter/service_appointment"}]}},"eventName":[{"prefix":"ObjectCreated:"}]}}'

  QuiterFormatAppointment:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub quiter-${Environment}-QuiterFormatAppointment
      CodeUri: app/
      Handler: appointments.format_appointment.lambda_handler
      Timeout: 60
      MemorySize: 256
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowS3
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
                - s3:*Object
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                  ]
            - Sid: AllowSNSPolicy
              Effect: Allow
              Action:
                - sns:Publish
              Resource:
                - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
                - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:claire_test_sns_topic"
            - Sid: AllowSQS
              Effect: Allow
              Action:
                - sqs:ReceiveMessage
              Resource:
                - !GetAtt QuiterFormatAppointmentQueue.Arn
            - Sid: AllowGetDBInfo
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !If [ IsProd,
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/DMSDB*",
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/DMSDB*"
                        ]
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Enabled: True
            Queue: !GetAtt QuiterFormatAppointmentQueue.Arn

  QuiterFormatAppointmentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/quiter-${Environment}-QuiterFormatAppointment"

  QuiterFormatAppointmentQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "quiter-${Environment}-QuiterFormatAppointmentQueue"
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt QuiterFormatAppointmentDeadLetterQueue.Arn
        maxReceiveCount: 3

  QuiterFormatAppointmentDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "quiter-${Environment}-QuiterFormatAppointmentDLQ"
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 10

  QuiterFormatAppointmentQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref QuiterFormatAppointmentQueue
      PolicyDocument:
          Version: '2012-10-17'
          Id: QuiterFormatAppointmentQueuePolicy
          Statement:
            - Sid: Allow-SNS-SendMessage
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt QuiterFormatAppointmentQueue.Arn
              Principal:
                  Service: sns.amazonaws.com
              Condition:
                  ArnEquals:
                      aws:SourceArn: !If [ IsProd,
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                          ]

  QuiterFormatAppointmentDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub quiter-${Environment}-QuiterFormatAppointmentDLQAlarm
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Dimensions:
        - Name: QueueName
          Value: !GetAtt QuiterFormatAppointmentDeadLetterQueue.QueueName
      Statistic: Sum
      Period: 900  # 15 minutes
      EvaluationPeriods: 1
      Threshold: 1  # Trigger alarm if there is at least 1 message in DLQ
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      ActionsEnabled: !If [IsProd, true, false]

  # MERGE REPAIR ORDERS

  QuiterMergeRepairOrderQueue:
    Type: AWS::SQS::Queue
    DependsOn: QuiterMergeRepairOrderDLQ
    Properties:
      QueueName: !Sub quiter-${Environment}-QuiterMergeRepairOrderQueue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt QuiterMergeRepairOrderDLQ.Arn
        maxReceiveCount: 5
      VisibilityTimeout: 900

  QuiterMergeRepairOrderDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub quiter-${Environment}-QuiterMergeRepairOrderDLQ
      MessageRetentionPeriod: 1209600

  QuiterMergeRepairOrderDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub quiter-${Environment}-QuiterMergeRepairOrderDLQAlarm
      AlarmDescription: There are messages in the Quiter merge Vehicle Sales DLQ
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Dimensions:
        - Name: QueueName
          Value: !GetAtt QuiterMergeRepairOrderDLQ.QueueName
      Statistic: Sum
      Period: 900 
      EvaluationPeriods: 1
      Threshold: 1  
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      ActionsEnabled: !If [IsProd, true, false]

  QuiterMergeRepairOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Merge repair orders, customers, and vehicles files and save to S3 raw zone
      CodeUri: app/
      Handler: repair_order.repair_order_merge.lambda_handler
      Timeout: 900
      MemorySize: 512
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowSecrets
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/QuiterFTP*",
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/QuiterFTP*",
                  ]
            - Sid: AllowSQS
              Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:ChangeMessageVisibility
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*",
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                  ]
            - Sid: AllowSNSPolicy
              Effect: Allow
              Action:
                - sns:Publish
              Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
            - Sid: AllowS3
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
                - s3:*Object
              Resource:
                - !If 
                  - IsProd
                  - !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*"
                  - !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                - !If 
                  - IsProd
                  - !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod"
                  - !Sub "arn:aws:s3:::integrations-${AWS::Region}-test"
            - Sid: QuiterFormatQueuePolicy
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt QuiterMergeRepairOrderQueue.Arn
                         
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          MERGE_QUEUE: !Ref QuiterMergeRepairOrderQueue
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Enabled: True
            Queue: !GetAtt QuiterMergeRepairOrderQueue.Arn

  # FORMAT REPAIR ORDERS

  QuiterFormatRepairOrderQueue:
    Type: AWS::SQS::Queue
    DependsOn: QuiterMergeRepairOrderDLQ
    Properties:
      QueueName: !Sub quiter-${Environment}-QuiterFormatRepairOrderQueue
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt QuiterFormatRepairOrderDLQ.Arn
        maxReceiveCount: 5

  QuiterFormatRepairOrderDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub quiter-${Environment}-QuiterFormatRepairOrderDLQ
  
  QuiterFormatRepairOrderDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub quiter-${Environment}-QuiterFormatRepairOrderDLQAlarm
      AlarmDescription: There are messages in the Quiter format Vehicle Sales DLQ
      ActionsEnabled: !If [IsProd, true, false]
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering"
      Dimensions:
        - Name: QueueName
          Value: !GetAtt QuiterFormatRepairOrderQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 900
      Statistic: Sum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1

  QuiterFormatRepairOrderQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !If [ IsProd,
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                  ]
      Protocol: sqs
      RawMessageDelivery: true
      Endpoint: !GetAtt QuiterFormatRepairOrderQueue.Arn
      FilterPolicyScope: MessageBody
      FilterPolicy:
        '{"Records":{"s3":{"object":{"key":[{"prefix":"quiter/repair_order"}]}},"eventName":[{"prefix":"ObjectCreated:"}]}}'

  QuiterFormatRepairOrderQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref QuiterFormatRepairOrderQueue
      PolicyDocument:
          Version: '2012-10-17'
          Id: QuiterFormatRepairOrderQueuePolicy
          Statement:
            - Sid: Allow-SNS-SendMessage
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt QuiterFormatRepairOrderQueue.Arn
              Principal:
                  Service: sns.amazonaws.com
              Condition:
                  ArnEquals:
                      aws:SourceArn: !If [ IsProd,
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                          ]
  QuiterFormatRepairOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda to format raw repair orders into unified format and upload to unified S3
      CodeUri: app/
      Handler: repair_order.repair_order_format.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowGetDBInfo
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !If [ IsProd,
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/DMSDB*",
                          !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/DMSDB*"
                        ]
            - Sid: S3
              Effect: Allow
              Action:
                - s3:*
              Resource:
                - !If 
                  - IsProd
                  - !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod/*"
                  - !Sub "arn:aws:s3:::integrations-${AWS::Region}-test/*"
                - !If 
                  - IsProd
                  - !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod"
                  - !Sub "arn:aws:s3:::integrations-${AWS::Region}-test"
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt QuiterFormatRepairOrderQueue.Arn