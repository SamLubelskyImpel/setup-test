AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Dealertrack DMS ETL

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: '^[a-zA-z0-9-]+$'
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens

Conditions:
  IsProd:
    Fn::Equals:
    - Ref: AWS::AccountId
    - 196800776222
  IsUsEast1: !Equals [ !Ref 'AWS::Region', 'us-east-1' ]

Mappings:
  Subnets:
    us-east-1:
      '196800776222':
        - subnet-0d29a385efe83bf1c
        - subnet-0e88ecdd743701e96
        - subnet-00291e028e21cb78f
        - subnet-0b1555d5fa3c8ba8e
      '143813444726':
        - subnet-030d57e39ec0df603
        - subnet-01044d580678ea63c
        - subnet-0b29db0aeb6cdabec
        - subnet-0e28d592f2ca28fb7
  VpcId:
    us-east-1:
      '196800776222': vpc-03417e688cee5bc07
      '143813444726': vpc-0b28df8980a1905d5

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Sub '${AWS::AccountId}'
        REGION: !Sub '${AWS::Region}'
        ENVIRONMENT: !Ref Environment
        IS_PROD: !If [ IsProd, 1, 0 ]
        LOGLEVEL: INFO
        INTEGRATIONS_BUCKET: !If [
          IsProd,
          !Sub "integrations-${AWS::Region}-prod",
          !Sub "integrations-${AWS::Region}-test"
        ]
        REPORTING_TOPIC_ARN: !If [
          IsProd,
          !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:dms-reporting-topic-prod',
          !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:dms-reporting-topic-test'
        ]
    VpcConfig:
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetIds: !FindInMap [ Subnets, !Ref 'AWS::Region', !Ref 'AWS::AccountId' ]

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Permit traffic from the Dealertrack integration
      VpcId: !FindInMap [ VpcId, !Ref 'AWS::Region', !Ref 'AWS::AccountId']
      SecurityGroupEgress:
        - Description: AllowAll
          CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: dealertrack-integration

  RDSInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "dealertrack integration rds access"
      GroupId: !If [ IsProd,
                      'sg-00e12bc4c116eb820',
                      'sg-00b911ee260ce5153'
                    ]
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: S3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - !If [
                    IsProd,
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod*",
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-test*" ]
        - PolicyName: SQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sqs:SendMessage"
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource:
                  - !GetAtt DataPullQueue.Arn
                  - !GetAtt DealertrackFormatFIQueue.Arn
                  - !GetAtt DealertrackFormatSAQueue.Arn
                  - !GetAtt DealertrackFormatROQueue.Arn
        - PolicyName: SecretsManagerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AllowGetAPIInfo
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !If [
                    IsProd,
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/dealertrack*",
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/dealertrack*" ]
                  - !If [
                    IsProd,
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/RDS/DMS*",
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/RDS/DMS*"
                  ]
        - PolicyName: LambdaVPCAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"
        - PolicyName: SNSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource:
                - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
                - !If [
                      IsProd,
                      !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:dms-reporting-topic-prod',
                      !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:dms-reporting-topic-test'
                    ]
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"

  InvokeDataPull:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub dealertrack-${Environment}-InvokeDataPull
      CodeUri: app/
      Handler: invoke_data_pull.lambda_handler
      Timeout: 30
      MemorySize: 256
      Policies:
        - Id: FunctionPermissions
          Version: "2012-10-17"
          Statement:
            - Sid: AllowSQS
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt DataPullQueue.Arn
            - Sid: AllowSecrets
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !If [ IsProd,
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/RDS/DMS*",
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/RDS/DMS*",
                  ]
      Environment:
        Variables:
          DATA_PULL_QUEUE: !Ref DataPullQueue
      Events:
        DailyInvoke:
          Type: Schedule
          Properties:
            Description: Start the daily data pull for each dealertrack dealer.
            Enabled: !If [ IsProd, true, false ]
            Schedule: cron(0 0 * * ? *)
            Input: '{}'

  InvokeDataPullLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/dealertrack-${Environment}-InvokeDataPull"

  InvokeDataPullErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub dealertrack-${Environment}-InvokeDataPullErrorAlarm
      AlarmDescription: Dealertrack Invoke failed 3 times within 15 minutes
      ActionsEnabled: !If [ IsProd, true, false ]
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref InvokeDataPull
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 900
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  DataPullQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'dealertrack-${Environment}-DataPullQueue'
      VisibilityTimeout: 180
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DataPullDLQ.Arn
        maxReceiveCount: 3

  DataPullDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'dealertrack-${Environment}-DataPullDLQ'
      VisibilityTimeout: 10
      MessageRetentionPeriod: 1209600

  DataPullDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'dealertrack-${Environment}-DataPullDLQAlarm'
      AlarmDescription: There are over 1 unprocessed messages in the DataPullDLQAlarm
      ActionsEnabled: !If [ IsProd, true, false ]
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DataPullDLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      TreatMissingData: notBreaching

  DataPullEventMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt DataPullQueue.Arn
      MaximumBatchingWindowInSeconds: 60
      FunctionName: !GetAtt DataPull.Arn

  DataPull:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub dealertrack-${Environment}-DataPull
      CodeUri: app/
      Handler: data_pull.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 180
      MemorySize: 1024

  DataPullLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/dealertrack-${Environment}-DataPull'

  # --- Historical Pull ---

  ECSHistoricalPullCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "dealertrack-${Environment}-ECSHistoricalPullCluster"

  HistoricalPullQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'dealertrack-${Environment}-HistoricalPullQueue'
      VisibilityTimeout: 60
      MessageRetentionPeriod: 1209600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt HistoricalPullDLQ.Arn
        maxReceiveCount: 3

  HistoricalPullDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'dealertrack-${Environment}-HistoricalPullDLQ'
      VisibilityTimeout: 60
      MessageRetentionPeriod: 1209600

  HistoricalPullDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'dealertrack-${Environment}-HistoricalPullDLQAlarm'
      AlarmDescription: There are over 1 unprocessed messages in the HistoricalPullDLQ
      ActionsEnabled: !If [ IsProd, true, false ]
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: QueueName
          Value: !GetAtt HistoricalPullDLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      TreatMissingData: notBreaching

  HistoricalPullTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SMAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - !If [
                    IsProd,
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/dealertrack*",
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/dealertrack*" ]
                  - !If [
                    IsProd,
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/RDS/DMS*",
                    !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/RDS/DMS*" ]
        - PolicyName: S3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - !If [
                    IsProd,
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-prod*",
                    !Sub "arn:aws:s3:::integrations-${AWS::Region}-test*" ]
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/dealertrack-${Environment}-historical-pull:*"
        - PolicyName: SQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sqs:SendMessage"
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource:
                  - !GetAtt HistoricalPullQueue.Arn

  HistoricalPullTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECRAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                Resource:
                  - !GetAtt ECRRepository.Arn
        - PolicyName: ECRTokenAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                Resource: "*"
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/dealertrack-${Environment}-historical-pull:*"
        - PolicyName: SMAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:s1/ecs/containers.sentinelone.net*"

  HistoricalPullTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "dealertrack-${Environment}-HistoricalPullTask"
      Cpu: "1024"
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref HistoricalPullTaskRole
      ExecutionRoleArn: !Ref HistoricalPullTaskExecutionRole
      PidMode: task
      ContainerDefinitions:
        - Name: !Sub "dealertrack-${Environment}-s1-agent"
          Image: "containers.sentinelone.net/cws-agent/s1agent:24.2.2-ga"
          RepositoryCredentials:
            CredentialsParameter: "s1/ecs/containers.sentinelone.net"
          Cpu: "512"
          Memory: "512"
          Essential: false
          Command:
            - "/opt/deployment.sh"
          LinuxParameters:
            Capabilities:
              Add:
                - "SYS_PTRACE"
          WorkingDirectory: "/"
          Environment:
            - Name: S1_AGENT_TYPE
              Value: "ecs_task"
            - Name: SITE_TOKEN
              Value: "eyJ1cmwiOiAiaHR0cHM6Ly91c2VhMS0wMTcuc2VudGluZWxvbmUubmV0IiwgInNpdGVfa2V5IjogImdfMGY5NmFmZGE1MDgwNWI2MyJ9"
            - Name: S1_LOG_LEVEL
              Value: "debug"
        - Name: !Sub "dealertrack-${Environment}-HistoricalPullContainer"
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/dealertrack-${Environment}-ecr:latest"
          Essential: true
          Cpu: "512"
          Memory: "512"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/dealertrack-${Environment}-historical-pull"
              awslogs-region: !Sub "${AWS::Region}"
              awslogs-stream-prefix: "historical-pull"
          Environment:
            - Name: ENVIRONMENT
              Value: !Sub "${Environment}"
            - Name: STOP_TIMEOUT
              Value: 11  # hours
            - Name: MAX_DAYS_PULL
              Value: 2555 # 7 years
            - Name: INTEGRATIONS_BUCKET
              Value: !If [ IsProd,
                !Sub "integrations-${AWS::Region}-prod",
                !Sub "integrations-${AWS::Region}-test"
              ]
            - Name: QUEUE_URL
              Value: !Ref HistoricalPullQueue

  HistoricalPullLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/dealertrack-${Environment}-historical-pull"

  HistoricalPullScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0 2 ? * * *)  # 2:00 AM UTC, Monday to Friday
      State: ENABLED
      Targets:
        - Arn: !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/dealertrack-${Environment}-ECSHistoricalPullCluster"
          Id: HistoricalPullTaskTrigger
          RoleArn: !GetAtt HistoricalPullEventBridgeRole.Arn
          EcsParameters:
            TaskDefinitionArn: !Ref HistoricalPullTaskDefinition
            LaunchType: FARGATE
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: DISABLED
                Subnets: !FindInMap [ Subnets, !Ref 'AWS::Region', !Ref 'AWS::AccountId' ]
                SecurityGroups:
                  - !Ref SecurityGroup

  HistoricalPullEventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSRunTaskPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                Resource:
                  - !Ref HistoricalPullTaskDefinition
                  - !GetAtt ECSHistoricalPullCluster.Arn
        - PolicyName: ECSPassRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt HistoricalPullTaskExecutionRole.Arn
                  - !GetAtt HistoricalPullTaskRole.Arn

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "dealertrack-${Environment}-ecr"

  DealertrackFormatRODLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub dealertrack-${Environment}-DealertrackFormatRODLQ

  DealertrackFormatROQueue:
    Type: AWS::SQS::Queue
    DependsOn: DealertrackFormatRODLQ
    Properties:
      QueueName: !Sub dealertrack-${Environment}-DealertrackFormatROQueue
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DealertrackFormatRODLQ.Arn
        maxReceiveCount: 3

  DealertrackFormatROQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !If [ IsProd,
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                  ]
      Protocol: sqs
      RawMessageDelivery: true
      Endpoint: !GetAtt DealertrackFormatROQueue.Arn
      FilterPolicyScope: MessageBody
      FilterPolicy:
        '{"Records":{"s3":{"object":{"key":[{"prefix":"dealertrack-dms/raw/repair_order"}]}},"eventName":[{"prefix":"ObjectCreated:"}]}}'

  DealertrackFormatROQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref DealertrackFormatROQueue
      PolicyDocument:
          Version: '2012-10-17'
          Id: DealertrackFormatROQueuePolicy
          Statement:
            - Sid: Allow-SNS-SendMessage
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt DealertrackFormatROQueue.Arn
              Principal:
                  Service: sns.amazonaws.com
              Condition:
                  ArnEquals:
                      aws:SourceArn: !If [ IsProd,
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                          ]

  DealertrackFormatROInsertFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub dealertrack-${Environment}-FormatRO
      Description: Format Dealertrack RO data to the unified s3 bucket.
      CodeUri: app/
      Handler: repair_order_format.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Role: !GetAtt LambdaRole.Arn
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DealertrackFormatROQueue.Arn

  DealertrackFormatROInsertLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/dealertrack-${Environment}-FormatRO"

  DealertrackFormatRODLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub dealertrack-${Environment}-FormatRODLQAlarm
      AlarmDescription: Messages are in the Dealertrack format RO DLQ
      ActionsEnabled: !If [IsProd, true, false]
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DealertrackFormatRODLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  DealertrackFormatFIDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub dealertrack-${Environment}-DealertrackFormatFIDLQ

  DealertrackFormatFIQueue:
    Type: AWS::SQS::Queue
    DependsOn: DealertrackFormatFIDLQ
    Properties:
      QueueName: !Sub dealertrack-${Environment}-DealertrackFormatFIQueue
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DealertrackFormatFIDLQ.Arn
        maxReceiveCount: 3

  DealertrackFormatFIQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !If [ IsProd,
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                  ]
      Protocol: sqs
      RawMessageDelivery: true
      Endpoint: !GetAtt DealertrackFormatFIQueue.Arn
      FilterPolicyScope: MessageBody
      FilterPolicy:
        '{"Records":{"s3":{"object":{"key":[{"prefix":"dealertrack-dms/raw/fi_closed_deal"}]}},"eventName":[{"prefix":"ObjectCreated:"}]}}'

  DealertrackFormatFIQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref DealertrackFormatFIQueue
      PolicyDocument:
          Version: '2012-10-17'
          Id: DealertrackFormatFIQueuePolicy
          Statement:
            - Sid: Allow-SNS-SendMessage
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt DealertrackFormatFIQueue.Arn
              Principal:
                  Service: sns.amazonaws.com
              Condition:
                  ArnEquals:
                      aws:SourceArn: !If [ IsProd,
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                          ]

  DealertrackFormatFIInsertFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub dealertrack-${Environment}-FormatFI
      Description: Format Dealertrack FI data to the unified s3 bucket.
      CodeUri: app/
      Handler: fi_closed_deal_format.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Role: !GetAtt LambdaRole.Arn
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DealertrackFormatFIQueue.Arn

  DealertrackFormatFIInsertLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/dealertrack-${Environment}-FormatFI"

  DealertrackFormatFIDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub dealertrack-${Environment}-FormatFIDLQAlarm
      AlarmDescription: Messages are in the Dealertrack format FI DLQ
      ActionsEnabled: !If [IsProd, true, false]
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DealertrackFormatFIDLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  DealertrackFormatSADLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub dealertrack-${Environment}-DealertrackFormatSADLQ

  DealertrackFormatSAQueue:
    Type: AWS::SQS::Queue
    DependsOn: DealertrackFormatSADLQ
    Properties:
      QueueName: !Sub dealertrack-${Environment}-DealertrackFormatSAQueue
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DealertrackFormatSADLQ.Arn
        maxReceiveCount: 3

  DealertrackFormatSAQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !If [ IsProd,
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                    !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                  ]
      Protocol: sqs
      RawMessageDelivery: true
      Endpoint: !GetAtt DealertrackFormatSAQueue.Arn
      FilterPolicyScope: MessageBody
      FilterPolicy:
        '{"Records":{"s3":{"object":{"key":[{"prefix":"dealertrack-dms/raw/service_appointment"}]}},"eventName":[{"prefix":"ObjectCreated:"}]}}'

  DealertrackFormatSAQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref DealertrackFormatSAQueue
      PolicyDocument:
          Version: '2012-10-17'
          Id: DealertrackFormatSAQueuePolicy
          Statement:
            - Sid: Allow-SNS-SendMessage
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt DealertrackFormatSAQueue.Arn
              Principal:
                  Service: sns.amazonaws.com
              Condition:
                  ArnEquals:
                      aws:SourceArn: !If [ IsProd,
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-prod',
                            !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:integrations-sns-s3-topic-${AWS::Region}-test'
                          ]

  DealertrackFormatSAInsertFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub dealertrack-${Environment}-FormatSA
      Description: Format Dealertrack SA data to the unified s3 bucket.
      CodeUri: app/
      Handler: appointment_format.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Role: !GetAtt LambdaRole.Arn
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DealertrackFormatSAQueue.Arn

  DealertrackFormatSAInsertLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/dealertrack-${Environment}-FormatSA"

  DealertrackFormatSADLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub dealertrack-${Environment}-FormatSADLQAlarm
      AlarmDescription: Messages are in the Dealertrack format SA DLQ
      ActionsEnabled: !If [IsProd, true, false]
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DealertrackFormatSADLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  MonitoringDealertrack:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub dealertrack-${Environment}-Monitoring
      CodeUri: app/
      Handler: monitoring.lambda_handler
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn

  MonitoringDealertrackLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/dealertrack-${Environment}-Monitoring"

  LogGroupInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MonitoringDealertrack.Arn
      Action: lambda:InvokeFunction
      Principal: logs.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'

  MonitoringDataPullSubscription:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - LogGroupInvokeLambdaPermission
      - MonitoringDealertrack
      - HistoricalPullLogGroup
    Properties:
      LogGroupName: !Ref HistoricalPullLogGroup
      DestinationArn: !GetAtt MonitoringDealertrack.Arn
      FilterPattern: "SUPPORT ALERT"

  MonitoringSAInsertSubscription:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - LogGroupInvokeLambdaPermission
      - MonitoringDealertrack
      - DealertrackFormatSAInsertLogGroup
    Properties:
      LogGroupName: !Ref DealertrackFormatSAInsertLogGroup
      DestinationArn: !GetAtt MonitoringDealertrack.Arn
      FilterPattern: "SUPPORT ALERT"

  MonitoringFIInsertSubscription:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - LogGroupInvokeLambdaPermission
      - MonitoringDealertrack
      - DealertrackFormatFIInsertLogGroup
    Properties:
      LogGroupName: !Ref DealertrackFormatFIInsertLogGroup
      DestinationArn: !GetAtt MonitoringDealertrack.Arn
      FilterPattern: "SUPPORT ALERT"

  MonitoringROInsertSubscription:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - LogGroupInvokeLambdaPermission
      - MonitoringDealertrack
      - DealertrackFormatROInsertLogGroup
    Properties:
      LogGroupName: !Ref DealertrackFormatROInsertLogGroup
      DestinationArn: !GetAtt MonitoringDealertrack.Arn
      FilterPattern: "SUPPORT ALERT"
