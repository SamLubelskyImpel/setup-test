AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: universal integrations

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: '^[a-zA-z0-9-]+$'
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens

  DomainSuffix:
    Description: The domain suffix of the API Gateway
    Type: String
    AllowedPattern: '^[a-zA-z0-9-]+$|'
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens
    Default: ""

Conditions:
  IsProd:
    Fn::Equals:
    - Ref: AWS::AccountId
    - 196800776222
  IsUsEast1: !Equals [ !Ref 'AWS::Region', 'us-east-1' ]

Mappings:
  SslCertificates:
    us-east-1:
      '143813444726': 'arn:aws:acm:us-east-1:143813444726:certificate/9f026b43-c690-4434-93e1-9be4ef91f67d'
      '196800776222': 'arn:aws:acm:us-east-1:196800776222:certificate/4bad36e0-d971-41e6-a2d8-a897013012be'
  Subnets:
    us-east-1:
      '196800776222':
        - subnet-0d29a385efe83bf1c
        - subnet-0e88ecdd743701e96
        - subnet-00291e028e21cb78f
        - subnet-0b1555d5fa3c8ba8e
      '143813444726':
        - subnet-030d57e39ec0df603
        - subnet-01044d580678ea63c
        - subnet-0b29db0aeb6cdabec
        - subnet-0e28d592f2ca28fb7
  VpcId:
    us-east-1:
      '196800776222': vpc-03417e688cee5bc07
      '143813444726': vpc-0b28df8980a1905d5

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Sub '${AWS::AccountId}'
        ENVIRONMENT: !Ref Environment
        LOGLEVEL: INFO
        STATEMENT_TIMEOUT_MS: '20000'
    VpcConfig:
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetIds: !FindInMap [ Subnets, !Ref 'AWS::Region', !Ref 'AWS::AccountId' ]

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Permit traffic from the DMS service
      VpcId: !FindInMap [ VpcId, !Ref 'AWS::Region', !Ref 'AWS::AccountId']
      SecurityGroupEgress:
        - Description: AllowAll
          CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: dms-service

  RDSInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "dms service rds access"
      GroupId: !If [ IsProd,
                      'sg-00e12bc4c116eb820',
                      'sg-00b911ee260ce5153'
                    ]
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId

  DmsDataServiceGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub 'dms-data-service-${Environment}'
      StageName: !Ref Environment
      Domain:
        DomainName: !If [ IsProd, 'dms-service.impel.io', !Sub 'dms-service${DomainSuffix}.testenv.impel.io' ]
        CertificateArn: !FindInMap [ SslCertificates, !Ref 'AWS::Region', !Ref 'AWS::AccountId']
        SecurityPolicy: TLS_1_2
        # There is no HostedZone on unified AWS account ask platform team to create records from autogenerated url
        # Creating new resource must also manually update record
        # Route53:
        #   HostedZoneName: !If [ IsProd, impel.io., testenv.impel.io. ]
        #   IpV6: true
      Auth:
        DefaultAuthorizer: DefaultAuth
        Authorizers:
          DefaultAuth:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt Authorizer.Arn
            Identity:
              Headers:
                - client_id
                - x_api_key
              Context:
                - resourcePath
              ReauthorizeEvery: 300
      AccessLogSetting:
        DestinationArn: !GetAtt APILogGroup.Arn
        Format: >-
            {"request_id" : "$context.requestId","api_id" : "$context.apiId","resource_path" : "$context.resourcePath","resource_id" : "$context.resourceId","http_method" : "$context.httpMethod","source_ip" : "$context.identity.sourceIp","user-agent" : "$context.identity.userAgent","account_id" : "$context.identity.accountId","api_key" : "$context.identity.apiKey","caller" : "$context.identity.caller","user" : "$context.identity.user","user_arn" : "$context.identity.userArn"}
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: './swagger/dms-data-service-oas-interpolated.yaml'
      GatewayResponses:
        BAD_REQUEST_PARAMETERS:
          ResponseTemplates:
            application/json: '{"message": "$context.error.validationErrorString"}'
        BAD_REQUEST_BODY:
          ResponseTemplates:
            application/json: '{"message": "$context.error.validationErrorString"}'
        UNAUTHORIZED:
          ResponseTemplates:
            application/json: '{"message": "This request is unauthorized."}'
          StatusCode: '401'
        ACCESS_DENIED:
          ResponseTemplates:
            application/json: '{"message": "$context.authorizer.key"}'
          StatusCode: '403'
        DEFAULT_5xx:
          ResponseTemplates:
            application/json: |
              {
                "message": "Internal Server Error. Please contact Impel support.",
                "errorDetails": "$context.error.message"
              }

  APILogGroup:
    Type: AWS::Logs::LogGroup

  APICloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  APIGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt APICloudWatchRole.Arn

  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/
      Handler: authorizer.lambda_handler
      Timeout: 120
      Policies:
        - Id: AuthorizerPermissions
          Version: '2012-10-17'
          Statement:
          - Sid: AllowGetAPIKeys
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !If [ IsProd,
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/DmsDataService*",
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/DmsDataService*"
                      ]

  RepairOrderInbound:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/
      Handler: repair_order_inbound.lambda_handler
      Timeout: 30
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref DmsDataServiceGateway
            Path: /repair-order/v1
            Method: GET
      Policies:
        - Id: DBAuthorizerPermissions
          Version: '2012-10-17'
          Statement:
          - Sid: AllowGetDBInfo
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !If [ IsProd,
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/RDS/DMS*",
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/RDS/DMS*"
                      ]
  CreateDealer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/
      Handler: create_dealer_inbound.lambda_handler
      Timeout: 30
      Events:
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref DmsDataServiceGateway
            Path: /create-dealer/v1
            Method: POST
      Policies:
        - Id: DBAuthorizerPermissions
          Version: '2012-10-17'
          Statement:
          - Sid: AllowGetDBInfo
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !If [ IsProd,
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/RDS/DMS*",
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/RDS/DMS*"
                      ]

  VehicleSaleInbound:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/
      Handler: vehicle_sale_inbound.lambda_handler
      Timeout: 30
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref DmsDataServiceGateway
            Path: /vehicle-sale/v1
            Method: GET
      Policies:
        - Id: DBAuthorizerPermissions
          Version: '2012-10-17'
          Statement:
          - Sid: AllowGetDBInfo
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !If [ IsProd,
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/RDS/DMS*",
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/RDS/DMS*"
                      ]

  DealerInbound:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/
      Handler: dealer_inbound.lambda_handler
      Timeout: 30
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref DmsDataServiceGateway
            Path: /dealer/v1
            Method: GET
      Policies:
        - Id: DBAuthorizerPermissions
          Version: '2012-10-17'
          Statement:
          - Sid: AllowGetDBInfo
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !If [ IsProd,
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/RDS/DMS*",
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/RDS/DMS*"
                      ]

  AppointmentInbound:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/
      Handler: appointment_inbound.lambda_handler
      Timeout: 30
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref DmsDataServiceGateway
            Path: /appointment/v1
            Method: GET
      Policies:
        - Id: DBAuthorizerPermissions
          Version: '2012-10-17'
          Statement:
          - Sid: AllowGetDBInfo
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !If [ IsProd,
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/RDS/DMS*",
                        !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/RDS/DMS*"
                      ]

  RepairInboundAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub RepairInboundAlarm-${Environment}
      AlarmDescription: An error has occurred in the Repair Order Inbound Lambda
      ActionsEnabled: true
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: FunctionName
          Value: !Ref RepairOrderInbound
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  DealerInboundAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub DealerInboundAlarm-${Environment}
      AlarmDescription: An error has occurred in the Dealer Inbound Lambda
      ActionsEnabled: true
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: FunctionName
          Value: !Ref DealerInbound
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  VehicleSaleInboundAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub VehicleSaleInboundAlarm-${Environment}
      AlarmDescription: An error has occurred in the Vehicle Sale Inbound Lambda
      ActionsEnabled: true
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: FunctionName
          Value: !Ref VehicleSaleInbound
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  AppointmentInboundAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmName: !Sub AppointmentInboundAlarm-${Environment}
      AlarmDescription: An error has occurred in the Appointment Inbound Lambda
      ActionsEnabled: true
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: FunctionName
          Value: !Ref AppointmentInbound
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching

  DMSDBAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "DMSDBAlarm-${Environment}"
      AlarmDescription: Alarm for the Shared Layer DMS DB when CPU usage exceeds 60%
      MetricName: CPUUtilization
      Namespace: AWS/RDS
      Statistic: Average
      Period: 60  # 1 minute
      EvaluationPeriods: 1
      Threshold: 75
      ComparisonOperator: GreaterThanOrEqualToThreshold
      ActionsEnabled: !If [ IsProd, true, false ]
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !If [ IsProd, unified-data-dms-prod, unified-data-dms-test ]
