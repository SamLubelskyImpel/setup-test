AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: XTime appointment integration

Parameters:
  Environment:
    Description: The name of the runtime environment
    Type: String
    AllowedPattern: "^[a-zA-z0-9-]+$"
    ConstraintDescription: Must contain only lowercase, uppercase, numbers, or hyphens

Conditions:
  IsProd:
    Fn::Equals:
      - Ref: AWS::AccountId
      - 196800776222
  IsUsEast1: !Equals [!Ref "AWS::Region", "us-east-1"]

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        APPT_API_DOMAIN: !If [IsProd, "appt-service.impel.io", "appt-service-test.testenv.impel.io"]
        SNS_TOPIC_ARN: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:alert_client_engineering'
        AWS_ACCOUNT_ID: !Sub "${AWS::AccountId}"
        ENVIRONMENT: !Ref Environment
        LOGLEVEL: INFO

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AccessSecretsManager
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !If [
                      IsProd,
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/appt-integration-partners*",
                      !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/appt-integration-partners*",
                    ]
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  CreateAppointments:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub xtime-${Environment}-CreateAppointments
      CodeUri: app/
      Handler: appointment_handler.create_appointment
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn

  CreateAppointmentsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/xtime-${Environment}-CreateAppointments"

  CreateAppointmentsCloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "CreateAppointmentsFailureAlarm-${Environment}"
      AlarmDescription: "Alarm for failed invocations of CreateAppointments Lambda"
      Namespace: "AWS/Lambda"
      MetricName: "Errors"
      Dimensions:
        - Name: "FunctionName"
          Value: !Ref CreateAppointments
      Statistic: "Sum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref SNS_TOPIC_ARN

  GetAppTimeSlots:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub xtime-${Environment}-GetAppTimeSlots
      CodeUri: app/
      Handler: appointment_handler.get_appt_time_slots
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn

  GetAppTimeSlotsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/xtime-${Environment}-GetAppTimeSlots"

  GetAppTimeSlotsCloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "GetAppTimeSlotsFailureAlarm-${Environment}"
      AlarmDescription: "Alarm for failed invocations of GetAppTimeSlots Lambda"
      Namespace: "AWS/Lambda"
      MetricName: "Errors"
      Dimensions:
        - Name: "FunctionName"
          Value: !Ref GetAppTimeSlots
      Statistic: "Sum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref SNS_TOPIC_ARN

  GetAppointments:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub xtime-${Environment}-GetAppointments
      CodeUri: app/
      Handler: appointment_handler.get_appointments
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn

  GetAppointmentsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/xtime-${Environment}-GetAppointments"

  GetAppointmentsCloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "GetAppointmentsFailureAlarm-${Environment}"
      AlarmDescription: "Alarm for failed invocations of GetAppointments Lambda"
      Namespace: "AWS/Lambda"
      MetricName: "Errors"
      Dimensions:
        - Name: "FunctionName"
          Value: !Ref GetAppointments
      Statistic: "Sum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref SNS_TOPIC_ARN
